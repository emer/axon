// Code generated by "goal build"; DO NOT EDIT.
//line learn-path.goal:1
// Copyright (c) 2023, The Emergent Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package axon

import (
	"cogentcore.org/core/math32"
	"github.com/emer/axon/v2/fsfffb"
)

//gosl:start

// DWtSyn is the overall entry point for weight change (learning) at given synapse.
// It selects appropriate function based on pathway type.
// rpl is the receiving layer SubPool
func (pt *PathParams) DWtSyn(ctx *Context, rlay *LayerParams, syni, si, ri, di uint32) {
	if pt.Learn.Learn == 0 {
		return
	}
	isTarget := rlay.IsTarget()
	spi := NeuronIxs.Value(int(ri), int(NrnSubPool))
	pi := rlay.PoolIndex(spi)
	lpi := rlay.PoolIndex(0)
	switch pt.Type {
	case RWPath:
		pt.DWtSynRWPred(ctx, syni, si, ri, lpi, pi, di)
	case TDPredPath:
		pt.DWtSynTDPred(ctx, syni, si, ri, lpi, pi, di)
	case VSMatrixPath:
		pt.DWtSynVSMatrix(ctx, syni, si, ri, lpi, pi, di)
	case DSMatrixPath:
		pt.DWtSynDSMatrix(ctx, syni, si, ri, lpi, pi, di)
	case VSPatchPath:
		pt.DWtSynVSPatch(ctx, syni, si, ri, lpi, pi, di)
	case DSPatchPath:
		pt.DWtSynDSPatch(ctx, syni, si, ri, lpi, pi, di)
	case BLAPath:
		pt.DWtSynBLA(ctx, syni, si, ri, lpi, pi, di)
	case HipPath:
		pt.DWtSynHip(ctx, syni, si, ri, lpi, pi, di, isTarget) // by default this is the same as DWtSynCortex (w/ unused Hebb component in the algorithm) except that it uses WtFromDWtSynNoLimits
	default:
		if pt.Learn.Hebb.On.IsTrue() {
			pt.DWtSynHebb(ctx, syni, si, ri, lpi, pi, di)
		} else {
			pt.DWtSynCortex(ctx, syni, si, ri, lpi, pi, di, isTarget)
		}
	}
}

// SynCa gets the synaptic calcium P (potentiation) and D (depression)
// values, using an optimized integration of neuron-level [CaBins] values,
// and weight factors to capture the different CaP vs. CaD time constants.
func (pt *PathParams) SynCa(ctx *Context, si, ri, di uint32, syCaP, syCaD *float32) {
	nbins := NetworkIxs[0].NCaBins
	cadSt := GvCaBinWts + GlobalScalarVars(nbins)

	// T0
	r0 := Neurons.Value(int(ri), int(di), int(CaBins+NeuronVars(0)))
	s0 := Neurons.Value(int(si), int(di), int(CaBins+NeuronVars(0)))
	sp := r0 * s0
	cp := sp * GlobalScalars.Value(int(GvCaBinWts+GlobalScalarVars(0)), int(0))
	cd := sp * GlobalScalars.Value(int(cadSt+GlobalScalarVars(0)), int(0))

	syn20 := pt.Learn.DWt.SynCa20.IsTrue()

	for i := int32(1); i < nbins; i++ {
		rt := Neurons.Value(int(ri), int(di), int(CaBins+NeuronVars(i)))
		rt1 := Neurons.Value(int(ri), int(di), int(CaBins+NeuronVars(i-1)))
		st := Neurons.Value(int(si), int(di), int(CaBins+NeuronVars(i)))
		st1 := Neurons.Value(int(si), int(di), int(CaBins+NeuronVars(i-1)))
		sp := float32(0)
		if syn20 {
			sp = 0.25 * (rt + rt1) * (st + st1)
		} else {
			sp = rt * st
		}
		cp += sp * GlobalScalars.Value(int(GvCaBinWts+GlobalScalarVars(i)), int(0))
		cd += sp * GlobalScalars.Value(int(cadSt+GlobalScalarVars(i)), int(0))
	}
	*syCaP = pt.Learn.DWt.CaPScale * cp
	*syCaD = cd
}

// DWtSynCortex computes the weight change (learning) at given synapse, using the
// kinase error-driven learning rule for cortical neurons. The error delta is
// based on the receiving neuron's [LearnCaP] - [LearnCaD], multiplied by a separate
// synaptic activation credit assignment factor computed from synaptic co-product CaD values.
func (pt *PathParams) DWtSynCortex(ctx *Context, syni, si, ri, lpi, pi, di uint32, isTarget bool) {
	var syCaP, syCaD float32
	pt.SynCa(ctx, si, ri, di, &syCaP, &syCaD)

	syn := syCaD               // synaptic activity co-product factor.
	if pt.Type == CTCtxtPath { // layer 6 CT pathway
		syn = Neurons.Value(int(si), int(di), int(BurstPrv))
	}

	// integrate synaptic trace over time: this is actually beneficial in certain cases,
	// in addition to the ETraceLearn factor.
	SynapseTraces.Set(syn, int(syni), int(di), int(DTr))
	tr := pt.Learn.DWt.SynTrace(SynapseTraces.Value(int(syni), int(di), int(Tr)), syn)
	SynapseTraces.Set(tr, int(syni), int(di), int(Tr))

	if Synapses.Value(int(syni), int(Wt)) == 0 { // failed con, no learn
		return
	}

	// error-gradient factor
	var err float32
	if isTarget {
		err = syCaP - syCaD // for target layers, syn Ca drives error signal directly
	} else {
		if pt.Type == CTCtxtPath || syCaP > pt.Learn.DWt.LearnThr || syCaD > pt.Learn.DWt.LearnThr {
			err = tr * (Neurons.Value(int(ri), int(di), int(LearnCaP)) - Neurons.Value(int(ri), int(di), int(LearnCaD))) * Neurons.Value(int(ri), int(di), int(ETraceLearn))
		}
	}

	// softbound immediately -- enters into zero sum.
	// also other types might not use, so need to do this per learning rule.
	lwt := Synapses.Value(int(syni), int(LWt)) // linear weight
	if err > 0 {
		err *= (1 - lwt)
	} else {
		err *= lwt
	}
	if pt.Type == CTCtxtPath { // rn.RLRate IS needed for other pathways, just not the context one
		SynapseTraces.Set(pt.Learn.LRate.Eff*err, int(syni), int(di), int(DiDWt))
	} else {
		SynapseTraces.Set(Neurons.Value(int(ri), int(di), int(RLRate))*pt.Learn.LRate.Eff*err, int(syni), int(di), int(DiDWt))
	}
}

// DWtSynHebb computes the weight change (learning) at given synapse for cortex.
// Uses synaptically integrated spiking, computed at the Theta cycle interval.
// This is the trace version for hidden units, and uses syn CaP - CaD for targets.
func (pt *PathParams) DWtSynHebb(ctx *Context, syni, si, ri, lpi, pi, di uint32) {
	rLearnCaP := Neurons.Value(int(ri), int(di), int(LearnCaP))
	sNrnCap := Neurons.Value(int(si), int(di), int(LearnCaP))
	lwt := Synapses.Value(int(syni), int(LWt)) // linear weight
	hebb := rLearnCaP * (pt.Learn.Hebb.Up*sNrnCap*(1-lwt) - pt.Learn.Hebb.Down*(1-sNrnCap)*lwt)
	// not: Neurons[ri, di, RLRate]*
	SynapseTraces.Set(pt.Learn.LRate.Eff*hebb, int(syni), int(di), int(DiDWt))
}

// DWtSynHip computes the weight change (learning) at given synapse for cortex + Hip (CPCA Hebb learning).
// Uses synaptically integrated spiking, computed at the Theta cycle interval.
// This is the trace version for hidden units, and uses syn CaP - CaD for targets.
// Adds proportional CPCA learning rule for hip-specific paths
func (pt *PathParams) DWtSynHip(ctx *Context, syni, si, ri, lpi, pi, di uint32, isTarget bool) {
	var syCaP, syCaD float32
	pt.SynCa(ctx, si, ri, di, &syCaP, &syCaD)

	syn := syCaD // synaptic activity co-product factor.
	// integrate synaptic trace over time: this is actually beneficial in certain cases,
	// in addition to the ETraceLearn factor.
	SynapseTraces.Set(syn, int(syni), int(di), int(DTr))
	tr := pt.Learn.DWt.SynTrace(SynapseTraces.Value(int(syni), int(di), int(Tr)), syn)
	SynapseTraces.Set(tr, int(syni), int(di), int(Tr))

	if Synapses.Value(int(syni), int(Wt)) == 0 { // failed con, no learn
		return
	}

	// error-driven learning part
	rLearnCaP := Neurons.Value(int(ri), int(di), int(LearnCaP))
	rLearnCaD := Neurons.Value(int(ri), int(di), int(LearnCaD))
	var err float32
	if isTarget {
		err = syCaP - syCaD // for target layers, syn Ca drives error signal directly
	} else {
		err = tr * (rLearnCaP - rLearnCaD) * Neurons.Value(int(ri), int(di), int(ETraceLearn))
	}

	// softbound immediately -- enters into zero sum.
	// also other types might not use, so need to do this per learning rule
	lwt := Synapses.Value(int(syni), int(LWt)) // linear weight
	if err > 0 {
		err *= (1 - lwt)
	} else {
		err *= lwt
	}

	// hebbian-learning part
	sNrnCap := Neurons.Value(int(si), int(di), int(LearnCaP))
	savg := 0.5 + pt.Hip.SAvgCor*(pt.Hip.SNominal-0.5)
	savg = 0.5 / math32.Max(pt.Hip.SAvgThr, savg) // keep this Sending Average Correction term within bounds (SAvgThr)
	hebb := rLearnCaP * (sNrnCap*(savg-lwt) - (1-sNrnCap)*lwt)

	// setting delta weight (note: impossible to be CTCtxtPath)
	dwt := Neurons.Value(int(ri), int(di), int(RLRate)) * pt.Learn.LRate.Eff * (pt.Hip.Hebb*hebb + pt.Hip.Err*err)
	SynapseTraces.Set(dwt, int(syni), int(di), int(DiDWt))
}

// DWtSynBLA computes the weight change (learning) at given synapse for BLAPath type.
// Like the BG Matrix learning rule, a synaptic tag "trace" is established at CS onset (ACh)
// and learning at US / extinction is a function of trace * delta from US activity
// (temporal difference), which limits learning.
func (pt *PathParams) DWtSynBLA(ctx *Context, syni, si, ri, lpi, pi, di uint32) {
	dwt := float32(0)
	ach := GlobalScalars.Value(int(GvACh), int(di))
	if GlobalScalars.Value(int(GvHasRew), int(di)) > 0 { // learn and reset
		ract := Neurons.Value(int(ri), int(di), int(CaD))
		if ract < pt.Learn.DWt.LearnThr {
			ract = 0
		}
		tr := SynapseTraces.Value(int(syni), int(di), int(Tr))
		ustr := pt.BLA.USTrace
		tr = ustr*Neurons.Value(int(si), int(di), int(Burst)) + (1.0-ustr)*tr
		delta := Neurons.Value(int(ri), int(di), int(CaP)) - Neurons.Value(int(ri), int(di), int(CaDPrev))
		if delta < 0 { // neg delta learns slower in Acq, not Ext
			delta *= pt.BLA.NegDeltaLRate
		}
		dwt = tr * delta * ract
		SynapseTraces.Set(0.0, int(syni), int(di), int(Tr))
	} else if ach > pt.BLA.AChThr {
		// note: the former NonUSLRate parameter is not used -- Trace update Tau replaces it..  elegant
		dtr := ach * Neurons.Value(int(si), int(di), int(Burst))
		SynapseTraces.Set(dtr, int(syni), int(di), int(DTr))
		tr := pt.Learn.DWt.SynTrace(SynapseTraces.Value(int(syni), int(di), int(Tr)), dtr)
		SynapseTraces.Set(tr, int(syni), int(di), int(Tr))
	} else {
		SynapseTraces.Set(0.0, int(syni), int(di), int(DTr))
	}
	lwt := Synapses.Value(int(syni), int(LWt))
	if dwt > 0 {
		dwt *= (1 - lwt)
	} else {
		dwt *= lwt
	}
	SynapseTraces.Set(Neurons.Value(int(ri), int(di), int(RLRate))*pt.Learn.LRate.Eff*dwt, int(syni), int(di), int(DiDWt))
}

// DWtSynRWPred computes the weight change (learning) at given synapse,
// for the RWPredPath type
func (pt *PathParams) DWtSynRWPred(ctx *Context, syni, si, ri, lpi, pi, di uint32) {
	// todo: move all of this into rn.RLRate
	lda := GlobalScalars.Value(int(GvDA), int(di))
	da := lda
	lr := pt.Learn.LRate.Eff
	eff_lr := lr
	if NeuronIxs.Value(int(ri), int(NrnNeurIndex)) == 0 {
		if Neurons.Value(int(ri), int(di), int(Ge)) > Neurons.Value(int(ri), int(di), int(Act)) && da > 0 { // clipped at top, saturate up
			da = 0
		}
		if Neurons.Value(int(ri), int(di), int(Ge)) < Neurons.Value(int(ri), int(di), int(Act)) && da < 0 { // clipped at bottom, saturate down
			da = 0
		}
		if da < 0 {
			eff_lr *= pt.RLPred.OppSignLRate
		}
	} else {
		eff_lr = -eff_lr                                                                                    // negative case
		if Neurons.Value(int(ri), int(di), int(Ge)) > Neurons.Value(int(ri), int(di), int(Act)) && da < 0 { // clipped at top, saturate up
			da = 0
		}
		if Neurons.Value(int(ri), int(di), int(Ge)) < Neurons.Value(int(ri), int(di), int(Act)) && da > 0 { // clipped at bottom, saturate down
			da = 0
		}
		if da >= 0 {
			eff_lr *= pt.RLPred.OppSignLRate
		}
	}

	dwt := da * Neurons.Value(int(si), int(di), int(CaP)) // no recv unit activation
	SynapseTraces.Set(eff_lr*dwt, int(syni), int(di), int(DiDWt))
}

// DWtSynTDPred computes the weight change (learning) at given synapse,
// for the TDPredPath type
func (pt *PathParams) DWtSynTDPred(ctx *Context, syni, si, ri, lpi, pi, di uint32) {
	// todo: move all of this into rn.RLRate
	lda := GlobalScalars.Value(int(GvDA), int(di))
	da := lda
	lr := pt.Learn.LRate.Eff
	eff_lr := lr
	ni := NeuronIxs.Value(int(ri), int(NrnNeurIndex))
	if ni == 0 {
		if da < 0 {
			eff_lr *= pt.RLPred.OppSignLRate
		}
	} else {
		eff_lr = -eff_lr
		if da >= 0 {
			eff_lr *= pt.RLPred.OppSignLRate
		}
	}

	dwt := da * Neurons.Value(int(si), int(di), int(CaDPrev)) // no recv unit activation, prior trial act
	SynapseTraces.Set(eff_lr*dwt, int(syni), int(di), int(DiDWt))
}

// DWtSynVSMatrix computes the weight change (learning) at given synapse,
// for the VSMatrixPath type.
func (pt *PathParams) DWtSynVSMatrix(ctx *Context, syni, si, ri, lpi, pi, di uint32) {
	// note: rn.RLRate already has BurstGain * ACh * DA * (D1 vs. D2 sign reversal) factored in.

	hasRew := GlobalScalars.Value(int(GvHasRew), int(di)) > 0
	ach := GlobalScalars.Value(int(GvACh), int(di))
	if !hasRew && ach < 0.1 {
		SynapseTraces.Set(0.0, int(syni), int(di), int(DTr))
		return
	}
	rlr := Neurons.Value(int(ri), int(di), int(RLRate))

	rplus := Neurons.Value(int(ri), int(di), int(CaP))
	rminus := Neurons.Value(int(ri), int(di), int(CaD))
	sact := Neurons.Value(int(si), int(di), int(CaD))
	dtr := ach * (pt.Matrix.Delta * sact * (rplus - rminus))
	if rminus > pt.Learn.DWt.LearnThr { // key: prevents learning if < threshold
		dtr += ach * (pt.Matrix.Credit * sact * rminus)
	}
	if hasRew {
		tr := SynapseTraces.Value(int(syni), int(di), int(Tr))
		if pt.Matrix.VSRewLearn.IsTrue() {
			tr += (1 - GlobalScalars.Value(int(GvGoalMaint), int(di))) * dtr
		}
		dwt := rlr * pt.Learn.LRate.Eff * tr
		SynapseTraces.Set(dwt, int(syni), int(di), int(DiDWt))
		SynapseTraces.Set(0.0, int(syni), int(di), int(Tr))
		SynapseTraces.Set(0.0, int(syni), int(di), int(DTr))
	} else {
		dtr *= rlr
		SynapseTraces.Set(dtr, int(syni), int(di), int(DTr))
		SynapseTraces.SetAdd(dtr, int(syni), int(di), int(Tr))
	}
}

// DWtSynDSMatrix computes the weight change (learning) at given synapse,
// for the DSMatrixPath type.
func (pt *PathParams) DWtSynDSMatrix(ctx *Context, syni, si, ri, lpi, pi, di uint32) {
	// note: rn.RLRate already has ACh * DA * (D1 vs. D2 sign reversal) factored in,
	// at time of reward, and otherwise is just the sig deriv mod.

	rlr := Neurons.Value(int(ri), int(di), int(RLRate))
	if GlobalScalars.Value(int(GvHasRew), int(di)) > 0 { // US time -- use DA and current recv activity
		tr := SynapseTraces.Value(int(syni), int(di), int(Tr))
		dwt := rlr * pt.Learn.LRate.Eff * tr
		SynapseTraces.Set(dwt, int(syni), int(di), int(DiDWt))
		SynapseTraces.Set(0.0, int(syni), int(di), int(Tr))
		SynapseTraces.Set(0.0, int(syni), int(di), int(DTr))
	} else {
		// pfmod := Pools[pi, di, fsfffb.ModAct]
		pfmod := pt.Matrix.BasePF + Neurons.Value(int(ri), int(di), int(GModSyn)) // syn value is always better
		patchDAD1 := Pools.Value(int(pi), int(di), int(fsfffb.DAD1))
		patchDAD2 := Pools.Value(int(pi), int(di), int(fsfffb.DAD2))
		rplus := Neurons.Value(int(ri), int(di), int(CaP))
		rminus := Neurons.Value(int(ri), int(di), int(CaD))
		sact := Neurons.Value(int(si), int(di), int(CaD))
		dtr := rlr * (pt.Matrix.Delta * sact * (rplus - rminus)) // always delta
		if rminus > pt.Learn.DWt.LearnThr {                      // key: prevents learning if < threshold
			act := pt.Matrix.Credit * rlr * sact * rminus  // rlr is sig deriv
			dtr += (1.0 - pt.Matrix.PatchDA) * pfmod * act // std credit
			if pfmod > pt.Learn.DWt.LearnThr {             // we were active in output
				// D1 dopamine discounts to the extent we are the correct action at this time: shunting
				// if reward is positive at end, this doesn't overtrain; if reward is negative because
				// _other_ actions were bad, this insulates the correct one.
				// if reward is negative because this action is bad, patchD2 adds to get more blame,
				dtr += pfmod * pt.Matrix.PatchDA * ((1.0 - patchDAD1) + patchDAD2) * act
			} else { // not active; we have no role in the outcome
				// if the actual outcome is good, it is good for us to stay off
				// but if it is bad, then we should actually turn on.
				// so the sign should flip.
				// how does patch factor into that? If it thinks this is good,
				// but it wasn't activated, then go up, and vice-versa..
				dtr += pt.Matrix.OffTrace * pt.Matrix.PatchDA * (patchDAD2 - patchDAD1) * act
			}
		}
		SynapseTraces.Set(dtr, int(syni), int(di), int(DTr))
		SynapseTraces.SetAdd(dtr, int(syni), int(di), int(Tr))
	}
}

// DWtSynVSPatch computes the weight change (learning) at given synapse,
// for the VSPatchPath type.
func (pt *PathParams) DWtSynVSPatch(ctx *Context, syni, si, ri, lpi, pi, di uint32) {
	ract := Neurons.Value(int(ri), int(di), int(CaDPrev)) // t-1
	if ract < pt.Learn.DWt.LearnThr {
		ract = 0
	}
	// note: rn.RLRate already has ACh * DA * (D1 vs. D2 sign reversal) factored in.
	// and also the logic that non-positive DA leads to weight decreases.
	sact := Neurons.Value(int(si), int(di), int(CaDPrev)) // t-1
	dwt := Neurons.Value(int(ri), int(di), int(RLRate)) * pt.Learn.LRate.Eff * sact * ract
	SynapseTraces.Set(dwt, int(syni), int(di), int(DiDWt))
}

// DWtSynDSPatch computes the weight change (learning) at given synapse,
// for the DSPatchPath type. Conditioned on PF modulatory inputs.
func (pt *PathParams) DWtSynDSPatch(ctx *Context, syni, si, ri, lpi, pi, di uint32) {
	ract := Neurons.Value(int(ri), int(di), int(CaD)) // t? // todo t-1?
	if ract < pt.Learn.DWt.LearnThr {
		ract = 0
	}
	// note: rn.RLRate already has ACh * DA * (D1 vs. D2 sign reversal) factored in.
	// and also the logic that non-positive DA leads to weight decreases.

	// todo: local trace should be basically same as damod so it trains itself.

	rlr := Neurons.Value(int(ri), int(di), int(RLRate))
	if GlobalScalars.Value(int(GvHasRew), int(di)) > 0 { // US time -- use DA * tr
		tr := SynapseTraces.Value(int(syni), int(di), int(Tr))
		dwt := rlr * pt.Learn.LRate.Eff * tr
		SynapseTraces.Set(dwt, int(syni), int(di), int(DiDWt))
		SynapseTraces.Set(0.0, int(syni), int(di), int(Tr))
		SynapseTraces.Set(0.0, int(syni), int(di), int(DTr))
	} else {
		pfmod := Pools.Value(int(pi), int(di), int(fsfffb.ModAct)) // todo: syn?
		sact := Neurons.Value(int(si), int(di), int(CaD))          // t?
		dtr := pfmod * rlr * sact * ract
		SynapseTraces.Set(dtr, int(syni), int(di), int(DTr))
		SynapseTraces.SetAdd(dtr, int(syni), int(di), int(Tr))
	}
}

//////// WtFromDWt

// DWtFromDi updates DWt from data parallel DiDWt values
func (pt *PathParams) DWtFromDi(ctx *Context, syni uint32) {
	dwt := float32(0)
	for di := uint32(0); di < ctx.NData; di++ {
		dwt += SynapseTraces.Value(int(syni), int(di), int(DiDWt))
	}
	Synapses.SetAdd(dwt, int(syni), int(DWt))
}

// DWtSubMean subtracts the mean for given recv neuron ri,
// for pathways that have SubMean > 0.
// This is called on *receiving* pathways, prior to WtFromDwt.
func (pt *PathParams) DWtSubMean(ctx *Context, pti, ri, lni uint32) {
	if pt.Learn.Learn.IsFalse() {
		return
	}
	sm := pt.Learn.DWt.SubMean
	if sm == 0 { // note default is now 0, so don't exclude Target layers, which should be 0
		return
	}
	cni := pt.Indexes.RecvConSt + lni
	synn := PathRecvCon.Value(int(cni), int(Nitems))

	if synn < 1 {
		return
	}
	synst := pt.Indexes.RecvSynSt + PathRecvCon.Value(int(cni), int(StartOff))

	sumDWt := float32(0)
	nnz := 0 // non-zero
	for ci := uint32(0); ci < synn; ci++ {
		syni := RecvSynIxs.Value(int(synst + ci))
		dw := Synapses.Value(int(syni), int(DWt))
		if dw != 0 {
			sumDWt += dw
			nnz++
		}
	}
	if nnz <= 1 {
		return
	}
	sumDWt /= float32(nnz)
	for ci := uint32(0); ci < synn; ci++ {
		syni := RecvSynIxs.Value(int(synst + ci))
		if Synapses.Value(int(syni), int(DWt)) != 0 {
			Synapses.SetAdd(-sm*sumDWt, int(syni), int(DWt))
		}
	}
}

// WtFromDWtSyn is the overall entry point for updating weights from weight changes.
func (pt *PathParams) WtFromDWtSyn(ctx *Context, syni uint32) {
	switch pt.Type {
	case RWPath:
		pt.WtFromDWtSynNoLimits(ctx, syni)
	case TDPredPath:
		pt.WtFromDWtSynNoLimits(ctx, syni)
	case BLAPath:
		pt.WtFromDWtSynNoLimits(ctx, syni)
	case HipPath:
		pt.WtFromDWtSynNoLimits(ctx, syni)
	default:
		pt.WtFromDWtSynCortex(ctx, syni)
	}
}

// WtFromDWtSynCortex updates weights from dwt changes
func (pt *PathParams) WtFromDWtSynCortex(ctx *Context, syni uint32) {
	dwt := Synapses.Value(int(syni), int(DWt))
	Synapses.SetAdd(dwt, int(syni), int(DSWt))
	wt := Synapses.Value(int(syni), int(Wt))
	lwt := Synapses.Value(int(syni), int(LWt))

	pt.SWts.WtFromDWt(&wt, &lwt, dwt, Synapses.Value(int(syni), int(SWt)))
	Synapses.Set(0.0, int(syni), int(DWt))
	Synapses.Set(wt, int(syni), int(Wt))
	Synapses.Set(lwt, int(syni), int(LWt))
	// pj.Com.Fail(&sy.Wt, sy.SWt) // skipping for now -- not useful actually
}

// WtFromDWtSynNoLimits -- weight update without limits
func (pt *PathParams) WtFromDWtSynNoLimits(ctx *Context, syni uint32) {
	dwt := Synapses.Value(int(syni), int(DWt))
	if dwt == 0 {
		return
	}
	Synapses.SetAdd(dwt, int(syni), int(Wt))
	if Synapses.Value(int(syni), int(Wt)) < 0 {
		Synapses.Set(0.0, int(syni), int(Wt))
	}
	Synapses.Set(Synapses.Value(int(syni), int(Wt)), int(syni), int(LWt))
	Synapses.Set(0.0, int(syni), int(DWt))
}

// SlowAdapt does the slow adaptation: SWt learning and SynScale
func (pt *PathParams) SlowAdapt(ctx *Context, rlay *LayerParams, pti, ri, lni uint32) {
	pt.SWtFromWt(ctx, rlay, pti, ri, lni)
	pt.SynScale(ctx, rlay, pti, ri, lni)
}

// SWtFromWt updates structural, slowly adapting SWt value based on
// accumulated DSWt values, which are zero-summed with additional soft bounding
// relative to SWt limits.
func (pt *PathParams) SWtFromWt(ctx *Context, rlay *LayerParams, pti, ri, lni uint32) {
	if pt.Learn.Learn.IsFalse() || pt.SWts.Adapt.On.IsFalse() {
		return
	}
	if rlay.IsTarget() {
		return
	}
	mx := pt.SWts.Limit.Max
	mn := pt.SWts.Limit.Min
	lr := pt.SWts.Adapt.LRate

	cni := pt.Indexes.RecvConSt + lni
	synn := PathRecvCon.Value(int(cni), int(Nitems))
	synst := pt.Indexes.RecvSynSt + PathRecvCon.Value(int(cni), int(StartOff))

	avgDWt := float32(0)
	avgWt := float32(0)
	for ci := uint32(0); ci < synn; ci++ {
		syni := RecvSynIxs.Value(int(synst + ci))
		swt := Synapses.Value(int(syni), int(SWt))
		// softbound for SWt
		if Synapses.Value(int(syni), int(DSWt)) >= 0 {
			Synapses.SetMul((mx - swt), int(syni), int(DSWt))
		} else {
			Synapses.SetMul((swt - mn), int(syni), int(DSWt))
		}
		avgDWt += Synapses.Value(int(syni), int(DSWt))
		avgWt += Synapses.Value(int(syni), int(Wt))
	}
	avgDWt /= float32(synn)
	avgWt /= float32(synn)
	hiDk := math32.Clamp(pt.SWts.Adapt.HiMeanDecay*(avgWt-pt.SWts.Adapt.HiMeanThr), 0.0, pt.SWts.Adapt.HiMeanDecay)
	avgDWt *= pt.SWts.Adapt.SubMean
	for ci := uint32(0); ci < synn; ci++ {
		syni := RecvSynIxs.Value(int(synst + ci))
		Synapses.SetAdd(lr*(Synapses.Value(int(syni), int(DSWt))-avgDWt), int(syni), int(SWt))
		swt := Synapses.Value(int(syni), int(SWt))
		Synapses.Set(0.0, int(syni), int(DSWt))
		wt := Synapses.Value(int(syni), int(Wt))
		lwt := pt.SWts.LWtFromWts(wt, swt)
		lwt -= hiDk * lwt
		Synapses.Set(lwt, int(syni), int(LWt))
		Synapses.Set(pt.SWts.WtValue(swt, lwt), int(syni), int(Wt))
	}
}

// SynScale performs synaptic scaling based on running average activation vs. targets.
// Layer-level AvgDifFromTrgAvg function must be called first.
func (pt *PathParams) SynScale(ctx *Context, rlay *LayerParams, pti, ri, lni uint32) {
	if pt.Learn.Learn.IsFalse() || pt.IsInhib() {
		return
	}
	if !rlay.IsLearnTrgAvg() {
		return
	}
	lr := rlay.Learn.TrgAvgAct.SynScaleRate

	cni := pt.Indexes.RecvConSt + lni
	synn := PathRecvCon.Value(int(cni), int(Nitems))
	synst := pt.Indexes.RecvSynSt + PathRecvCon.Value(int(cni), int(StartOff))
	adif := -lr * NeuronAvgs.Value(int(ri), int(AvgDif))
	for ci := uint32(0); ci < synn; ci++ {
		syni := RecvSynIxs.Value(int(synst + ci))
		lwt := Synapses.Value(int(syni), int(LWt))
		swt := Synapses.Value(int(syni), int(SWt))
		if adif >= 0 { // key to have soft bounding on lwt here!
			Synapses.SetAdd((1-lwt)*adif*swt, int(syni), int(LWt))
		} else {
			Synapses.SetAdd(lwt*adif*swt, int(syni), int(LWt))
		}
		Synapses.Set(pt.SWts.WtValue(swt, Synapses.Value(int(syni), int(LWt))), int(syni), int(Wt))
	}
}

//gosl:end

// LRateMod sets the LRate modulation parameter for Paths, which is
// for dynamic modulation of learning rate (see also LRateSched).
// Updates the effective learning rate factor accordingly.
func (pt *Path) LRateMod(mod float32) {
	pt.Params.Learn.LRate.Mod = mod
	pt.Params.Learn.LRate.Update()
}

// LRateSched sets the schedule-based learning rate multiplier.
// See also LRateMod.
// Updates the effective learning rate factor accordingly.
func (pt *Path) LRateSched(sched float32) {
	pt.Params.Learn.LRate.Sched = sched
	pt.Params.Learn.LRate.Update()
}
