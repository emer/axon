// Code generated by "goal build"; DO NOT EDIT.
//line act-layer.goal:1
// Copyright (c) 2023, The Emergent Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package axon

import (
	"cogentcore.org/core/math32"
	"cogentcore.org/core/tensor"
	"github.com/emer/axon/v2/fsfffb"
)

//gosl:start

////////  ApplyExt

// ApplyExtFlags gets the clear mask and set mask for updating neuron flags
// based on layer type, and whether input should be applied to Target (else Ext)
func (ly *LayerParams) ApplyExtFlags(clearMask, setMask *NeuronFlags, toTarg *bool) {
	*clearMask = NeuronHasExt | NeuronHasTarg | NeuronHasCmpr
	*toTarg = false
	switch ly.Type {
	case TargetLayer:
		*setMask = NeuronHasTarg
		*toTarg = true
	case CompareLayer:
		*setMask = NeuronHasCmpr
		*toTarg = true
	default:
		*setMask = NeuronHasExt
	}
	return
}

// InitExt initializes external input state for given neuron
func (ly *LayerParams) InitExt(ni, di uint32) {
	Neurons.Set(0.0, int(ni), int(di), int(Ext))
	Neurons.Set(0.0, int(ni), int(di), int(Target))
	NeuronClearFlag(NeuronHasExt|NeuronHasTarg|NeuronHasCmpr, ni, di)
}

// ApplyExtValue applies given external value to given neuron,
// setting flags based on type of layer.
// Should only be called on Input, Target, Compare layers.
// Negative values are not valid, and will be interpreted as missing inputs.
func (ly *LayerParams) ApplyExtValue(ni, di uint32, val float32) {
	if val < 0 {
		return
	}
	var clearMask, setMask NeuronFlags
	var toTarg bool
	ly.ApplyExtFlags(&clearMask, &setMask, &toTarg)
	if toTarg {
		Neurons.Set(val, int(ni), int(di), int(Target))
	} else {
		Neurons.Set(val, int(ni), int(di), int(Ext))
	}
	NeuronClearFlag(clearMask, ni, di)
	NeuronSetFlag(setMask, ni, di)
}

func (ly *LayerParams) ApplyExtsNeuron(ni, di uint32) {
	lni := ni - ly.Indexes.NeurSt // layer-based
	ly.InitExt(ni, di)
	if IsExtLayerType(ly.Type) {
		ei := ly.Indexes.ExtsSt + lni
		ly.ApplyExtValue(ni, di, Exts.Value(int(ei), int(di)))
	}
}

// SetNeuronExtPosNeg sets neuron Ext value based on neuron index
// with positive values going in first unit, negative values rectified
// to positive in 2nd unit
func SetNeuronExtPosNeg(ctx *Context, ni, di uint32, val float32) {
	if ni == 0 {
		if val >= 0 {
			Neurons.Set(val, int(ni), int(di), int(Ext))
		} else {
			Neurons.Set(float32(0), int(ni), int(di), int(Ext))
		}
	} else {
		if val >= 0 {
			Neurons.Set(float32(0), int(ni), int(di), int(Ext))
		} else {
			Neurons.Set(-val, int(ni), int(di), int(Ext))
		}
	}
}

// IsTarget returns true if this layer is a Target layer.
// By default, returns true for layers of Type == TargetLayer
// Other Target layers include the TRCLayer in deep predictive learning.
// It is used in SynScale to not apply it to target layers.
// In both cases, Target layers are purely error-driven.
func (ly *LayerParams) IsTarget() bool {
	switch ly.Type {
	case TargetLayer:
		return true
	case PulvinarLayer:
		return true
	default:
		return false
	}
}

// IsInput returns true if this layer is an Input layer.
// By default, returns true for layers of Type == axon.InputLayer
// Used to prevent adapting of inhibition or TrgAvg values.
func (ly *LayerParams) IsInput() bool {
	switch ly.Type {
	case InputLayer:
		return true
	default:
		return false
	}
}

// IsInputOrTarget returns true if this layer is either an Input
// or a Target layer.
func (ly *LayerParams) IsInputOrTarget() bool {
	return (ly.IsTarget() || ly.IsInput())
}

// IsLearnTrgAvg returns true if this layer has Learn.TrgAvgAct.RescaleOn set for learning
// adjustments based on target average activity levels, and the layer is not an
// input or target layer.
func (ly *LayerParams) IsLearnTrgAvg() bool {
	if ly.Acts.Clamp.IsInput.IsTrue() || ly.Acts.Clamp.IsTarget.IsTrue() || ly.Learn.TrgAvgAct.RescaleOn.IsFalse() {
		return false
	}
	return true
}

// LearnTrgAvgErrLRate returns the effective error-driven learning rate for adjusting
// target average activity levels.  This is 0 if !IsLearnTrgAvg() and otherwise
// is Learn.TrgAvgAct.ErrLRate
func (ly *LayerParams) LearnTrgAvgErrLRate() float32 {
	if !ly.IsLearnTrgAvg() {
		return 0
	}
	return ly.Learn.TrgAvgAct.ErrLRate
}

//////// Cycle

// GatherSpikes integrates G*Raw and G*Syn values for given recv neuron
// while integrating the Recv Path-level GSyn integrated values.
func (ly *LayerParams) GatherSpikes(ctx *Context, ni, di uint32) {
	lni := ni - ly.Indexes.NeurSt
	ly.GatherSpikesInit(ctx, ni, di)
	for pti := uint32(0); pti < ly.Indexes.RecvN; pti++ {
		npti := RecvPathIxs.Value1D(int(ly.Indexes.RecvSt + pti))
		pt := GetPaths(npti)
		pt.GatherSpikes(ctx, ly, ni, di, lni)
	}
	ly.GiFromSpikes(ctx, ni, di)
}

// GatherSpikesInit initializes G*Raw and G*Syn values for given neuron
// prior to integration.
func (ly *LayerParams) GatherSpikesInit(ctx *Context, ni, di uint32) {
	Neurons.Set(0.0, int(ni), int(di), int(GeRaw))
	Neurons.Set(0.0, int(ni), int(di), int(GiRaw))
	Neurons.Set(0.0, int(ni), int(di), int(GModRaw))
	Neurons.Set(0.0, int(ni), int(di), int(GModSyn))
	Neurons.Set(0.0, int(ni), int(di), int(GMaintRaw))
	Neurons.Set(0.0, int(ni), int(di), int(CtxtGeRaw))
	Neurons.Set(NeuronAvgs.Value(int(ni), int(GeBase)), int(ni), int(di), int(GeSyn))
	Neurons.Set(NeuronAvgs.Value(int(ni), int(GiBase)), int(ni), int(di), int(GiSyn))
}

// GiFromSpikes gets the Spike, GeRaw and GeExt from neurons in the pools
// where Spike drives FBsRaw = raw feedback signal,
// GeRaw drives FFsRaw = aggregate feedforward excitatory spiking input.
// GeExt represents extra excitatory input from other sources.
// Then integrates new inhibitory conductances therefrom,
// at the layer and pool level.
// Called separately by Network.CycleImpl on all Layers
// Also updates all AvgMax values at the Cycle level.
func (ly *LayerParams) GiFromSpikes(ctx *Context, ni, di uint32) {
	pi := ly.PoolIndex(NeuronIxs.Value(int(ni), int(NrnSubPool)))
	spk := Neurons.Value(int(ni), int(di), int(Spike))
	geRaw := Neurons.Value(int(ni), int(di), int(GeRaw))
	geExt := Neurons.Value(int(ni), int(di), int(GeExt))
	PoolInhibRawIncrInt(pi, di, spk, geRaw, geExt)
	PoolAvgMaxUpdate(pi, di, ni)
	if PoolsInt.Value(int(pi), int(di), int(PoolIsLayer)) == 0 { // also update layer pool if I am a subpool
		lpi := ly.PoolIndex(0)
		PoolInhibRawIncrInt(lpi, di, spk, geRaw, geExt)
		PoolAvgMaxUpdate(lpi, di, ni)
	}
}

// LayerGi updates the layer-level Gi inhibition from spikes.
func (ly *LayerParams) LayerGi(ctx *Context, li, di uint32) {
	lpi := ly.PoolIndex(0)
	PoolAvgMaxCalc(lpi, di)
	PoolInhibIntToRaw(lpi, di)
	ly.LayPoolGiFromSpikes(ctx, lpi, di)
}

// BetweenGi computes inhibition Gi between layers.
func (ly *LayerParams) BetweenGi(ctx *Context, di uint32) {
	lpi := ly.PoolIndex(0)
	maxGi := Pools.Value(int(lpi), int(di), int(fsfffb.TotalGi))
	maxGi = ly.BetweenLayerGiMax(di, maxGi, ly.LayInhib.Index1)
	maxGi = ly.BetweenLayerGiMax(di, maxGi, ly.LayInhib.Index2)
	maxGi = ly.BetweenLayerGiMax(di, maxGi, ly.LayInhib.Index3)
	maxGi = ly.BetweenLayerGiMax(di, maxGi, ly.LayInhib.Index4)
	Pools.Set(maxGi, int(lpi), int(di), int(fsfffb.TotalGi)) // our inhib is max of us and everyone in the layer pool
}

// BetweenLayerGiMax returns max gi value for input maxGi vs
// the given layIndex layer
func (ly *LayerParams) BetweenLayerGiMax(di uint32, maxGi float32, layIndex int32) float32 {
	if layIndex < 0 {
		return maxGi
	}
	oly := GetLayers(uint32(layIndex))
	opi := oly.PoolIndex(0)
	ogi := Pools.Value(int(opi), int(di), int(fsfffb.TotalGi))
	if ogi > maxGi {
		return ogi
	}
	return maxGi
}

// LayPoolGiFromSpikes computes inhibition Gi from Spikes for layer-level pool.
func (ly *LayerParams) LayPoolGiFromSpikes(ctx *Context, lpi, di uint32) {
	PoolInhibSpikesFromRaw(lpi, di)
	PoolInhib(&ly.Inhib.Layer, lpi, di, LayerStates.Value(int(ly.Index), int(di), int(LayerGiMult)))
}

// SubPoolGiFromSpikes computes inhibition Gi from Spikes within a sub-pool
// pl is guaranteed not to be the overall layer pool
func (ly *LayerParams) SubPoolGiFromSpikes(ctx *Context, lpi, pi, di uint32, lyInhib bool, giMult float32) {
	PoolInhibSpikesFromRaw(pi, di)
	PoolInhib(&ly.Inhib.Pool, pi, di, giMult)
	if lyInhib {
		PoolInhibLayerMax(pi, di, Pools.Value(int(lpi), int(di), int(fsfffb.TotalGi))) // note: this requires lpl inhib to have been computed before!
	} else {
		PoolInhibPoolMax(pi, di, Pools.Value(int(pi), int(di), int(fsfffb.TotalGi))) // display only
		PoolInhibSaveOrig(lpi, di)                                                   // effective GiOrig
	}
}

////////  CycleNeuron methods

// CycleNeuron does one cycle (msec) of updating at the neuron level
// Called directly by Network, iterates over data.
func (ly *LayerParams) CycleNeuron(ctx *Context, ni, di uint32) {
	pi := ly.PoolIndex(NeuronIxs.Value(int(ni), int(NrnSubPool)))
	lpi := ly.PoolIndex(0)
	ly.GInteg(ctx, pi, ni, di)
	ly.SpikeFromG(ctx, lpi, ni, di)
}

func (ly *LayerParams) PulvinarDriver(ctx *Context, lni, di uint32, drvGe, nonDrivePct *float32) {
	dli := uint32(ly.Pulv.DriveLayIndex)
	dly := GetLayers(dli)
	dpi := dly.PoolIndex(0)
	drvMax := PoolAvgMax(AMCaP, AMCycle, Max, dpi, di)
	*nonDrivePct = ly.Pulv.NonDrivePct(drvMax) // how much non-driver to keep
	burst := Neurons.Value(int(dly.Indexes.NeurSt+lni), int(di), int(Burst))
	*drvGe = ly.Pulv.DriveGe(burst)
}

// GInteg integrates conductances G over time (Ge, NMDA, etc).
// calls SpecialGFromRawSyn, GiInteg
func (ly *LayerParams) GInteg(ctx *Context, pi, ni, di uint32) {
	drvGe := float32(0)
	nonDrivePct := float32(0)
	if ly.Type == PulvinarLayer {
		ly.PulvinarDriver(ctx, ni-ly.Indexes.NeurSt, di, &drvGe, &nonDrivePct)
		Neurons.Set(nonDrivePct, int(ni), int(di), int(Ext)) // use for regulating inhibition
	}
	saveVal := ly.SpecialPreGs(ctx, pi, ni, di, drvGe, nonDrivePct)

	ly.GFromRawSyn(ctx, ni, di)
	ly.GiInteg(ctx, pi, ni, di)
	ly.GNeuroMod(ctx, ni, di)

	ly.SpecialPostGs(ctx, ni, di, saveVal)
}

/////////  GInteg

// SpecialPreGs is used for special layer types to do things to the
// conductance values prior to doing the standard updates in GFromRawSyn
// drvAct is for Pulvinar layers, activation of driving neuron
func (ly *LayerParams) SpecialPreGs(ctx *Context, pi, ni, di uint32, drvGe float32, nonDrivePct float32) float32 {
	saveVal := float32(0) // sometimes we need to use a value computed here, for the post Gs step
	pil := pi - ly.PoolSt
	pnn := uint32(PoolNNeurons(pi))
	pni := NeuronIxs.Value(int(ni), int(NrnNeurIndex)) - uint32(PoolsInt.Value(int(pi), int(di), int(PoolNeurSt)))
	nrnCtxtGe := Neurons.Value(int(ni), int(di), int(CtxtGe))
	nrnGeRaw := Neurons.Value(int(ni), int(di), int(GeRaw))
	hasRew := GlobalScalars.Value(int(GvHasRew), int(di)) > 0
	switch ly.Type {
	case PTPredLayer, CTLayer:
		geCtxt := ly.CT.GeGain * nrnCtxtGe
		Neurons.SetAdd(geCtxt, int(ni), int(di), int(GeRaw))
		if ly.CT.DecayDt > 0 {
			Neurons.SetSub(ly.CT.DecayDt*nrnCtxtGe, int(ni), int(di), int(CtxtGe))
		}
		ctxExt := ly.Acts.Dt.GeSynFromRawSteady(geCtxt)
		Neurons.SetAdd(ctxExt, int(ni), int(di), int(GeSyn))
		saveVal = ctxExt // used In PostGs to set nrn.GeExt
	case PTMaintLayer:
		if ly.Acts.SMaint.On.IsTrue() {
			saveVal = ly.Acts.SMaint.Inhib * Neurons.Value(int(ni), int(di), int(GMaintRaw)) // used In PostGs to set nrn.GeExt
		}
	case PulvinarLayer:
		if ctx.PlusPhase.IsFalse() {
			break
		}
		// geSyn, goes into nrn.GeExt in PostGs, so inhibition gets it
		saveVal = nonDrivePct*Neurons.Value(int(ni), int(di), int(GeSyn)) + ly.Acts.Dt.GeSynFromRawSteady(drvGe)
		Neurons.Set(nonDrivePct*nrnGeRaw+drvGe, int(ni), int(di), int(GeRaw))
		Neurons.Set(saveVal, int(ni), int(di), int(GeSyn))
	case VSGatedLayer:
		dr := float32(0)
		if pil == 0 {
			dr = GlobalScalars.Value(int(GvVSMatrixJustGated), int(di))
		} else {
			dr = GlobalScalars.Value(int(GvVSMatrixHasGated), int(di))
		}
		dr = math32.Abs(dr)
		Neurons.Set(dr, int(ni), int(di), int(GeRaw))
		Neurons.Set(ly.Acts.Dt.GeSynFromRawSteady(dr), int(ni), int(di), int(GeSyn))

	case BLALayer:
		if ly.Learn.NeuroMod.IsBLAExt() {
			md := max(-GlobalScalars.Value(int(GvDA), int(di)), float32(0)) // ext is modulated by negative da
			geCtxt := md * ly.CT.GeGain * Neurons.Value(int(ni), int(di), int(CtxtGeOrig))
			Neurons.SetAdd(geCtxt, int(ni), int(di), int(GeRaw))
			ctxExt := ly.Acts.Dt.GeSynFromRawSteady(geCtxt)
			Neurons.SetAdd(ctxExt, int(ni), int(di), int(GeSyn))
			saveVal = ctxExt // used In PostGs to set nrn.GeExt
		}
	case LHbLayer:
		geRaw := float32(0)
		if ni == 0 {
			geRaw = 0.2 * math32.Abs(GlobalScalars.Value(int(GvLHbDip), int(di)))
		} else {
			geRaw = 0.2 * math32.Abs(GlobalScalars.Value(int(GvLHbBurst), int(di)))
		}
		Neurons.Set(geRaw, int(ni), int(di), int(GeRaw))
		Neurons.Set(ly.Acts.Dt.GeSynFromRawSteady(geRaw), int(ni), int(di), int(GeSyn))
	case DrivesLayer:
		dr := GlobalVectors.Value(int(GvDrives), int(pil-1), int(di))
		geRaw := dr
		if dr > 0 {
			geRaw = ly.Acts.PopCode.EncodeGe(pni, pnn, dr)
		}
		Neurons.Set(geRaw, int(ni), int(di), int(GeRaw))
		Neurons.Set(ly.Acts.Dt.GeSynFromRawSteady(geRaw), int(ni), int(di), int(GeSyn))
	case UrgencyLayer:
		ur := GlobalScalars.Value(int(GvUrgency), int(di))
		geRaw := ur
		if ur > 0 {
			geRaw = ly.Acts.PopCode.EncodeGe(pni, pnn, ur)
		}
		Neurons.Set(geRaw, int(ni), int(di), int(GeRaw))
		Neurons.Set(ly.Acts.Dt.GeSynFromRawSteady(geRaw), int(ni), int(di), int(GeSyn))
	case USLayer:
		us := RubiconUSStimValue(di, pil-1, ly.Learn.NeuroMod.Valence)
		geRaw := us
		if us > 0 {
			geRaw = ly.Acts.PopCode.EncodeGe(pni, pnn, us)
		}
		// D2Mod = final
		if ly.Learn.NeuroMod.DAMod == D1Mod || (ly.Learn.NeuroMod.DAMod == D2Mod && hasRew && ctx.PlusPhase.IsTrue()) {
			Neurons.Set(geRaw, int(ni), int(di), int(GeRaw))
			Neurons.Set(ly.Acts.Dt.GeSynFromRawSteady(geRaw), int(ni), int(di), int(GeSyn))
		}
	case PVLayer:
		if hasRew && ctx.PlusPhase.IsTrue() {
			pv := float32(0)
			if ly.Learn.NeuroMod.Valence == Positive {
				pv = GlobalScalars.Value(int(GvPVpos), int(di))
			} else {
				pv = GlobalScalars.Value(int(GvPVneg), int(di))
			}
			pc := ly.Acts.PopCode.EncodeGe(pni, ly.Indexes.NNeurons, pv)
			Neurons.Set(pc, int(ni), int(di), int(GeRaw))
			Neurons.Set(ly.Acts.Dt.GeSynFromRawSteady(pc), int(ni), int(di), int(GeSyn))
		}
	case LDTLayer:
		geRaw := 0.4 * GlobalScalars.Value(int(GvACh), int(di))
		Neurons.Set(geRaw, int(ni), int(di), int(GeRaw))
		Neurons.Set(ly.Acts.Dt.GeSynFromRawSteady(geRaw), int(ni), int(di), int(GeSyn))
	case VTALayer:
		geRaw := ly.RWDa.GeFromDA(GlobalScalars.Value(int(GvVtaDA), int(di)))
		Neurons.Set(geRaw, int(ni), int(di), int(GeRaw))
		Neurons.Set(ly.Acts.Dt.GeSynFromRawSteady(geRaw), int(ni), int(di), int(GeSyn))

	case RewLayer:
		NeuronSetFlag(NeuronHasExt, ni, di)
		SetNeuronExtPosNeg(ctx, ni, di, GlobalScalars.Value(int(GvRew), int(di))) // Rew must be set in Context!
	case RWDaLayer:
		geRaw := ly.RWDa.GeFromDA(GlobalScalars.Value(int(GvDA), int(di)))
		Neurons.Set(geRaw, int(ni), int(di), int(GeRaw))
		Neurons.Set(ly.Acts.Dt.GeSynFromRawSteady(geRaw), int(ni), int(di), int(GeSyn))
	case TDDaLayer:
		geRaw := ly.TDDa.GeFromDA(GlobalScalars.Value(int(GvDA), int(di)))
		Neurons.Set(geRaw, int(ni), int(di), int(GeRaw))
		Neurons.Set(ly.Acts.Dt.GeSynFromRawSteady(geRaw), int(ni), int(di), int(GeSyn))
	case TDIntegLayer:
		NeuronSetFlag(NeuronHasExt, ni, di)
		SetNeuronExtPosNeg(ctx, ni, di, GlobalScalars.Value(int(GvRewPred), int(di)))
	default:
	}
	return saveVal
}

// SpecialPostGs is used for special layer types to do things
// after the standard updates in GFromRawSyn.
// It is passed the saveVal from SpecialPreGs
func (ly *LayerParams) SpecialPostGs(ctx *Context, ni, di uint32, saveVal float32) {
	switch ly.Type {
	case PulvinarLayer, PTMaintLayer, CTLayer, BLALayer:
		Neurons.Set(saveVal, int(ni), int(di), int(GeExt))
	case PTPredLayer:
		Neurons.Set(saveVal, int(ni), int(di), int(GeExt))
		orig := Neurons.Value(int(ni), int(di), int(CtxtGeOrig))
		if orig < 0.05 {
			Neurons.Set(0.0, int(ni), int(di), int(Ge))
		}
	default:
	}
}

// GFromRawSyn computes overall Ge and GiSyn conductances for neuron
// from GeRaw and GeSyn values, including NMDA, VGCC, AMPA, and GABA-A channels.
// drvAct is for Pulvinar layers, activation of driving neuron
func (ly *LayerParams) GFromRawSyn(ctx *Context, ni, di uint32) {
	extraRaw := float32(0)
	extraSyn := float32(0)
	nrnGModRaw := Neurons.Value(int(ni), int(di), int(GModRaw))
	nrnGModSyn := Neurons.Value(int(ni), int(di), int(GModSyn))
	ach := GlobalScalars.Value(int(GvACh), int(di))
	switch ly.Type {
	case PTMaintLayer:
		md := ly.Acts.Dend.ModGain * nrnGModSyn
		if ly.Acts.Dend.ModACh.IsTrue() {
			md *= ach
		}
		md += ly.Acts.Dend.ModBase
		// key: excluding GModMaint here, so active maintenance can persist
		Neurons.SetMul(md, int(ni), int(di), int(GeRaw))
		Neurons.SetMul(md, int(ni), int(di), int(GeSyn))
		extraRaw = ly.Acts.Dend.ModGain * nrnGModRaw
		if ly.Acts.Dend.ModACh.IsTrue() {
			extraRaw *= ach
		}
		extraSyn = md
	case BLALayer:
		// modulatory pathway from PTp is only used so we can modulate by da
		md := max(-GlobalScalars.Value(int(GvDA), int(di)), 0.0) // ext is modulated by negative da
		extraRaw = md * nrnGModRaw * ly.Acts.Dend.ModGain
		extraSyn = md * nrnGModSyn * ly.Acts.Dend.ModGain
	default:
		if ly.Acts.Dend.HasMod.IsTrue() {
			md := ly.Acts.Dend.ModBase + ly.Acts.Dend.ModGain*nrnGModSyn
			if md > 1 {
				md = 1
			}
			Neurons.SetMul(md, int(ni), int(di), int(GeRaw))
			Neurons.SetMul(md, int(ni), int(di), int(GeSyn))
		}
	}
	geRaw := Neurons.Value(int(ni), int(di), int(GeRaw))
	geSyn := Neurons.Value(int(ni), int(di), int(GeSyn))
	ly.Acts.NMDAFromRaw(ctx, ni, di, geRaw+extraRaw)
	ly.Acts.MaintNMDAFromRaw(ctx, ni, di) // uses GMaintRaw directly
	ly.Learn.LrnNMDAFromRaw(ctx, ni, di, geRaw)
	ly.Acts.GvgccFromVm(ctx, ni, di)
	ege := Neurons.Value(int(ni), int(di), int(Gnmda)) + Neurons.Value(int(ni), int(di), int(GnmdaMaint)) + Neurons.Value(int(ni), int(di), int(Gvgcc)) + extraSyn
	ly.Acts.GeFromSyn(ctx, ni, di, geSyn, ege) // sets nrn.GeExt too
	ly.Acts.GkFromVm(ctx, ni, di)
	ly.Acts.GSkCaFromCa(ctx, ni, di)
	Neurons.Set(ly.Acts.GiFromSyn(ctx, ni, di, Neurons.Value(int(ni), int(di), int(GiSyn))), int(ni), int(di), int(GiSyn))
}

// GiInteg adds Gi values from all sources including SubPool computed inhib
// and updates GABAB as well
func (ly *LayerParams) GiInteg(ctx *Context, pi, ni, di uint32) {
	giMult := LayerStates.Value(int(ly.Index), int(di), int(LayerGiMult))
	gi := giMult*Pools.Value(int(pi), int(di), int(fsfffb.TotalGi)) + Neurons.Value(int(ni), int(di), int(GiSyn)) + Neurons.Value(int(ni), int(di), int(GiNoise)) + ly.Learn.NeuroMod.GiFromACh(GlobalScalars.Value(int(GvACh), int(di)))
	ssgi := Pools.Value(int(pi), int(di), int(fsfffb.SSGi))
	Neurons.Set(gi, int(ni), int(di), int(Gi))
	Neurons.Set(0.0, int(ni), int(di), int(SSGiDend))
	if ctx.PlusPhase.IsTrue() && ly.Type == PulvinarLayer {
		ext := Neurons.Value(int(ni), int(di), int(Ext)) // nonDrivePct
		Neurons.Set(ext*ly.Acts.Dend.SSGi*ssgi, int(ni), int(di), int(SSGiDend))
	} else {
		if !(ly.Acts.Clamp.IsInput.IsTrue() || ly.Acts.Clamp.IsTarget.IsTrue()) {
			Neurons.Set(ly.Acts.Dend.SSGi*ssgi, int(ni), int(di), int(SSGiDend))
		}
	}
	vm := Neurons.Value(int(ni), int(di), int(VmDend))
	nrnGABAB := Neurons.Value(int(ni), int(di), int(GABAB))
	nrnGABABx := Neurons.Value(int(ni), int(di), int(GABABx))
	ly.Acts.GabaB.GABAB(gi, &nrnGABAB, &nrnGABABx)
	Neurons.Set(nrnGABAB, int(ni), int(di), int(GABAB))
	Neurons.Set(nrnGABABx, int(ni), int(di), int(GABABx))
	nrnGgabaB := ly.Acts.GabaB.GgabaB(nrnGABAB, vm)
	Neurons.Set(nrnGgabaB, int(ni), int(di), int(GgabaB))
	// Gk was already init
	Neurons.SetAdd(nrnGgabaB, int(ni), int(di), int(Gk))
}

// GNeuroMod does neuromodulation of conductances
func (ly *LayerParams) GNeuroMod(ctx *Context, ni, di uint32) {
	ggain := ly.Learn.NeuroMod.GGain(GlobalScalars.Value(int(GvDA), int(di)) + GlobalScalars.Value(int(GvDAtonic), int(di)))
	Neurons.SetMul(ggain, int(ni), int(di), int(Ge))
	Neurons.SetMul(ggain, int(ni), int(di), int(Gi))
}

////////  SendSpike

// SpikeFromG computes Vm from Ge, Gi, Gl conductances and then Spike from that
func (ly *LayerParams) SpikeFromG(ctx *Context, lpi, ni, di uint32) {
	ly.Acts.VmFromG(ctx, ni, di)
	ly.Acts.SpikeFromVm(ctx, ni, di)
	ly.Learn.CaFromSpike(ctx, ni, di)
	lmax := PoolAvgMax(AMGeInt, AMCycle, Max, lpi, di)
	if lmax > 0 {
		Neurons.Set(Neurons.Value(int(ni), int(di), int(GeInt))/lmax, int(ni), int(di), int(GeIntNorm))
	} else {
		Neurons.Set(Neurons.Value(int(ni), int(di), int(GeInt)), int(ni), int(di), int(GeIntNorm))
	}
	if ctx.Cycle >= ly.Acts.Dt.MaxCycStart {
		Neurons.SetAdd(ly.Learn.CaSpk.Dt.PDt*(Neurons.Value(int(ni), int(di), int(CaM))-Neurons.Value(int(ni), int(di), int(SpkMaxCa))), int(ni), int(di), int(SpkMaxCa))
		spkmax := Neurons.Value(int(ni), int(di), int(SpkMaxCa))
		if spkmax > Neurons.Value(int(ni), int(di), int(SpkMax)) {
			Neurons.Set(spkmax, int(ni), int(di), int(SpkMax))
		}
	}
	spk := Neurons.Value(int(ni), int(di), int(Spike))
	if spk > 0 {
		spksper := ctx.ThetaCycles / 8
		bin := min(ctx.Cycle/spksper, 7)
		Neurons.SetAdd(spk, int(ni), int(di), int(SpkBin0+NeuronVars(bin)))
	}
}

// SendSpike sends spike to receivers for all neurons that spiked
// last step in Cycle, integrated the next time around.
// Called directly by Network, iterates over data.
func (ly *LayerParams) SendSpike(ctx *Context, ni, di uint32) {
	pi := ly.PoolIndex(NeuronIxs.Value(int(ni), int(NrnSubPool)))
	lpi := ly.PoolIndex(0)
	lni := ni - ly.Indexes.NeurSt
	ly.PostSpike(ctx, lpi, pi, ni, di)

	for pti := uint32(0); pti < ly.Indexes.SendN; pti++ {
		pt := GetPaths(ly.Indexes.SendSt + pti)
		pt.SendSpike(ctx, ni, di, lni)
	}
}

// PostSpikeSpecial does updates at neuron level after spiking has been computed.
// This is where special layer types add extra code.
func (ly *LayerParams) PostSpikeSpecial(ctx *Context, lpi, pi, ni, di uint32) {
	Neurons.Set(Neurons.Value(int(ni), int(di), int(CaP)), int(ni), int(di), int(Burst))
	li := ly.Index
	pil := pi - ly.PoolSt // 0-n pool index
	pnn := uint32(PoolNNeurons(pi))
	pni := NeuronIxs.Value(int(ni), int(NrnNeurIndex)) - uint32(PoolsInt.Value(int(pi), int(di), int(PoolNeurSt)))
	hasRew := GlobalScalars.Value(int(GvHasRew), int(di)) > 0
	switch ly.Type {
	case SuperLayer:
		if ctx.PlusPhase.IsTrue() {
			actMax := PoolAvgMax(AMCaP, AMCycle, Max, lpi, di)
			actAvg := PoolAvgMax(AMCaP, AMCycle, Avg, lpi, di)
			thr := ly.Bursts.ThrFromAvgMax(actAvg, actMax)
			if Neurons.Value(int(ni), int(di), int(CaP)) < thr {
				Neurons.Set(0.0, int(ni), int(di), int(Burst))
			}
		}
	case PTPredLayer, CTLayer:
		if ctx.Cycle == ctx.ThetaCycles-1 {
			if ly.CT.DecayTau == 0 {
				Neurons.Set(Neurons.Value(int(ni), int(di), int(CtxtGeRaw)), int(ni), int(di), int(CtxtGe))
			} else {
				Neurons.SetAdd(Neurons.Value(int(ni), int(di), int(CtxtGeRaw)), int(ni), int(di), int(CtxtGe))
			}
			Neurons.Set(Neurons.Value(int(ni), int(di), int(CtxtGe)), int(ni), int(di), int(CtxtGeOrig))
		}
	case VSGatedLayer:
		dr := float32(0)
		if pil == 0 {
			dr = GlobalScalars.Value(int(GvVSMatrixJustGated), int(di))
		} else {
			dr = GlobalScalars.Value(int(GvVSMatrixHasGated), int(di))
		}
		Neurons.Set(dr, int(ni), int(di), int(Act))

	case BLALayer:
		if ctx.Cycle == ctx.ThetaCycles-1 {
			if hasRew {
				Neurons.Set(0.0, int(ni), int(di), int(CtxtGe))
				Neurons.Set(0.0, int(ni), int(di), int(CtxtGeOrig))
			} else if GlobalScalars.Value(int(GvACh), int(di)) > 0.1 {
				Neurons.Set(Neurons.Value(int(ni), int(di), int(CtxtGeRaw)), int(ni), int(di), int(CtxtGe))
				Neurons.Set(Neurons.Value(int(ni), int(di), int(CtxtGe)), int(ni), int(di), int(CtxtGeOrig))
			}
		}
	case LHbLayer:
		if pni == 0 {
			Neurons.Set(GlobalScalars.Value(int(GvLHbDip), int(di)), int(ni), int(di), int(Act))
		} else {
			Neurons.Set(GlobalScalars.Value(int(GvLHbBurst), int(di)), int(ni), int(di), int(Act))
		}
		Neurons.Set(ly.Acts.Dt.GeSynFromRawSteady(Neurons.Value(int(ni), int(di), int(GeRaw))), int(ni), int(di), int(GeSyn))
	case DrivesLayer:
		dr := GlobalVectors.Value(int(GvDrives), int(pil-1), int(di))
		act := dr
		if dr > 0 {
			act = ly.Acts.PopCode.EncodeValue(pni, pnn, dr)
		}
		Neurons.Set(act, int(ni), int(di), int(Act))
	case UrgencyLayer:
		ur := GlobalScalars.Value(int(GvUrgency), int(di))
		act := ur
		if ur > 0 {
			act = ly.Acts.PopCode.EncodeValue(pni, pnn, ur)
		}
		Neurons.Set(act, int(ni), int(di), int(Act))
	case USLayer:
		us := RubiconUSStimValue(di, pil-1, ly.Learn.NeuroMod.Valence)
		act := us
		if us > 0 {
			act = ly.Acts.PopCode.EncodeValue(pni, pnn, us)
		}
		// D2Mod = final
		if ly.Learn.NeuroMod.DAMod == D1Mod || (ly.Learn.NeuroMod.DAMod == D2Mod && hasRew && ctx.PlusPhase.IsTrue()) {
			Neurons.Set(act, int(ni), int(di), int(Act))
		}
	case PVLayer:
		if hasRew {
			pv := float32(0)
			if ly.Learn.NeuroMod.Valence == Positive {
				pv = GlobalScalars.Value(int(GvPVpos), int(di))
			} else {
				pv = GlobalScalars.Value(int(GvPVneg), int(di))
			}
			act := ly.Acts.PopCode.EncodeValue(pni, ly.Indexes.NNeurons, pv)
			Neurons.Set(act, int(ni), int(di), int(Act))
		}
	case LDTLayer:
		// I set this in CyclePost
		Neurons.Set(GlobalScalars.Value(int(GvAChRaw), int(di)), int(ni), int(di), int(Act))
	case VTALayer:
		// I set this in CyclePost
		Neurons.Set(GlobalScalars.Value(int(GvVtaDA), int(di)), int(ni), int(di), int(Act))

	case RewLayer:
		Neurons.Set(GlobalScalars.Value(int(GvRew), int(di)), int(ni), int(di), int(Act))
	case RWPredLayer:
		// clipped linear
		Neurons.Set(ly.RWPred.PredRange.ClipValue(Neurons.Value(int(ni), int(di), int(Ge))), int(ni), int(di), int(Act))
		if pni == 0 {
			LayerStates.Set(Neurons.Value(int(ni), int(di), int(ActInt)), int(li), int(di), int(LayerRewPredPos))
		} else {
			LayerStates.Set(Neurons.Value(int(ni), int(di), int(ActInt)), int(li), int(di), int(LayerRewPredNeg))
		}
	case RWDaLayer:
		// I set this in CyclePost
		Neurons.Set(GlobalScalars.Value(int(GvDA), int(di)), int(ni), int(di), int(Act))
	case TDPredLayer:
		// linear
		Neurons.Set(Neurons.Value(int(ni), int(di), int(Ge)), int(ni), int(di), int(Act))
		if pni == 0 {
			LayerStates.Set(Neurons.Value(int(ni), int(di), int(ActInt)), int(li), int(di), int(LayerRewPredPos))
		} else {
			LayerStates.Set(Neurons.Value(int(ni), int(di), int(ActInt)), int(li), int(di), int(LayerRewPredNeg))
		}
	case TDIntegLayer:
		Neurons.Set(GlobalScalars.Value(int(GvRewPred), int(di)), int(ni), int(di), int(Act))
	case TDDaLayer:
		// I set this in CyclePost
		Neurons.Set(GlobalScalars.Value(int(GvDA), int(di)), int(ni), int(di), int(Act))
	default:
	}
}

// PostSpike does updates at neuron level after spiking has been computed.
// It calls PostSpikeSpecial.  It also updates the CaPCyc stats.
func (ly *LayerParams) PostSpike(ctx *Context, lpi, pi, ni, di uint32) {
	ly.PostSpikeSpecial(ctx, lpi, pi, ni, di)
	intdt := ly.Acts.Dt.IntDt
	Neurons.SetAdd(intdt*(Neurons.Value(int(ni), int(di), int(Ge))-Neurons.Value(int(ni), int(di), int(GeInt))), int(ni), int(di), int(GeInt))
	Neurons.SetAdd(intdt*(Neurons.Value(int(ni), int(di), int(GiSyn))-Neurons.Value(int(ni), int(di), int(GiInt))), int(ni), int(di), int(GiInt))
	// act int is reset at start of the plus phase -- needs faster integration:
	if ctx.PlusPhase.IsTrue() {
		intdt *= 3.0
	}
	// using reg act here now
	Neurons.SetAdd(intdt*(Neurons.Value(int(ni), int(di), int(Act))-Neurons.Value(int(ni), int(di), int(ActInt))), int(ni), int(di), int(ActInt))
}

// CyclePost is called after the standard Cycle update, as a separate
// network layer loop.
// This is reserved for any kind of special ad-hoc types that
// need to do something special after Spiking is finally computed and Sent.
// Typically used for updating global values in the Context state,
// such as updating a neuromodulatory signal such as dopamine.
// Any updates here must also be done in gpu_wgsl/gpu_cyclepost.wgsl
func (ly *LayerParams) CyclePost(ctx *Context, di uint32) {
	lpi := ly.PoolIndex(0)
	ly.CyclePostLayer(ctx, lpi, di)
	switch ly.Type {
	case MatrixLayer, BGThalLayer:
		ly.GatedFromSpkMax(ctx, di)
	case CeMLayer:
		ly.CyclePostCeMLayer(ctx, lpi, di)
	case VSPatchLayer:
		for spi := uint32(1); spi < ly.Indexes.NPools; spi++ {
			pi := ly.PoolIndex(spi)
			ly.CyclePostVSPatchLayer(ctx, pi, di, int32(spi))
		}
	case LDTLayer:
		srcLay1Act := ly.LDTSrcLayAct(ly.LDT.SrcLay1Index, di)
		srcLay2Act := ly.LDTSrcLayAct(ly.LDT.SrcLay2Index, di)
		srcLay3Act := ly.LDTSrcLayAct(ly.LDT.SrcLay3Index, di)
		srcLay4Act := ly.LDTSrcLayAct(ly.LDT.SrcLay4Index, di)
		ly.CyclePostLDTLayer(ctx, di, srcLay1Act, srcLay2Act, srcLay3Act, srcLay4Act)
	case VTALayer:
		ly.CyclePostVTALayer(ctx, di)
	case RWDaLayer:
		ly.CyclePostRWDaLayer(ctx, di)
	case TDPredLayer:
		ly.CyclePostTDPredLayer(ctx, di)
	case TDIntegLayer:
		ly.CyclePostTDIntegLayer(ctx, di)
	case TDDaLayer:
		ly.CyclePostTDDaLayer(ctx, di)
	default:
	}
}

////////  Special CyclePost methods for different layer types

// CyclePostLayer is called for all layer types
func (ly *LayerParams) CyclePostLayer(ctx *Context, lpi, di uint32) {
	casp := PoolAvgMax(AMCaP, AMCycle, Max, lpi, di)
	if ctx.Cycle >= ly.Acts.Dt.MaxCycStart && casp > 0.5 { // todo: param
		if LayerStates.Value(int(ly.Index), int(di), int(LayerRT)) <= 0 {
			LayerStates.Set(float32(ctx.Cycle), int(ly.Index), int(di), int(LayerRT))
		}
	}
}

// LDTSrcLayAct returns the overall activity level for given source layer
// for purposes of computing ACh salience value.
// Typically the input is a superior colliculus (SC) layer that rapidly
// accommodates after the onset of a stimulus.
// using lpl.AvgMax.CaP.Cycle.Max for layer activity measure.
func (ly *LayerParams) LDTSrcLayAct(layIndex int32, di uint32) float32 {
	if layIndex < 0 {
		return 0
	}
	oly := GetLayers(uint32(layIndex))
	opi := oly.PoolIndex(0)
	return PoolAvgMax(AMCaP, AMCycle, Avg, opi, di)
}

func (ly *LayerParams) CyclePostLDTLayer(ctx *Context, di uint32, srcLay1Act, srcLay2Act, srcLay3Act, srcLay4Act float32) {
	ach := ly.LDT.ACh(ctx, di, srcLay1Act, srcLay2Act, srcLay3Act, srcLay4Act)

	GlobalScalars.Set(ach, int(GvAChRaw), int(di))
	if ach > GlobalScalars.Value(int(GvACh), int(di)) { // instant up
		GlobalScalars.Set(ach, int(GvACh), int(di))
	} else {
		GlobalScalars.SetAdd(ly.Acts.Dt.IntDt*(ach-GlobalScalars.Value(int(GvACh), int(di))), int(GvACh), int(di))
	}
}

func (ly *LayerParams) CyclePostRWDaLayer(ctx *Context, di uint32) {
	pli := uint32(ly.RWDa.RWPredLayIndex)
	pred := LayerStates.Value(int(pli), int(di), int(LayerRewPredPos)) - LayerStates.Value(int(pli), int(di), int(LayerRewPredNeg))
	GlobalScalars.Set(pred, int(GvRewPred), int(di)) // record
	da := float32(0)
	if GlobalScalars.Value(int(GvHasRew), int(di)) > 0 {
		da = GlobalScalars.Value(int(GvRew), int(di)) - pred
	}
	GlobalScalars.Set(da, int(GvDA), int(di)) // updates global value that will be copied to layers next cycle.
}

func (ly *LayerParams) CyclePostTDPredLayer(ctx *Context, di uint32) {
	if ctx.PlusPhase.IsFalse() {
		return
	}
	pred := LayerStates.Value(int(ly.Index), int(di), int(LayerRewPredPos)) - LayerStates.Value(int(ly.Index), int(di), int(LayerRewPredNeg))
	GlobalScalars.Set(pred, int(GvPrevPred), int(di))
}

func (ly *LayerParams) CyclePostTDIntegLayer(ctx *Context, di uint32) {
	rew := float32(0)
	if GlobalScalars.Value(int(GvHasRew), int(di)) > 0 {
		rew = GlobalScalars.Value(int(GvRew), int(di))
	}
	rpval := float32(0)
	if ctx.PlusPhase.IsTrue() {
		pli := uint32(ly.TDInteg.TDPredLayIndex)
		pred := LayerStates.Value(int(pli), int(di), int(LayerRewPredPos)) - LayerStates.Value(int(pli), int(di), int(LayerRewPredNeg))
		rpval = rew + ly.TDInteg.Discount*ly.TDInteg.PredGain*pred
		LayerStates.Set(rpval, int(ly.Index), int(di), int(LayerRewPredPos)) // our plus phase = new integrated value
	} else {
		rpval = ly.TDInteg.PredGain * GlobalScalars.Value(int(GvPrevPred), int(di))
		LayerStates.Set(rpval, int(ly.Index), int(di), int(LayerRewPredNeg)) // our minus phase = prior integrated value
	}
	GlobalScalars.Set(rpval, int(GvRewPred), int(di)) // global value will be copied to layers next cycle
}

func (ly *LayerParams) CyclePostTDDaLayer(ctx *Context, di uint32) {
	ili := uint32(ly.TDDa.TDIntegLayIndex)
	da := LayerStates.Value(int(ili), int(di), int(LayerRewPredPos)) - LayerStates.Value(int(ili), int(di), int(LayerRewPredNeg))
	if ctx.PlusPhase.IsFalse() {
		da = 0
	}
	GlobalScalars.Set(da, int(GvDA), int(di)) // updates global value that will be copied to layers next cycle.
}

func (ly *LayerParams) CyclePostCeMLayer(ctx *Context, lpi, di uint32) {
	casd := PoolAvgMax(AMCaD, AMCycle, Max, lpi, di)
	if ly.Learn.NeuroMod.Valence == Positive {
		GlobalScalars.Set(casd, int(GvCeMpos), int(di))
	} else {
		GlobalScalars.Set(casd, int(GvCeMneg), int(di))
	}
}

func (ly *LayerParams) CyclePostVTALayer(ctx *Context, di uint32) {
	ly.VTA.VTADA(ctx, di, GlobalScalars.Value(int(GvACh), int(di)), (GlobalScalars.Value(int(GvHasRew), int(di)) > 0))
}

// note: needs to iterate over sub-pools in layer!
func (ly *LayerParams) CyclePostVSPatchLayer(ctx *Context, pi, di uint32, spi int32) {
	casd := PoolAvgMax(AMCaD, AMCycle, Avg, pi, di)
	if ly.Learn.NeuroMod.DAMod == D1Mod {
		GlobalVectors.Set(casd, int(GvVSPatchD1), int(uint32(pi-1)), int(di))
	} else {
		GlobalVectors.Set(casd, int(GvVSPatchD2), int(uint32(pi-1)), int(di))
	}
}

////////  Phase timescale

// DecayStateNeuronsAll decays neural activation state by given proportion
// (default decay values are ly.Params.Acts.Decay.Act, Glong, AHP)
// for all data parallel indexes. Does not decay pool or layer state.
// This is used for minus phase of Pulvinar layers to clear state in prep
// for driver plus phase.
func (ly *LayerParams) DecayStateNeuronsAll(ctx *Context, decay, glong, ahp float32) {
	nn := ly.Indexes.NNeurons
	for lni := uint32(0); lni < nn; lni++ {
		ni := ly.Indexes.NeurSt + lni
		if NeuronIsOff(ni) {
			continue
		}
		for di := uint32(0); di < ctx.NData; di++ {
			ly.Acts.DecayState(ctx, ni, di, decay, glong, ahp)
		}
	}
}

// NewStateLayer does NewState at the layer level, called
func (ly *LayerParams) NewStateLayer(ctx *Context) {
	actMinusAvg := float32(0)
	actPlusAvg := float32(0)
	np := uint32(ly.Indexes.NPools)

	for di := uint32(0); di < ctx.NData; di++ {
		lpi := ly.PoolIndex(0)

		actMinusAvg += PoolAvgMax(AMAct, AMMinus, Avg, lpi, di)
		actPlusAvg += PoolAvgMax(AMAct, AMPlus, Avg, lpi, di)

		ly.Acts.Clamp.IsInput.SetBool(ly.IsInput())
		ly.Acts.Clamp.IsTarget.SetBool(ly.IsTarget())
		LayerStates.Set(-1.0, int(ly.Index), int(di), int(LayerRT))

		for spi := uint32(0); spi < np; spi++ {
			pi := ly.PoolIndex(spi)
			ly.NewStatePool(ctx, pi, di) // also calls DecayState on pool
		}
	}

	// note: long-running averages must be based on aggregate data, drive adaptation
	// of Gi layer inhibition.
	davg := 1 / float32(ctx.NData)
	actMinusAvg *= davg
	actPlusAvg *= davg
	for di := uint32(0); di < ctx.NData; di++ {
		ly.NewStateLayerActAvg(ctx, di, actMinusAvg, actPlusAvg)
	}
}

// NewStateLayerActAvg updates ActAvg.ActMAvg and ActPAvg based on current values
// that have been averaged across NData already.
func (ly *LayerParams) NewStateLayerActAvg(ctx *Context, di uint32, actMinusAvg, actPlusAvg float32) {
	mavg := LayerStates.Value(int(ly.Index), int(di), int(LayerActMAvg))
	pavg := LayerStates.Value(int(ly.Index), int(di), int(LayerActPAvg))
	ly.Inhib.ActAvg.AvgFromAct(&mavg, actMinusAvg, ly.Acts.Dt.LongAvgDt)
	ly.Inhib.ActAvg.AvgFromAct(&pavg, actPlusAvg, ly.Acts.Dt.LongAvgDt)
	LayerStates.Set(mavg, int(ly.Index), int(di), int(LayerActMAvg))
	LayerStates.Set(pavg, int(ly.Index), int(di), int(LayerActPAvg))
}

func (ly *LayerParams) NewStatePool(ctx *Context, pi, di uint32) {
	PoolsInt.Set(0, int(pi), int(di), int(Clamped))
	if ly.Acts.Clamp.Add.IsFalse() && ly.Acts.Clamp.IsInput.IsTrue() {
		PoolsInt.Set(1, int(pi), int(di), int(Clamped))
	}
	PoolInhibDecay(pi, di, ly.Acts.Decay.Act)
	PoolsInt.Set(0, int(pi), int(di), int(PoolGated))
}

// NewStateNeuron handles all initialization at start of new input pattern.
// Should already have presented the external input to the network at this point.
func (ly *LayerParams) NewStateNeuron(ctx *Context, ni, di uint32) {
	Neurons.Set(Neurons.Value(int(ni), int(di), int(Burst)), int(ni), int(di), int(BurstPrv))
	Neurons.Set(Neurons.Value(int(ni), int(di), int(CaD)), int(ni), int(di), int(SpkPrv))
	Neurons.Set(0.0, int(ni), int(di), int(SpkMax))
	Neurons.Set(0.0, int(ni), int(di), int(SpkMaxCa))
	ly.Acts.DecayState(ctx, ni, di, ly.Acts.Decay.Act, ly.Acts.Decay.Glong, ly.Acts.Decay.AHP)
	// Note: synapse-level Ca decay happens in DWt
	ly.Acts.KNaNewState(ctx, ni, di)
	for i := range 8 {
		Neurons.Set(0.0, int(ni), int(di), int(SpkBin0+NeuronVars(i)))
	}
}

// Beta1Neuron does neuron level Beta1 updating.
func (ly *LayerParams) Beta1Neuron(ctx *Context, ni, di uint32) {
	Neurons.Set(Neurons.Value(int(ni), int(di), int(CaP)), int(ni), int(di), int(Beta1))
}

// Beta2Neuron does neuron level Beta2 updating.
func (ly *LayerParams) Beta2Neuron(ctx *Context, ni, di uint32) {
	Neurons.Set(Neurons.Value(int(ni), int(di), int(CaP)), int(ni), int(di), int(Beta2))
}

////////  Minus Phase

func (ly *LayerParams) MinusPhasePool(ctx *Context, pi uint32) {
	for di := uint32(0); di < ctx.NData; di++ {
		PoolCycleToMinus(pi, di)
		if ly.Acts.Clamp.Add.IsFalse() && ly.Acts.Clamp.IsTarget.IsTrue() {
			PoolsInt.Set(1, int(pi), int(di), int(Clamped))
		}
	}
	if PoolsInt.Value(int(pi), int(0), int(PoolIsLayer)) == 0 {
		return
	}
	geIntMinusMax := float32(0)
	giIntMinusMax := float32(0)
	for di := uint32(0); di < ctx.NData; di++ {
		geIntMinusMax = math32.Max(geIntMinusMax, PoolAvgMax(AMGeInt, AMMinus, Max, pi, di))
		giIntMinusMax = math32.Max(giIntMinusMax, PoolAvgMax(AMGiInt, AMMinus, Max, pi, di))
	}
	for di := uint32(0); di < ctx.NData; di++ {
		ly.AvgGeM(ctx, di, geIntMinusMax, giIntMinusMax)
	}
}

// AvgGeM computes the average and max GeInt, GiInt in minus phase
// (AvgMaxGeM, AvgMaxGiM) stats, updated in MinusPhase,
// using values that already max across NData.
func (ly *LayerParams) AvgGeM(ctx *Context, di uint32, geIntMinusMax, giIntMinusMax float32) {
	gem := LayerStates.Value(int(ly.Index), int(di), int(LayerAvgMaxGeM))
	gim := LayerStates.Value(int(ly.Index), int(di), int(LayerAvgMaxGiM))
	gem += ly.Acts.Dt.LongAvgDt * (geIntMinusMax - gem)
	gim += ly.Acts.Dt.LongAvgDt * (giIntMinusMax - gim)
	LayerStates.Set(gem, int(ly.Index), int(di), int(LayerAvgMaxGeM))
	LayerStates.Set(gim, int(ly.Index), int(di), int(LayerAvgMaxGiM))
}

// MinusPhaseNeuron does neuron level minus-phase updating
func (ly *LayerParams) MinusPhaseNeuron(ctx *Context, ni, di uint32) {
	Neurons.Set(Neurons.Value(int(ni), int(di), int(ActInt)), int(ni), int(di), int(ActM))
}

// MinusPhasePost does special algorithm processing at end of minus
func (ly *LayerParams) MinusPhasePost(ctx *Context) {
	switch ly.Type {
	case MatrixLayer:
		ly.MatrixGated(ctx) // need gated state for decisions about action processing, so do in minus too
	case PulvinarLayer:
		ly.DecayStateNeuronsAll(ctx, 1, 1, 0)
	default:
	}
}

// PlusPhaseStartNeuron does neuron level plus-phase start:
// applies Target inputs as External inputs.
func (ly *LayerParams) PlusPhaseStartNeuron(ctx *Context, ni, di uint32) {
	if NeuronHasFlag(NeuronHasTarg, ni, di) { // will be clamped in plus phase
		Neurons.Set(Neurons.Value(int(ni), int(di), int(Target)), int(ni), int(di), int(Ext))
		NeuronSetFlag(NeuronHasExt, ni, di)
		// get fresh update on plus phase output acts
		Neurons.Set(-1.0, int(ni), int(di), int(ISI))
		Neurons.Set(-1.0, int(ni), int(di), int(ISIAvg))
		// reset for plus phase
		Neurons.Set(ly.Acts.Init.Act, int(ni), int(di), int(ActInt))
	}
}

func (ly *LayerParams) PlusPhasePool(ctx *Context, pi, di uint32) {
	PoolCycleToPlus(pi, di)
}

// PlusPhaseNeuron does neuron level plus-phase updating
func (ly *LayerParams) PlusPhaseNeuron(ctx *Context, ni, di uint32) {
	pi := ly.PoolIndex(NeuronIxs.Value(int(ni), int(NrnSubPool)))
	lpi := ly.PoolIndex(0)
	Neurons.Set(Neurons.Value(int(ni), int(di), int(ActInt)), int(ni), int(di), int(ActP))
	nrnCaP := Neurons.Value(int(ni), int(di), int(CaP))
	nrnCaD := Neurons.Value(int(ni), int(di), int(CaD))
	da := GlobalScalars.Value(int(GvDA), int(di))
	ach := GlobalScalars.Value(int(GvACh), int(di))
	mlr := ly.Learn.RLRate.RLRateSigDeriv(nrnCaD, PoolAvgMax(AMCaD, AMCycle, Max, lpi, di))
	modlr := ly.Learn.NeuroMod.LRMod(da, ach)
	dlr := float32(1)
	hasRew := (GlobalScalars.Value(int(GvHasRew), int(di))) > 0

	switch ly.Type {
	case BLALayer:
		dlr = ly.Learn.RLRate.RLRateDiff(nrnCaP, Neurons.Value(int(ni), int(di), int(SpkPrv)))      // delta on previous trial
		if !ly.Learn.NeuroMod.IsBLAExt() && PoolsInt.Value(int(pi), int(0), int(PoolNeurSt)) == 0 { // first pool
			dlr = 0 // first pool is novelty / curiosity -- no learn
		}
	case VSPatchLayer:
		da = GlobalScalars.Value(int(GvVSPatchPosRPE), int(di)) // our own personal
		modlr = ly.Learn.NeuroMod.LRMod(da, ach)
		mlr = ly.Learn.RLRate.RLRateSigDeriv(Neurons.Value(int(ni), int(di), int(SpkPrv)), 1) // note: don't have proper max here
	case MatrixLayer:
		if hasRew { // reward time
			mlr = 1 // don't use dig deriv
		} else {
			modlr = 1 // don't use mod
		}
	default:
		dlr = ly.Learn.RLRate.RLRateDiff(nrnCaP, nrnCaD)
	}
	Neurons.Set(mlr*dlr*modlr, int(ni), int(di), int(RLRate))
	var tau float32
	sahpN := Neurons.Value(int(ni), int(di), int(SahpN))
	nrnSaphCa := Neurons.Value(int(ni), int(di), int(SahpCa))
	ly.Acts.Sahp.NinfTauFromCa(nrnSaphCa, &sahpN, &tau)
	nrnSaphCa = ly.Acts.Sahp.CaInt(nrnSaphCa, nrnCaD)
	Neurons.Set(sahpN, int(ni), int(di), int(SahpN))
	Neurons.Set(nrnSaphCa, int(ni), int(di), int(SahpCa))
	Neurons.Set(ly.Acts.Sahp.GsAHP(sahpN), int(ni), int(di), int(Gsahp))
}

// PlusPhasePost does special algorithm processing at end of plus
func (ly *LayerParams) PlusPhasePost(ctx *Context) {
	ly.PlusPhaseActAvg(ctx)
	ly.PhaseDiffFromActs(ctx) // GPU syncs down the state before this
	np := ly.Indexes.NPools
	if ly.Type == PTMaintLayer && ly.CT.OFCposPT.IsTrue() {
		for spi := uint32(1); spi < np; spi++ {
			for di := uint32(0); di < ctx.NData; di++ {
				pi := ly.PoolIndex(spi)
				val := PoolAvgMax(AMCaD, AMCycle, Avg, pi, di)
				GlobalVectors.Set(val, int(GvOFCposPTMaint), int(uint32(pi-1)), int(di))
			}
		}
	}

	if ly.Acts.Decay.OnRew.IsTrue() {
		for di := uint32(0); di < ctx.NData; di++ {
			hasRew := (GlobalScalars.Value(int(GvHasRew), int(di)) > 0)
			giveUp := (GlobalScalars.Value(int(GvGiveUp), int(di)) > 0)
			if hasRew || giveUp {
				ly.DecayState(ctx, di, 1, 1, 1)
				for spi := uint32(0); spi < np; spi++ {
					pi := ly.PoolIndex(spi)
					PoolAvgMaxZero(pi, di)
				}
			}
		}
	}
	if ly.Type == MatrixLayer {
		ly.MatrixGated(ctx)
	}
}

// PlusPhaseActAvg updates ActAvg and DTrgAvg at the plus phase
// Note: could be done on GPU but not worth it at this point..
func (ly *LayerParams) PlusPhaseActAvg(ctx *Context) {
	nn := ly.Indexes.NNeurons
	for lni := uint32(0); lni < nn; lni++ {
		ni := ly.Indexes.NeurSt + lni
		if NeuronIsOff(ni) {
			continue
		}
		dTrgSum := float32(0)
		avgSum := float32(0)
		for di := uint32(0); di < ctx.NData; di++ {
			dTrgSum += ly.LearnTrgAvgErrLRate() * (Neurons.Value(int(ni), int(di), int(CaP)) - Neurons.Value(int(ni), int(di), int(CaD)))
			avgSum += ly.Acts.Dt.LongAvgDt * (Neurons.Value(int(ni), int(di), int(ActM)) - NeuronAvgs.Value(int(ni), int(ActAvg)))
		}
		NeuronAvgs.SetAdd(dTrgSum, int(ni), int(DTrgAvg))
		NeuronAvgs.SetAdd(avgSum, int(ni), int(ActAvg))
	}
}

//gosl:end

////////  Apply Ext

// InitExt initializes external input state.
// Should be called prior to ApplyExt on all layers receiving Ext input.
func (ly *Layer) InitExt() {
	if !ly.Type.IsExt() {
		return
	}
	nn := ly.NNeurons
	for lni := uint32(0); lni < nn; lni++ {
		ni := ly.NeurStIndex + lni
		if NeuronIsOff(ni) {
			continue
		}
		for di := uint32(0); di < ly.MaxData; di++ {
			ly.Params.InitExt(ni, di)
			Exts.Set(-1, int(ly.Params.Indexes.ExtsSt+lni), int(di)) // missing by default
		}
	}
}

// ApplyExt applies external input in the form of an tensor.Float32 or 64.
// Negative values and NaNs are not valid, and will be interpreted as missing inputs.
// The given data index di is the data parallel index (0 < di < MaxData):
// must present inputs separately for each separate data parallel set.
// If dimensionality of tensor matches that of layer, and is 2D or 4D,
// then each dimension is iterated separately, so any mismatch preserves
// dimensional structure.
// Otherwise, the flat 1D view of the tensor is used.
// If the layer is a Target or Compare layer type, then it goes in Target
// otherwise it goes in Ext.
// Also sets the Exts values on layer, which are used for the GPU version,
// which requires calling the network ApplyExts() method -- is a no-op for CPU.
func (ly *Layer) ApplyExt(di uint32, ext tensor.Tensor) {
	switch {
	case ext.NumDims() == 2 && ly.Shape.NumDims() == 4: // special case
		ly.ApplyExt2Dto4D(di, ext)
	case ext.NumDims() != ly.Shape.NumDims() || !(ext.NumDims() == 2 || ext.NumDims() == 4):
		ly.ApplyExt1DTsr(di, ext)
	case ext.NumDims() == 2:
		ly.ApplyExt2D(di, ext)
	case ext.NumDims() == 4:
		ly.ApplyExt4D(di, ext)
	}
}

// ApplyExtVal applies given external value to given neuron
// using clearMask, setMask, and toTarg from ApplyExtFlags.
// Also saves Val in Exts for potential use by GPU.
func (ly *Layer) ApplyExtValue(lni, di uint32, val float32, clearMask, setMask NeuronFlags, toTarg bool) {
	ni := ly.NeurStIndex + lni
	if NeuronIsOff(ni) {
		return
	}
	Exts.Set(val, int(ly.Params.Indexes.ExtsSt+lni), int(di))
	if val < 0 {
		return
	}
	if toTarg {
		Neurons.Set(val, int(ni), int(di), int(Target))
	} else {
		Neurons.Set(val, int(ni), int(di), int(Ext))
	}
	NeuronClearFlag(clearMask, ni, di)
	NeuronSetFlag(setMask, ni, di)
}

// ApplyExtFlags gets the clear mask and set mask for updating neuron flags
// based on layer type, and whether input should be applied to Target (else Ext)
func (ly *Layer) ApplyExtFlags() (clearMask, setMask NeuronFlags, toTarg bool) {
	ly.Params.ApplyExtFlags(&clearMask, &setMask, &toTarg)
	return
}

// ApplyExt2D applies 2D tensor external input
func (ly *Layer) ApplyExt2D(di uint32, ext tensor.Tensor) {
	clearMask, setMask, toTarg := ly.ApplyExtFlags()
	ymx := min(ext.DimSize(0), ly.Shape.DimSize(0))
	xmx := min(ext.DimSize(1), ly.Shape.DimSize(1))
	for y := 0; y < ymx; y++ {
		for x := 0; x < xmx; x++ {
			idx := []int{y, x}
			val := float32(ext.Float(idx...))
			lni := uint32(ly.Shape.IndexTo1D(idx...))
			ly.ApplyExtValue(lni, di, val, clearMask, setMask, toTarg)
		}
	}
}

// ApplyExt2Dto4D applies 2D tensor external input to a 4D layer
func (ly *Layer) ApplyExt2Dto4D(di uint32, ext tensor.Tensor) {
	clearMask, setMask, toTarg := ly.ApplyExtFlags()
	lNy, lNx, _, _ := tensor.Projection2DShape(&ly.Shape, false)

	ymx := min(ext.DimSize(0), lNy)
	xmx := min(ext.DimSize(1), lNx)
	for y := 0; y < ymx; y++ {
		for x := 0; x < xmx; x++ {
			idx := []int{y, x}
			val := float32(ext.Float(idx...))
			lni := uint32(tensor.Projection2DIndex(&ly.Shape, false, y, x))
			ly.ApplyExtValue(lni, di, val, clearMask, setMask, toTarg)
		}
	}
}

// ApplyExt4D applies 4D tensor external input
func (ly *Layer) ApplyExt4D(di uint32, ext tensor.Tensor) {
	clearMask, setMask, toTarg := ly.ApplyExtFlags()
	ypmx := min(ext.DimSize(0), ly.Shape.DimSize(0))
	xpmx := min(ext.DimSize(1), ly.Shape.DimSize(1))
	ynmx := min(ext.DimSize(2), ly.Shape.DimSize(2))
	xnmx := min(ext.DimSize(3), ly.Shape.DimSize(3))
	for yp := 0; yp < ypmx; yp++ {
		for xp := 0; xp < xpmx; xp++ {
			for yn := 0; yn < ynmx; yn++ {
				for xn := 0; xn < xnmx; xn++ {
					idx := []int{yp, xp, yn, xn}
					val := float32(ext.Float(idx...))
					lni := uint32(ly.Shape.IndexTo1D(idx...))
					ly.ApplyExtValue(lni, di, val, clearMask, setMask, toTarg)
				}
			}
		}
	}
}

// ApplyExt1DTsr applies external input using 1D flat interface into tensor.
// If the layer is a Target or Compare layer type, then it goes in Target
// otherwise it goes in Ext
func (ly *Layer) ApplyExt1DTsr(di uint32, ext tensor.Tensor) {
	clearMask, setMask, toTarg := ly.ApplyExtFlags()
	mx := uint32(min(ext.Len(), int(ly.NNeurons)))
	for lni := uint32(0); lni < mx; lni++ {
		val := float32(ext.Float1D(int(lni)))
		ly.ApplyExtValue(lni, di, val, clearMask, setMask, toTarg)
	}
}

// ApplyExt1D applies external input in the form of a flat 1-dimensional slice of floats
// If the layer is a Target or Compare layer type, then it goes in Target
// otherwise it goes in Ext
func (ly *Layer) ApplyExt1D(di uint32, ext []float64) {
	clearMask, setMask, toTarg := ly.ApplyExtFlags()
	mx := uint32(min(len(ext), int(ly.NNeurons)))
	for lni := uint32(0); lni < mx; lni++ {
		val := float32(ext[lni])
		ly.ApplyExtValue(lni, di, val, clearMask, setMask, toTarg)
	}
}

// ApplyExt1D32 applies external input in the form of a flat 1-dimensional slice of float32s.
// If the layer is a Target or Compare layer type, then it goes in Target
// otherwise it goes in Ext
func (ly *Layer) ApplyExt1D32(di uint32, ext []float32) {
	clearMask, setMask, toTarg := ly.ApplyExtFlags()
	mx := uint32(min(len(ext), int(ly.NNeurons)))
	for lni := uint32(0); lni < mx; lni++ {
		val := ext[lni]
		ly.ApplyExtValue(lni, di, val, clearMask, setMask, toTarg)
	}
}

// UpdateExtFlags updates the neuron flags for external input based on current
// layer Type field -- call this if the Type has changed since the last
// ApplyExt* method call.
func (ly *Layer) UpdateExtFlags(ctx *Context) {
	clearMask, setMask, _ := ly.ApplyExtFlags()
	nn := ly.NNeurons
	for lni := uint32(0); lni < nn; lni++ {
		ni := ly.NeurStIndex + lni
		if NeuronIsOff(ni) {
			continue
		}
		for di := uint32(0); di < ctx.NData; di++ {
			NeuronClearFlag(clearMask, ni, di)
			NeuronSetFlag(setMask, ni, di)
		}
	}
}

// TargToExt sets external input Ext from target values Target
// This is done at end of MinusPhase to allow targets to drive activity in plus phase.
// This can be called separately to simulate alpha cycles within theta cycles, for example.
func (ly *Layer) TargToExt(ctx *Context) {
	nn := ly.NNeurons
	for lni := uint32(0); lni < nn; lni++ {
		ni := ly.NeurStIndex + lni
		if NeuronIsOff(ni) {
			continue
		}
		for di := uint32(0); di < ctx.NData; di++ {
			if !NeuronHasFlag(NeuronHasTarg, ni, di) { // will be clamped in plus phase
				continue
			}
			Neurons.Set(Neurons.Value(int(ni), int(di), int(Target)), int(ni), int(di), int(Ext))
			NeuronSetFlag(NeuronHasExt, ni, di)
			Neurons.Set(-1, int(ni), int(di), int(ISI)) // get fresh update on plus phase output acts
			Neurons.Set(-1, int(ni), int(di), int(ISIAvg))
		}
	}
}

// ClearTargExt clears external inputs Ext that were set from target values Target.
// This can be called to simulate alpha cycles within theta cycles, for example.
func (ly *Layer) ClearTargExt(ctx *Context) {
	nn := ly.NNeurons
	for lni := uint32(0); lni < nn; lni++ {
		ni := ly.NeurStIndex + lni
		if NeuronIsOff(ni) {
			continue
		}
		for di := uint32(0); di < ctx.NData; di++ {
			if !NeuronHasFlag(NeuronHasTarg, ni, di) { // will be clamped in plus phase
				continue
			}
			Neurons.Set(0, int(ni), int(di), int(Ext))
			NeuronClearFlag(NeuronHasExt, ni, di)
			Neurons.Set(-1, int(ni), int(di), int(ISI)) // get fresh update on plus phase output acts
			Neurons.Set(-1, int(ni), int(di), int(ISIAvg))
		}
	}
}
