// Copyright (c) 2019, The Emergent Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package axon

import (
	"errors"
	"fmt"
	"io"
	"log"
	"strconv"

	"cogentcore.org/core/base/indent"
	"cogentcore.org/core/math32"
	"cogentcore.org/core/math32/minmax"
	"cogentcore.org/core/tensor"
	"github.com/emer/emergent/v2/emer"
	"github.com/emer/emergent/v2/paths"
	"github.com/emer/emergent/v2/weights"
)

// https://github.com/kisvegabor/abbreviations-in-code suggests Buf instead of Buff

// index naming:
// syi =  path-relative synapse index (per existing usage)
// syni = network-relative synapse index -- add SynStIndex to syi

// Path implements axon spiking communication and learning.
type Path struct {
	emer.PathBase

	// path parameters.
	Params *PathParams

	// sending layer for this pathway.
	Send *Layer

	// receiving layer for this pathway.
	Recv *Layer

	// type of pathway.
	Type PathTypes

	// DefaultParams are functions to apply parameters prior to user-set
	// parameters. These are useful for specific functionality in specialized
	// brain areas (e.g., Rubicon, BG etc) not associated with a path type,
	// which otherwise is used to hard-code initial default parameters.
	DefaultParams []func(pt *PathParams) `display:"-"`

	// average and maximum number of recv connections in the receiving layer
	RecvConNAvgMax minmax.AvgMax32 `table:"-" edit:"-" display:"inline"`

	// average and maximum number of sending connections in the sending layer
	SendConNAvgMax minmax.AvgMax32 `table:"-" edit:"-" display:"inline"`

	// start index into global Synapse array:
	SynStIndex uint32 `display:"-"`

	// number of synapses in this pathway
	NSyns uint32 `display:"-"`

	// starting offset and N cons for each recv neuron, for indexing into the RecvSynIndex array of indexes into the Syns synapses, which are organized sender-based.  This is locally managed during build process, but also copied to network global PathRecvCons slice for GPU usage.
	RecvCon []StartN `display:"-"`

	// index into Syns synaptic state for each sending unit and connection within that, for the sending pathway which does not own the synapses, and instead indexes into recv-ordered list
	RecvSynIndex []uint32 `display:"-"`

	// for each recv synapse, this is index of *sending* neuron  It is generally preferable to use the Synapse SendIndex where needed, instead of this slice, because then the memory access will be close by other values on the synapse.
	RecvConIndex []uint32 `display:"-"`

	// starting offset and N cons for each sending neuron, for indexing into the Syns synapses, which are organized sender-based.  This is locally managed during build process, but also copied to network global PathSendCons slice for GPU usage.
	SendCon []StartN `display:"-"`

	// index of other neuron that receives the sender's synaptic input, ordered by the sending layer's order of units as the outer loop, and SendCon.N receiving units within that.  It is generally preferable to use the Synapse RecvIndex where needed, instead of this slice, because then the memory access will be close by other values on the synapse.
	SendConIndex []uint32 `display:"-"`
}

// emer.Path interface

func (pt *Path) RecvLayer() emer.Layer { return pt.Recv }
func (pt *Path) SendLayer() emer.Layer { return pt.Send }
func (pt *Path) TypeName() string      { return pt.Type.String() }
func (pt *Path) TypeNumber() int       { return int(pt.Type) }

func (pt *Path) Defaults() {
	if pt.Params == nil {
		return
	}
	ctx := pt.Recv.Network.Context()
	pt.Params.Type = pt.Type
	pt.Params.Defaults()
	pt.Params.Learn.KinaseCa.WtsForNCycles(int(ctx.ThetaCycles))
	switch pt.Type {
	case InhibPath:
		pt.Params.SWts.Adapt.On.SetBool(false)
	case BackPath:
		pt.Params.PathScale.Rel = 0.1
	case RWPath, TDPredPath:
		pt.Params.RLPredDefaults()
	case BLAPath:
		pt.Params.BLADefaults()
	case HipPath:
		pt.Params.HipDefaults()
	case VSPatchPath:
		pt.Params.VSPatchDefaults()
	case VSMatrixPath:
		pt.Params.MatrixDefaults()
	case DSMatrixPath:
		pt.Params.MatrixDefaults()
	}
	pt.applyDefaultParams()
	pt.UpdateParams()
}

// Update is interface that does local update of struct vals
func (pt *Path) Update() {
	if pt.Params == nil {
		return
	}
	if pt.Params.Type == InhibPath {
		pt.Params.Com.GType = InhibitoryG
	}
	pt.Params.Update()
}

// UpdateParams updates all params given any changes
// that might have been made to individual values
func (pt *Path) UpdateParams() {
	pt.Update()
}

// Connect sets the connectivity between two layers and the pattern to use in interconnecting them
func (pt *Path) Connect(slay, rlay *Layer, pat paths.Pattern, typ PathTypes) {
	pt.Send = slay
	pt.Recv = rlay
	pt.Pattern = pat
	pt.Type = typ
	pt.Name = pt.Send.Name + "To" + pt.Recv.Name
}

// todo: move to emer?

// Validate tests for non-nil settings for the pathway -- returns error
// message or nil if no problems (and logs them if logmsg = true)
func (pt *Path) Validate(logmsg bool) error {
	emsg := ""
	if pt.Pattern == nil {
		emsg += "Pattern is nil; "
	}
	if pt.Recv == nil {
		emsg += "Recv is nil; "
	}
	if pt.Send == nil {
		emsg += "Send is nil; "
	}
	if emsg != "" {
		err := errors.New(emsg)
		if logmsg {
			log.Println(emsg)
		}
		return err
	}
	return nil
}

// RecvSynIxs returns the receiving synapse indexes for given recv unit index
// within the receiving layer, to be iterated over for recv-based processing.
func (pt *Path) RecvSynIxs(ri uint32) []uint32 {
	rcon := pt.RecvCon[ri]
	return pt.RecvSynIndex[rcon.Start : rcon.Start+rcon.N]
}

// Build constructs the full connectivity among the layers.
// Calls Validate and returns error if invalid.
// Pat.Connect is called to get the pattern of the connection.
// Then the connection indexes are configured according to that pattern.
// Does NOT allocate synapses -- these are set by Network from global slice.
func (pt *Path) Build() error {
	if pt.Off {
		return nil
	}
	err := pt.Validate(true)
	if err != nil {
		return err
	}
	ssh := &pt.Send.Shape
	rsh := &pt.Recv.Shape
	sendn, recvn, cons := pt.Pattern.Connect(ssh, rsh, pt.Recv == pt.Send)
	slen := ssh.Len()
	rlen := rsh.Len()
	tcons := pt.SetConStartN(&pt.SendCon, &pt.SendConNAvgMax, sendn)
	tconr := pt.SetConStartN(&pt.RecvCon, &pt.RecvConNAvgMax, recvn)
	if tconr != tcons {
		log.Printf("%v programmer error: total recv cons %v != total send cons %v\n", pt.String(), tconr, tcons)
	}
	// these are large allocs, as number of connections tends to be ~quadratic
	// These indexes are not used in GPU computation -- only for CPU side.
	pt.RecvConIndex = make([]uint32, tconr)
	pt.RecvSynIndex = make([]uint32, tcons)
	pt.SendConIndex = make([]uint32, tcons)

	sconN := make([]uint32, slen) // temporary mem needed to tracks cur n of sending cons

	cbits := cons.Values
	for ri := 0; ri < rlen; ri++ {
		rbi := ri * slen // recv bit index
		rcon := pt.RecvCon[ri]
		rci := uint32(0)
		for si := 0; si < slen; si++ {
			if !cbits.Index(rbi + si) { // no connection
				continue
			}
			if rci >= rcon.N {
				log.Printf("%v programmer error: recv target total con number: %v exceeded at recv idx: %v, send idx: %v\n", pt.String(), rcon.N, ri, si)
				break
			}
			pt.RecvConIndex[rcon.Start+rci] = uint32(si)

			sci := sconN[si]
			scon := pt.SendCon[si]
			if sci >= scon.N {
				log.Printf("%v programmer error: send target total con number: %v exceeded at recv idx: %v, send idx: %v\n", pt.String(), scon.N, ri, si)
				break
			}
			pt.SendConIndex[scon.Start+sci] = uint32(ri)
			pt.RecvSynIndex[rcon.Start+rci] = scon.Start + sci
			(sconN[si])++
			rci++
		}
	}
	return nil
}

// SetConStartN sets the *Con StartN values given n tensor from Pat.
// Returns total number of connections for this direction.
func (pt *Path) SetConStartN(con *[]StartN, avgmax *minmax.AvgMax32, tn *tensor.Int32) uint32 {
	ln := tn.Len()
	tnv := tn.Values
	*con = make([]StartN, ln)
	idx := uint32(0)
	avgmax.Init()
	for i := 0; i < ln; i++ {
		nv := uint32(tnv[i])
		(*con)[i] = StartN{N: nv, Start: idx}
		idx += nv
		avgmax.UpdateValue(float32(nv), int32(i))
	}
	avgmax.CalcAvg()
	return idx
}

// String satisfies fmt.Stringer for path
func (pt *Path) String() string {
	str := ""
	if pt.Recv == nil {
		str += "recv=nil; "
	} else {
		str += pt.Recv.Name + " <- "
	}
	if pt.Send == nil {
		str += "send=nil"
	} else {
		str += pt.Send.Name
	}
	if pt.Pattern == nil {
		str += " Pat=nil"
	} else {
		str += " Pat=" + pt.Pattern.Name()
	}
	return str
}

// AddDefaultParams adds given default param setting function.
func (pt *Path) AddDefaultParams(fun func(pt *PathParams)) {
	pt.DefaultParams = append(pt.DefaultParams, fun)
}

// applyDefaultParams applies DefaultParams default parameters.
// Called by Path.Defaults()
func (pt *Path) applyDefaultParams() {
	for _, f := range pt.DefaultParams {
		f(pt.Params)
	}
}

func (pt *Path) SynVarNames() []string {
	return SynapseVarNames
}

// SynVarProps returns properties for variables
func (pt *Path) SynVarProps() map[string]string {
	return SynapseVarProps
}

// SynIndex returns the index of the synapse between given send, recv unit indexes
// (1D, flat indexes, layer relative).
// Returns -1 if synapse not found between these two neurons.
// Requires searching within connections for sending unit.
func (pt *Path) SynIndex(sidx, ridx int) int {
	if sidx >= len(pt.SendCon) {
		return -1
	}
	scon := pt.SendCon[sidx]
	if scon.N == 0 {
		return -1
	}
	firstRi := int(pt.SendConIndex[scon.Start])
	lastRi := int(pt.SendConIndex[scon.Start+scon.N-1])
	if ridx < firstRi || ridx > lastRi { // fast reject -- paths are always in order!
		return -1
	}
	// start at index proportional to ri relative to rist
	up := int32(0)
	if lastRi > firstRi {
		up = int32(float32(scon.N) * float32(ridx-firstRi) / float32(lastRi-firstRi))
	}
	dn := up - 1

	for {
		doing := false
		if up < int32(scon.N) {
			doing = true
			sconi := int32(scon.Start) + up
			if int(pt.SendConIndex[sconi]) == ridx {
				return int(sconi)
			}
			up++
		}
		if dn >= 0 {
			doing = true
			sconi := int32(scon.Start) + dn
			if int(pt.SendConIndex[sconi]) == ridx {
				return int(sconi)
			}
			dn--
		}
		if !doing {
			break
		}
	}
	return -1
}

// SynVarIndex returns the index of given variable within the synapse,
// according to *this path's* SynVarNames() list (using a map to lookup index),
// or -1 and error message if not found.
func (pt *Path) SynVarIndex(varNm string) (int, error) {
	return SynapseVarByName(varNm)
}

// SynVarNum returns the number of synapse-level variables
// for this paths.  This is needed for extending indexes in derived types.
func (pt *Path) SynVarNum() int {
	return len(SynapseVarNames)
}

// NumSyns returns the number of synapses for this path as a 1D array.
// This is the max idx for SynVal1D and the number of vals set by SynValues.
func (pt *Path) NumSyns() int {
	return int(pt.NSyns)
}

// SynValue1D returns value of given variable index (from SynVarIndex) on given SynIndex.
// Returns NaN on invalid index.
// This is the core synapse var access method used by other methods.
func (pt *Path) SynValue1D(varIndex int, synIndex int) float32 {
	if synIndex < 0 || synIndex >= int(pt.NSyns) {
		return math32.NaN()
	}
	if varIndex < 0 || varIndex >= pt.SynVarNum() {
		return math32.NaN()
	}
	syni := pt.SynStIndex + uint32(synIndex)
	if varIndex < int(SynapseVarsN) {
		return Synapses[syni, SynapseVars(varIndex)]
	} else {
		return SynapseTraces[syni, 0, SynapseTraceVars(varIndex-int(SynapseVarsN))]
	}
}

// SynValues sets values of given variable name for each synapse,
// using the natural ordering of the synapses (sender based for Axon),
// into given float32 slice (only resized if not big enough).
// Returns error on invalid var name.
func (pt *Path) SynValues(vals *[]float32, varNm string) error {
	vidx, err := pt.EmerPath.SynVarIndex(varNm)
	if err != nil {
		return err
	}
	ns := int(pt.NSyns)
	if *vals == nil || cap(*vals) < ns {
		*vals = make([]float32, ns)
	} else if len(*vals) < ns {
		*vals = (*vals)[0:ns]
	}
	slay := pt.Send
	i := 0
	for lni := uint32(0); lni < slay.NNeurons; lni++ {
		scon := pt.SendCon[lni]
		for syi := scon.Start; syi < scon.Start+scon.N; syi++ {
			(*vals)[i] = pt.SynValue1D(vidx, i)
			i++
		}
	}
	return nil
}

// SynVal1DDi returns value of given variable index (from SynVarIndex) on given SynIndex.
// Returns NaN on invalid index.
// This is the core synapse var access method used by other methods.
// Includes Di data parallel index for data-parallel synaptic values.
func (pt *Path) SynVal1DDi(varIndex int, synIndex int, di int) float32 {
	if synIndex < 0 || synIndex >= int(pt.NSyns) {
		return math32.NaN()
	}
	if varIndex < 0 || varIndex >= pt.SynVarNum() {
		return math32.NaN()
	}
	syni := pt.SynStIndex + uint32(synIndex)
	if varIndex < int(SynapseVarsN) {
		return Synapses[syni, SynapseVars(varIndex)]
	} else {
		return SynapseTraces[syni, di, SynapseTraceVars(varIndex-int(SynapseVarsN))]
	}
}

// SynValDi returns value of given variable name on the synapse
// between given send, recv unit indexes (1D, flat indexes).
// Returns math32.NaN() for access errors (see SynValTry for error message)
// Includes Di data parallel index for data-parallel synaptic values.
func (pt *Path) SynValDi(varNm string, sidx, ridx int, di int) float32 {
	vidx, err := pt.EmerPath.SynVarIndex(varNm)
	if err != nil {
		return math32.NaN()
	}
	syi := pt.SynIndex(sidx, ridx)
	return pt.SynVal1DDi(vidx, syi, di)
}

///////////////////////////////////////////////////////////////////////
//  	Weights

// WriteWeightsJSON writes the weights from this pathway
// from the receiver-side perspective in a JSON text format.
func (pt *Path) WriteWeightsJSON(w io.Writer, depth int) {
	slay := pt.Send
	rlay := pt.Recv
	nr := int(rlay.NNeurons)
	w.Write(indent.TabBytes(depth))
	w.Write([]byte("{\n"))
	depth++
	w.Write(indent.TabBytes(depth))
	w.Write([]byte(fmt.Sprintf("\"From\": %q,\n", slay.Name)))
	w.Write(indent.TabBytes(depth))
	w.Write([]byte(fmt.Sprintf("\"Rs\": [\n")))
	depth++
	for ri := 0; ri < nr; ri++ {
		rc := pt.RecvCon[ri]
		syIndexes := pt.RecvSynIxs(uint32(ri))
		w.Write(indent.TabBytes(depth))
		w.Write([]byte("{\n"))
		depth++
		w.Write(indent.TabBytes(depth))
		w.Write([]byte(fmt.Sprintf("\"Ri\": %v,\n", ri)))
		w.Write(indent.TabBytes(depth))
		w.Write([]byte(fmt.Sprintf("\"N\": %v,\n", rc.N)))
		w.Write(indent.TabBytes(depth))
		w.Write([]byte("\"Si\": [ "))
		for ci, syi := range syIndexes {
			syni := pt.SynStIndex + syi
			si := pt.Params.SynSendLayerIndex(syni)
			w.Write([]byte(fmt.Sprintf("%v", si)))
			if ci == int(rc.N-1) {
				w.Write([]byte(" "))
			} else {
				w.Write([]byte(", "))
			}
		}
		w.Write([]byte("],\n"))
		w.Write(indent.TabBytes(depth))
		w.Write([]byte("\"Wt\": [ "))
		for ci, syi := range syIndexes {
			syni := pt.SynStIndex + syi
			w.Write([]byte(strconv.FormatFloat(float64(Synapses[syni, Wt]), 'g', weights.Prec, 32)))
			if ci == int(rc.N-1) {
				w.Write([]byte(" "))
			} else {
				w.Write([]byte(", "))
			}
		}
		w.Write([]byte("],\n"))
		w.Write(indent.TabBytes(depth))
		w.Write([]byte("\"Wt1\": [ ")) // Wt1 is SWt
		for ci, syi := range syIndexes {
			syni := pt.SynStIndex + syi
			w.Write([]byte(strconv.FormatFloat(float64(Synapses[syni, SWt]), 'g', weights.Prec, 32)))
			if ci == int(rc.N-1) {
				w.Write([]byte(" "))
			} else {
				w.Write([]byte(", "))
			}
		}
		w.Write([]byte("]\n"))
		depth--
		w.Write(indent.TabBytes(depth))
		if ri == nr-1 {
			w.Write([]byte("}\n"))
		} else {
			w.Write([]byte("},\n"))
		}
	}
	depth--
	w.Write(indent.TabBytes(depth))
	w.Write([]byte("]\n"))
	depth--
	w.Write(indent.TabBytes(depth))
	w.Write([]byte("}")) // note: leave unterminated as outer loop needs to add , or just \n depending
}

// SetWeights sets the weights for this pathway from weights.Path decoded values
func (pt *Path) SetWeights(pw *weights.Path) error {
	var err error
	for i := range pw.Rs {
		pr := &pw.Rs[i]
		hasWt1 := len(pr.Wt1) >= len(pr.Si)
		for si := range pr.Si {
			if hasWt1 {
				er := pt.SetSynValue("SWt", pr.Si[si], pr.Ri, pr.Wt1[si])
				if er != nil {
					err = er
				}
			}
			er := pt.SetSynValue("Wt", pr.Si[si], pr.Ri, pr.Wt[si]) // updates lin wt
			if er != nil {
				err = er
			}
		}
	}
	return err
}


// AllParams returns a listing of all parameters in the Layer
func (pt *Path) AllParams() string {
	str := "///////////////////////////////////////////////////\nPath: " + pt.Name + "\n" + pt.Params.AllParams()
	return str
}

// SetSynVal sets value of given variable name on the synapse
// between given send, recv unit indexes (1D, flat indexes)
// returns error for access errors.
func (pt *Path) SetSynValue(varNm string, sidx, ridx int, val float32) error {
	vidx, err := pt.SynVarIndex(varNm)
	if err != nil {
		return err
	}
	syi := uint32(pt.SynIndex(sidx, ridx))
	if syi < 0 || syi >= pt.NSyns {
		return err
	}
	syni := pt.SynStIndex + syi
	if vidx < int(SynapseVarsN) {
		Synapses[syni, SynapseVars(vidx)] = val
	} else {
		for di := uint32(0); di < pt.Recv.MaxData; di++ {
			SynapseTraces[syni, di, SynapseTraceVars(vidx-int(SynapseVarsN))] = val
		}
	}
	if varNm == "Wt" {
		wt := Synapses[syni, Wt]
		if Synapses[syni, SWt] == 0 {
			Synapses[syni, SWt] = wt
		}
		Synapses[syni, LWt] = pt.Params.SWts.LWtFromWts(wt, Synapses[syni, SWt])
	}
	return nil
}


