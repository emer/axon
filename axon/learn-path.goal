// Copyright (c) 2023, The Emergent Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package axon

import (
	"cogentcore.org/core/math32"
)

//gosl:start

// DWtSyn is the overall entry point for weight change (learning) at given synapse.
// It selects appropriate function based on pathway type.
// rpl is the receiving layer SubPool
func (pt *PathParams) DWtSyn(ctx *Context, rlay *LayerParams, syni, si, ri, di uint32) {
	if pt.Learn.Learn == 0 {
		return
	}
	isTarget := rlay.Acts.Clamp.IsTarget > 0
	spi := NeuronIxs[ri, NrnSubPool]
	pi := rlay.PoolIndex(spi)
	lpi := rlay.PoolIndex(0)
	switch pt.Type {
	case RWPath:
		pt.DWtSynRWPred(ctx, syni, si, ri, lpi, pi, di)
	case TDPredPath:
		pt.DWtSynTDPred(ctx, syni, si, ri, lpi, pi, di)
	case VSMatrixPath:
		pt.DWtSynVSMatrix(ctx, syni, si, ri, lpi, pi, di)
	case DSMatrixPath:
		pt.DWtSynDSMatrix(ctx, syni, si, ri, lpi, pi, di)
	case VSPatchPath:
		pt.DWtSynVSPatch(ctx, syni, si, ri, lpi, pi, di)
	case BLAPath:
		pt.DWtSynBLA(ctx, syni, si, ri, lpi, pi, di)
	case HipPath:
		pt.DWtSynHip(ctx, syni, si, ri, lpi, pi, di, isTarget) // by default this is the same as DWtSynCortex (w/ unused Hebb component in the algorithm) except that it uses WtFromDWtSynNoLimits
	default:
		if pt.Learn.Hebb.On.IsTrue() {
			pt.DWtSynHebb(ctx, syni, si, ri, lpi, pi, di)
		} else {
			pt.DWtSynCortex(ctx, syni, si, ri, lpi, pi, di, isTarget)
		}
	}
}

// SynCa gets the synaptic calcium P (potentiation) and D (depression)
// values, using optimized computation.
func (pt *PathParams) SynCa(ctx *Context, si, ri, di uint32, syCaP, syCaD *float32) {
	rb0 := Neurons[ri, di, SpkBin0]
	sb0 := Neurons[si, di, SpkBin0]
	rb1 := Neurons[ri, di, SpkBin1]
	sb1 := Neurons[si, di, SpkBin1]
	rb2 := Neurons[ri, di, SpkBin2]
	sb2 := Neurons[si, di, SpkBin2]
	rb3 := Neurons[ri, di, SpkBin3]
	sb3 := Neurons[si, di, SpkBin3]
	rb4 := Neurons[ri, di, SpkBin4]
	sb4 := Neurons[si, di, SpkBin4]
	rb5 := Neurons[ri, di, SpkBin5]
	sb5 := Neurons[si, di, SpkBin5]
	rb6 := Neurons[ri, di, SpkBin6]
	sb6 := Neurons[si, di, SpkBin6]
	rb7 := Neurons[ri, di, SpkBin7]
	sb7 := Neurons[si, di, SpkBin7]

	b0 := 0.1 * (rb0 * sb0)
	b1 := 0.1 * (rb1 * sb1)
	b2 := 0.1 * (rb2 * sb2)
	b3 := 0.1 * (rb3 * sb3)
	b4 := 0.1 * (rb4 * sb4)
	b5 := 0.1 * (rb5 * sb5)
	b6 := 0.1 * (rb6 * sb6)
	b7 := 0.1 * (rb7 * sb7)

	pt.Learn.KinaseCa.FinalCa(b0, b1, b2, b3, b4, b5, b6, b7, syCaP, syCaD)
}

// DWtSynCortex computes the weight change (learning) at given synapse for cortex.
// Uses synaptically integrated spiking, computed at the Theta cycle interval.
// This is the trace version for hidden units, and uses syn CaP - CaD for targets.
func (pt *PathParams) DWtSynCortex(ctx *Context, syni, si, ri, lpi, pi, di uint32, isTarget bool) {
	var syCaP, syCaD float32
	pt.SynCa(ctx, si, ri, di, &syCaP, &syCaD)

	dtr := syCaD               // delta trace, caD reflects entire window
	if pt.Type == CTCtxtPath { // layer 6 CT pathway
		dtr = Neurons[si, di, BurstPrv]
	}
	// save delta trace for GUI
	SynapseTraces[syni, DTr, di] = dtr
	// TrFromCa(prev-multiTrial Integrated Trace, deltaTrace), as a mixing func
	tr := pt.Learn.Trace.TrFromCa(SynapseTraces[syni, Tr, di], dtr)
	// save new trace, updated w/ credit assignment (dependent on Tau in the TrFromCa function
	SynapseTraces[syni, Tr, di] = tr
	// failed con, no learn
	if Synapses[syni, Wt] == 0 {
		return
	}

	// error-driven learning
	var err float32
	if isTarget {
		err = syCaP - syCaD // for target layers, syn Ca drives error signal directly
	} else {
		err = tr * (Neurons[ri, di, NrnCaP] - Neurons[ri, di, NrnCaD]) // hiddens: recv NMDA Ca drives error signal w/ trace credit
	}
	// note: trace ensures that nothing changes for inactive synapses..
	// sb immediately -- enters into zero sum.
	// also other types might not use, so need to do this per learning rule
	lwt := Synapses[syni, LWt] // linear weight
	if err > 0 {
		err *= (1 - lwt)
	} else {
		err *= lwt
	}
	if pt.Type == CTCtxtPath { // rn.RLRate IS needed for other pathways, just not the context one
		SynapseTraces[syni, DiDWt, di] = pt.Learn.LRate.Eff * err
	} else {
		SynapseTraces[syni, DiDWt, di] = Neurons[ri, di, RLRate] * pt.Learn.LRate.Eff * err
	}
}

// DWtSynHebb computes the weight change (learning) at given synapse for cortex.
// Uses synaptically integrated spiking, computed at the Theta cycle interval.
// This is the trace version for hidden units, and uses syn CaP - CaD for targets.
func (pt *PathParams) DWtSynHebb(ctx *Context, syni, si, ri, lpi, pi, di uint32) {
	rNrnCaP := Neurons[ri, di, NrnCaP]
	sNrnCap := Neurons[si, di, NrnCaP]
	lwt := Synapses[syni, LWt] // linear weight
	hebb := rNrnCaP * (pt.Learn.Hebb.Up*sNrnCap*(1-lwt) - pt.Learn.Hebb.Down*(1-sNrnCap)*lwt)
	// not: Neurons[ri, di, RLRate]*
	SynapseTraces[syni, DiDWt, di] = pt.Learn.LRate.Eff * hebb
}

// DWtSynHip computes the weight change (learning) at given synapse for cortex + Hip (CPCA Hebb learning).
// Uses synaptically integrated spiking, computed at the Theta cycle interval.
// This is the trace version for hidden units, and uses syn CaP - CaD for targets.
// Adds proportional CPCA learning rule for hip-specific paths
func (pt *PathParams) DWtSynHip(ctx *Context, syni, si, ri, lpi, pi, di uint32, isTarget bool) {
	var syCaP, syCaD float32
	pt.SynCa(ctx, si, ri, di, &syCaP, &syCaD)
	dtr := syCaD // delta trace, caD reflects entire window
	// save delta trace for GUI
	SynapseTraces[syni, DTr, di] = dtr
	// TrFromCa(prev-multiTrial Integrated Trace, deltaTrace), as a mixing func
	tr := pt.Learn.Trace.TrFromCa(SynapseTraces[syni, Tr, di], dtr)
	// save new trace, updated w/ credit assignment (dependent on Tau in the TrFromCa function
	SynapseTraces[syni, Tr, di] = tr
	// failed con, no learn
	if Synapses[syni, Wt] == 0 {
		return
	}

	// error-driven learning part
	rNrnCaP := Neurons[ri, di, NrnCaP]
	rNrnCaD := Neurons[ri, di, NrnCaD]
	var err float32
	if isTarget {
		err = syCaP - syCaD // for target layers, syn Ca drives error signal directly
	} else {
		err = tr * (rNrnCaP - rNrnCaD) // hiddens: recv NMDA Ca drives error signal w/ trace credit
	}
	// note: trace ensures that nothing changes for inactive synapses..
	// sb immediately -- enters into zero sum.
	// also other types might not use, so need to do this per learning rule
	lwt := Synapses[syni, LWt] // linear weight
	if err > 0 {
		err *= (1 - lwt)
	} else {
		err *= lwt
	}

	// hebbian-learning part
	sNrnCap := Neurons[si, di, NrnCaP]
	savg := 0.5 + pt.Hip.SAvgCor*(pt.Hip.SNominal-0.5)
	savg = 0.5 / math32.Max(pt.Hip.SAvgThr, savg) // keep this Sending Average Correction term within bounds (SAvgThr)
	hebb := rNrnCaP * (sNrnCap*(savg-lwt) - (1-sNrnCap)*lwt)

	// setting delta weight (note: impossible to be CTCtxtPath)
	dwt := Neurons[ri, di, RLRate] * pt.Learn.LRate.Eff * (pt.Hip.Hebb*hebb + pt.Hip.Err*err)
	SynapseTraces[syni, DiDWt, di] = dwt
}

// DWtSynBLA computes the weight change (learning) at given synapse for BLAPath type.
// Like the BG Matrix learning rule, a synaptic tag "trace" is established at CS onset (ACh)
// and learning at US / extinction is a function of trace * delta from US activity
// (temporal difference), which limits learning.
func (pt *PathParams) DWtSynBLA(ctx *Context, syni, si, ri, lpi, pi, di uint32) {
	dwt := float32(0)
	ach := GlobalScalars[GvACh, di]
	if GlobalScalars[GvHasRew, di] > 0 { // learn and reset
		ract := Neurons[ri, di, CaSpkD]
		if ract < pt.Learn.Trace.LearnThr {
			ract = 0
		}
		tr := SynapseTraces[syni, Tr, di]
		ustr := pt.BLA.USTrace
		tr = ustr*Neurons[si, di, Burst] + (1.0-ustr)*tr
		delta := Neurons[ri, di, CaSpkP] - Neurons[ri, di, SpkPrv]
		if delta < 0 { // neg delta learns slower in Acq, not Ext
			delta *= pt.BLA.NegDeltaLRate
		}
		dwt = tr * delta * ract
		SynapseTraces[syni, Tr, di] = 0.0
	} else if ach > pt.BLA.AChThr {
		// note: the former NonUSLRate parameter is not used -- Trace update Tau replaces it..  elegant
		dtr := ach * Neurons[si, di, Burst]
		SynapseTraces[syni, DTr, di] = dtr
		tr := pt.Learn.Trace.TrFromCa(SynapseTraces[syni, Tr, di], dtr)
		SynapseTraces[syni, Tr, di] = tr
	} else {
		SynapseTraces[syni, DTr, di] = 0.0
	}
	lwt := Synapses[syni, LWt]
	if dwt > 0 {
		dwt *= (1 - lwt)
	} else {
		dwt *= lwt
	}
	SynapseTraces[syni, DiDWt, di] = Neurons[ri, di, RLRate] * pt.Learn.LRate.Eff * dwt
}

// DWtSynRWPred computes the weight change (learning) at given synapse,
// for the RWPredPath type
func (pt *PathParams) DWtSynRWPred(ctx *Context, syni, si, ri, lpi, pi, di uint32) {
	// todo: move all of this into rn.RLRate
	lda := GlobalScalars[GvDA, di]
	da := lda
	lr := pt.Learn.LRate.Eff
	eff_lr := lr
	if NeuronIxs[ri, NrnNeurIndex] == 0 {
		if Neurons[ri, di, Ge] > Neurons[ri, di, Act] && da > 0 { // clipped at top, saturate up
			da = 0
		}
		if Neurons[ri, di, Ge] < Neurons[ri, di, Act] && da < 0 { // clipped at bottom, saturate down
			da = 0
		}
		if da < 0 {
			eff_lr *= pt.RLPred.OppSignLRate
		}
	} else {
		eff_lr = -eff_lr                                          // negative case
		if Neurons[ri, di, Ge] > Neurons[ri, di, Act] && da < 0 { // clipped at top, saturate up
			da = 0
		}
		if Neurons[ri, di, Ge] < Neurons[ri, di, Act] && da > 0 { // clipped at bottom, saturate down
			da = 0
		}
		if da >= 0 {
			eff_lr *= pt.RLPred.OppSignLRate
		}
	}

	dwt := da * Neurons[si, di, CaSpkP] // no recv unit activation
	SynapseTraces[syni, DiDWt, di] = eff_lr * dwt
}

// DWtSynTDPred computes the weight change (learning) at given synapse,
// for the TDPredPath type
func (pt *PathParams) DWtSynTDPred(ctx *Context, syni, si, ri, lpi, pi, di uint32) {
	// todo: move all of this into rn.RLRate
	lda := GlobalScalars[GvDA, di]
	da := lda
	lr := pt.Learn.LRate.Eff
	eff_lr := lr
	ni := NeuronIxs[ri, NrnNeurIndex]
	if ni == 0 {
		if da < 0 {
			eff_lr *= pt.RLPred.OppSignLRate
		}
	} else {
		eff_lr = -eff_lr
		if da >= 0 {
			eff_lr *= pt.RLPred.OppSignLRate
		}
	}

	dwt := da * Neurons[si, di, SpkPrv] // no recv unit activation, prior trial act
	SynapseTraces[syni, DiDWt, di] = eff_lr * dwt
}

// DWtSynVSMatrix computes the weight change (learning) at given synapse,
// for the VSMatrixPath type.
func (pt *PathParams) DWtSynVSMatrix(ctx *Context, syni, si, ri, lpi, pi, di uint32) {
	// note: rn.RLRate already has BurstGain * ACh * DA * (D1 vs. D2 sign reversal) factored in.

	hasRew := GlobalScalars[GvHasRew, di] > 0
	ach := GlobalScalars[GvACh, di]
	if !hasRew && ach < 0.1 {
		SynapseTraces[syni, DTr, di] = 0.0
		return
	}
	rlr := Neurons[ri, di, RLRate]

	rplus := Neurons[ri, di, CaSpkP]
	rminus := Neurons[ri, di, CaSpkD]
	sact := Neurons[si, di, CaSpkD]
	dtr := ach * (pt.Matrix.Delta * sact * (rplus - rminus))
	if rminus > pt.Learn.Trace.LearnThr { // key: prevents learning if < threshold
		dtr += ach * (pt.Matrix.Credit * sact * rminus)
	}
	if hasRew {
		tr := SynapseTraces[syni, Tr, di]
		if pt.Matrix.VSRewLearn.IsTrue() {
			tr += (1 - GlobalScalars[GvGoalMaint, di]) * dtr
		}
		dwt := rlr * pt.Learn.LRate.Eff * tr
		SynapseTraces[syni, DiDWt, di] = dwt
		SynapseTraces[syni, Tr, di] = 0.0
		SynapseTraces[syni, DTr, di] = 0.0
	} else {
		dtr *= rlr
		SynapseTraces[syni, DTr, di] = dtr
		SynapseTraces[syni, Tr, di] += dtr
	}
}

// DWtSynDSMatrix computes the weight change (learning) at given synapse,
// for the DSMatrixPath type.
func (pt *PathParams) DWtSynDSMatrix(ctx *Context, syni, si, ri, lpi, pi, di uint32) {
	// note: rn.RLRate already has ACh * DA * (D1 vs. D2 sign reversal) factored in.

	rlr := Neurons[ri, di, RLRate]
	if GlobalScalars[GvHasRew, di] > 0 { // US time -- use DA and current recv activity
		tr := SynapseTraces[syni, Tr, di]
		dwt := rlr * pt.Learn.LRate.Eff * tr
		SynapseTraces[syni, DiDWt, di] = dwt
		SynapseTraces[syni, Tr, di] = 0.0
		SynapseTraces[syni, DTr, di] = 0.0
	} else {
		pfmod := pt.Matrix.BasePF + Neurons[ri, di, GModSyn]
		rplus := Neurons[ri, di, CaSpkP]
		rminus := Neurons[ri, di, CaSpkD]
		sact := Neurons[si, di, CaSpkD]
		dtr := rlr * (pt.Matrix.Delta * sact * (rplus - rminus))
		if rminus > pt.Learn.Trace.LearnThr { // key: prevents learning if < threshold
			dtr += rlr * (pt.Matrix.Credit * pfmod * sact * rminus)
		}
		SynapseTraces[syni, DTr, di] = dtr
		SynapseTraces[syni, Tr, di] += dtr
	}
}

// DWtSynVSPatch computes the weight change (learning) at given synapse,
// for the VSPatchPath type.
func (pt *PathParams) DWtSynVSPatch(ctx *Context, syni, si, ri, lpi, pi, di uint32) {
	ract := Neurons[ri, di, SpkPrv] // t-1
	if ract < pt.Learn.Trace.LearnThr {
		ract = 0
	}
	// note: rn.RLRate already has ACh * DA * (D1 vs. D2 sign reversal) factored in.
	// and also the logic that non-positive DA leads to weight decreases.
	sact := Neurons[si, di, SpkPrv] // t-1
	dwt := Neurons[ri, di, RLRate] * pt.Learn.LRate.Eff * sact * ract
	SynapseTraces[syni, DiDWt, di] = dwt
}

//////// WtFromDWt

// DWtFromDi updates DWt from data parallel DiDWt values
func (pt *PathParams) DWtFromDi(ctx *Context, syni uint32) {
	dwt := float32(0)
	for di := uint32(0); di < ctx.NData; di++ {
		dwt += SynapseTraces[syni, DiDWt, di]
	}
	Synapses[syni, DWt] += dwt
}

// DWtSubMean subtracts the mean for given recv neuron ri,
// for pathways that have SubMean > 0.
// This is called on *receiving* pathways, prior to WtFromDwt.
func (pt *PathParams) DWtSubMean(ctx *Context, pti, ri, lni uint32) {
	if pt.Learn.Learn.IsFalse() {
		return
	}
	sm := pt.Learn.Trace.SubMean
	if sm == 0 { // note default is now 0, so don't exclude Target layers, which should be 0
		return
	}
	cni := pt.Indexes.RecvConSt + lni
	synn := PathRecvCon[cni, Nitems]

	if synn < 1 {
		return
	}
	synst := pt.Indexes.RecvSynSt + PathRecvCon[cni, StartOff]

	sumDWt := float32(0)
	nnz := 0 // non-zero
	for ci := uint32(0); ci < synn; ci++ {
		syni := RecvSynIxs.Value(int(synst + ci))
		dw := Synapses[syni, DWt]
		if dw != 0 {
			sumDWt += dw
			nnz++
		}
	}
	if nnz <= 1 {
		return
	}
	sumDWt /= float32(nnz)
	for ci := uint32(0); ci < synn; ci++ {
		syni := RecvSynIxs.Value(int(synst + ci))
		if Synapses[syni, DWt] != 0 {
			Synapses[syni, DWt] += -sm * sumDWt
		}
	}
}

// WtFromDWtSyn is the overall entry point for updating weights from weight changes.
func (pt *PathParams) WtFromDWtSyn(ctx *Context, syni uint32) {
	switch pt.Type {
	case RWPath:
		pt.WtFromDWtSynNoLimits(ctx, syni)
	case TDPredPath:
		pt.WtFromDWtSynNoLimits(ctx, syni)
	case BLAPath:
		pt.WtFromDWtSynNoLimits(ctx, syni)
	case HipPath:
		pt.WtFromDWtSynNoLimits(ctx, syni)
	default:
		pt.WtFromDWtSynCortex(ctx, syni)
	}
}

// WtFromDWtSynCortex updates weights from dwt changes
func (pt *PathParams) WtFromDWtSynCortex(ctx *Context, syni uint32) {
	dwt := Synapses[syni, DWt]
	Synapses[syni, DSWt] += dwt
	wt := Synapses[syni, Wt]
	lwt := Synapses[syni, LWt]

	pt.SWts.WtFromDWt(&wt, &lwt, dwt, Synapses[syni, SWt])
	Synapses[syni, DWt] = 0.0
	Synapses[syni, Wt] = wt
	Synapses[syni, LWt] = lwt
	// pj.Com.Fail(&sy.Wt, sy.SWt) // skipping for now -- not useful actually
}

// WtFromDWtSynNoLimits -- weight update without limits
func (pt *PathParams) WtFromDWtSynNoLimits(ctx *Context, syni uint32) {
	dwt := Synapses[syni, DWt]
	if dwt == 0 {
		return
	}
	Synapses[syni, Wt] += dwt
	if Synapses[syni, Wt] < 0 {
		Synapses[syni, Wt] = 0.0
	}
	Synapses[syni, LWt] = Synapses[syni, Wt]
	Synapses[syni, DWt] = 0.0
}

// SlowAdapt does the slow adaptation: SWt learning and SynScale
func (pt *PathParams) SlowAdapt(ctx *Context, rlay *LayerParams, pti, ri, lni uint32) {
	pt.SWtFromWt(ctx, rlay, pti, ri, lni)
	pt.SynScale(ctx, rlay, pti, ri, lni)
}

// SWtFromWt updates structural, slowly adapting SWt value based on
// accumulated DSWt values, which are zero-summed with additional soft bounding
// relative to SWt limits.
func (pt *PathParams) SWtFromWt(ctx *Context, rlay *LayerParams, pti, ri, lni uint32) {
	if pt.Learn.Learn.IsFalse() || pt.SWts.Adapt.On.IsFalse() {
		return
	}
	if rlay.IsTarget() {
		return
	}
	mx := pt.SWts.Limit.Max
	mn := pt.SWts.Limit.Min
	lr := pt.SWts.Adapt.LRate

	cni := pt.Indexes.RecvConSt + lni
	synn := PathRecvCon[cni, Nitems]
	synst := pt.Indexes.RecvSynSt + PathRecvCon[cni, StartOff]

	avgDWt := float32(0)
	for ci := uint32(0); ci < synn; ci++ {
		syni := RecvSynIxs.Value(int(synst + ci))
		swt := Synapses[syni, SWt]
		// softbound for SWt
		if Synapses[syni, DSWt] >= 0 {
			Synapses[syni, DSWt] *= (mx - swt)
		} else {
			Synapses[syni, DSWt] *= (swt - mn)
		}
		avgDWt += Synapses[syni, DSWt]
	}
	avgDWt /= float32(synn)
	avgDWt *= pt.SWts.Adapt.SubMean
	for ci := uint32(0); ci < synn; ci++ {
		syni := RecvSynIxs.Value(int(synst + ci))
		Synapses[syni, SWt] += lr * (Synapses[syni, DSWt] - avgDWt)
		swt := Synapses[syni, SWt]
		Synapses[syni, DSWt] = 0.0
		Synapses[syni, LWt] = pt.SWts.LWtFromWts(Synapses[syni, Wt], swt)
		Synapses[syni, Wt] = pt.SWts.WtValue(swt, Synapses[syni, LWt])
	}
}

// SynScale performs synaptic scaling based on running average activation vs. targets.
// Layer-level AvgDifFromTrgAvg function must be called first.
func (pt *PathParams) SynScale(ctx *Context, rlay *LayerParams, pti, ri, lni uint32) {
	if pt.Learn.Learn.IsFalse() || pt.IsInhib() {
		return
	}
	if !rlay.IsLearnTrgAvg() {
		return
	}
	lr := rlay.Learn.TrgAvgAct.SynScaleRate

	cni := pt.Indexes.RecvConSt + lni
	synn := PathRecvCon[cni, Nitems]
	synst := pt.Indexes.RecvSynSt + PathRecvCon[cni, StartOff]
	adif := -lr * NeuronAvgs[ri, AvgDif]
	for ci := uint32(0); ci < synn; ci++ {
		syni := RecvSynIxs.Value(int(synst + ci))
		lwt := Synapses[syni, LWt]
		swt := Synapses[syni, SWt]
		if adif >= 0 { // key to have soft bounding on lwt here!
			Synapses[syni, LWt] += (1 - lwt) * adif * swt
		} else {
			Synapses[syni, LWt] += lwt * adif * swt
		}
		Synapses[syni, Wt] = pt.SWts.WtValue(swt, Synapses[syni, LWt])
	}
}

//gosl:end

// LRateMod sets the LRate modulation parameter for Paths, which is
// for dynamic modulation of learning rate (see also LRateSched).
// Updates the effective learning rate factor accordingly.
func (pt *Path) LRateMod(mod float32) {
	pt.Params.Learn.LRate.Mod = mod
	pt.Params.Learn.LRate.Update()
}

// LRateSched sets the schedule-based learning rate multiplier.
// See also LRateMod.
// Updates the effective learning rate factor accordingly.
func (pt *Path) LRateSched(sched float32) {
	pt.Params.Learn.LRate.Sched = sched
	pt.Params.Learn.LRate.Update()
}
