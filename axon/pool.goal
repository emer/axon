// Copyright (c) 2019, The Emergent Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package axon

import (
	"log"
	"sync/atomic"
	"cogentcore.org/lab/base/atomicx"
	"cogentcore.org/core/math32"
	"github.com/emer/axon/v2/fsfffb"
)

//gosl:start
//gosl:import "github.com/emer/axon/v2/fsfffb"

type PoolIndexVars int32 //enums:enum

const (
	// PoolNeurSt is the starting layer-wise index within the list
	// of neurons in this pool.
	// Add layer starting neuron index (NeurSt) to get index into global
	// network neurons list.
	PoolNeurSt PoolIndexVars = iota

	// PoolNeurEd is the ending (exclusive) layer-wise index within the list
	// of neurons in this pool.
	// Add layer starting neuron index (NeurSt) to get index into global
	// network neurons list.
	PoolNeurEd

	// PoolLayerIdx is the layer index for this pool.
	PoolLayerIdx

	// PoolIsLayer is true (> 0) if this pool represents the entire layer,
	// which is always the first pool in the list of pools for a layer.
	PoolIsLayer
)

// PoolIntVars are int32 pool variables, for computing fsfffb inhibition etc.
// Note that we use int32 instead of uint32 so that overflow errors can be detected.
// See [PoolVars] for float32 variables.
type PoolIntVars int32 //enums:enum

const (
	// Clamped if true (!=0), this layer is hard-clamped and should
	// use GeExts exclusively for PV.
	Clamped PoolIntVars = iota

	// PoolGated is true (> 0) if this pool gated (for [MatrixLayer], [BGThalLayer])
	PoolGated

	// FFsRawInt is the int32 atomic add compatible integration of [fsfffb.FFsRaw].
	FFsRawInt

	// FBsRawInt is the int32 atomic add compatible integration of [fsfffb.FBsRaw].
	FBsRawInt

	// GeExtRawInt is the int32 atomic add compatible integration of [fsfffb.GeExtRaw].
	GeExtRawInt

	// PoolIntAvgMaxStart is the starting point for int32 AvgMax variables.
	// Use AvgMaxIntVarIndex to get the relevant variable index.
	// There are only values for Cycle phase, for the different variables.
	PoolIntAvgMaxStart
)

// AvgMax are Avg and Max
type AvgMax int32 //enums:enum

const (
	Avg AvgMax = iota
	Max
)

// AvgMaxPhases are the different Phases over which AvgMax values are tracked.
type AvgMaxPhases int32 //enums:enum -trim-prefix AM

const (
	// Cycle is the current cycle, which is the source for the rest.
	AMCycle AvgMaxPhases = iota

	// Minus is at the end of the minus phase.
	AMMinus

	// Plus is at the end of the plus phase.
	AMPlus

	// Prev is at the end of the previous plus phase.
	AMPrev
)

// AvgMaxVars are the different Neuron variables for which [AvgMaxPhases]
// is computed.
type AvgMaxVars int32 //enums:enum -trim-prefix AM

const (
	// CaP is the primary variable for tracking overall pool activity
	// over a recent timescale, integrated at roughly 40 msec time constant.
	AMCaP AvgMaxVars = iota

	// CaD is a slower moving activation signal, capable of reflecting
	// activity over the entire trial.
	AMCaD

	// CaPMax is the maximum CaP over the trial of processing.
	AMCaPMax

	// Act is the computed rate-code equivalent of current spike rate.
	AMAct

	// GeInt is the integrated running-average value of excitatory conductance.
	AMGeInt

	// GiInt is the integrated running-average value of inhibitory conductance.
	AMGiInt

	// AvgDif is the integrated AvgDif between ActPct - TrgAvg.
	// Only the Plus phase is used.
	AMAvgDif
)

const (
	// poolFloatAvgMaxStart is the starting index for AvgMax float32 variables.
	poolFloatAvgMaxStart = fsfffb.InhibVarsN
	
	PoolVarsN = poolFloatAvgMaxStart + fsfffb.InhibVars(int32(AvgMaxVarsN) * int32(AvgMaxN)*int32(AvgMaxPhasesN))
	
	PoolIntVarsTot = PoolIntAvgMaxStart + PoolIntVars(int32(AvgMaxVarsN) * int32(AvgMaxN))
)

// avgMaxToNeuron is the mapping from AvgMaxVars to neuron vars.
var avgMaxToNeuron = [AMAvgDif]NeuronVars{CaP, CaD, CaPMax, Act, GeInt, GiInt}

// AvgMaxVarIndex returns the variable index for accessing
// [Pools] AvgMax float32 variables.
func AvgMaxVarIndex(vr AvgMaxVars, phase AvgMaxPhases, am AvgMax) uint32 {
	return uint32(poolFloatAvgMaxStart) + uint32(vr)*uint32(AvgMaxN)*uint32(AvgMaxPhasesN) + uint32(phase)*uint32(AvgMaxN) + uint32(am)
}

// AvgMaxIntVarIndex returns the variable index for accessing
// [Pools] AvgMax int32 variables.  Avg = Sum actually.
// There are only values for the Cycle phase level.
func AvgMaxIntVarIndex(vr AvgMaxVars, am AvgMax) uint32 {
	return uint32(PoolIntAvgMaxStart) + uint32(vr)*uint32(AvgMaxN) + uint32(am)
}

// PoolAvgMax returns an AvgMax value for given variable, phase,
// and Avg or Max, for given pool index and data index.
func PoolAvgMax(vr AvgMaxVars, phase AvgMaxPhases, am AvgMax, pi, di uint32) float32 {
	return Pools[pi, di, AvgMaxVarIndex(vr, phase, am)]	
}

// PoolNNeurons returns the number of neurons in the given pool.
// pi = global pool index.
func PoolNNeurons(pi uint32) int32 {
	return int32(PoolIxs[pi, PoolNeurEd] - PoolIxs[pi, PoolNeurSt])
}

// PoolAvgMaxInit initializes the AvgMax Int accumulators for Cycle vals
// for update start. always left init'd so generally unnecessary.
// pi = global pool index.
func PoolAvgMaxInit(pi, di uint32) {
	for vr := range AMAvgDif {
		PoolsInt[pi, di, AvgMaxIntVarIndex(vr, Avg)] = 0
		PoolsInt[pi, di, AvgMaxIntVarIndex(vr, Max)] = 0
	}
}

// PoolAvgMaxZero initializes all the AvgMax values to zero.
// pi = global pool index.
func PoolAvgMaxZero(pi, di uint32) {
	PoolAvgMaxInit(pi, di)
	for vr := range AMAvgDif {
		for ph := range AvgMaxPhasesN {
			Pools[pi, di, AvgMaxVarIndex(vr, ph, Avg)] = 0.0
			Pools[pi, di, AvgMaxVarIndex(vr, ph, Max)] = 0.0
		}
	}
}

// PoolAvgMaxUpdateVar updates the AvgMax value based on given value.
// pi = global pool index.
func PoolAvgMaxUpdateVar(vr AvgMaxVars, pi, di uint32, val float32) {
	n := float32(PoolNNeurons(pi))
	floatToInt := float32(uint32(1) << 20)
	floatToSum := floatToInt / n
	vis := AvgMaxIntVarIndex(vr, Avg)
	vim := AvgMaxIntVarIndex(vr, Max)
	atomic.AddInt32(&PoolsInt[pi, di, vis], int32(val * floatToSum))
	atomicx.MaxInt32(&PoolsInt[pi, di, vim], int32(val * floatToInt))
}

// PoolAvgMaxUpdateVarNonAtomic updates the AvgMax value based on given value.
// non-atomic version: only when explicitly looping over neurons.
// pi = global pool index.
func PoolAvgMaxUpdateVarNonAtomic(vr AvgMaxVars, pi, di uint32, val float32) {
	n := float32(PoolNNeurons(pi))
	floatToInt := float32(uint32(1) << 20)
	floatToSum := floatToInt / n
	vis := AvgMaxIntVarIndex(vr, Avg)
	vim := AvgMaxIntVarIndex(vr, Max)
	PoolsInt[pi, di, vis] += int32(val * floatToSum)
	PoolsInt[pi, di, vim] = max(PoolsInt[pi, di, vim], int32(val * floatToInt))
}

// PoolAvgMaxUpdate updates the AvgMax values based on current neuron values.
// pi = global pool index.
func PoolAvgMaxUpdate(pi, di, ni uint32) {
	PoolAvgMaxUpdateVar(AMCaP, pi, di, math32.Abs(Neurons[ni, di, avgMaxToNeuron[AMCaP]]))
	PoolAvgMaxUpdateVar(AMCaD, pi, di, math32.Abs(Neurons[ni, di, avgMaxToNeuron[AMCaD]]))
	PoolAvgMaxUpdateVar(AMCaPMax, pi, di, math32.Abs(Neurons[ni, di, avgMaxToNeuron[AMCaPMax]]))
	PoolAvgMaxUpdateVar(AMAct, pi, di, math32.Abs(Neurons[ni, di, avgMaxToNeuron[AMAct]]))
	PoolAvgMaxUpdateVar(AMGeInt, pi, di, math32.Abs(Neurons[ni, di, avgMaxToNeuron[AMGeInt]]))
	PoolAvgMaxUpdateVar(AMGiInt, pi, di, math32.Abs(Neurons[ni, di, avgMaxToNeuron[AMGiInt]]))
}

// PoolAvgMaxCalcVar does Calc on Cycle level, and re-inits, for given Var
func PoolAvgMaxCalcVar(vr AvgMaxVars, pi, di uint32) {
	floatFromInt := float32(1.0) / float32(uint32(1) << 20)
	vis := AvgMaxIntVarIndex(vr, Avg)
	sum := PoolsInt[pi, di, vis] 
	if sum < 0 {
		//gosl:end
		log.Println("PoolAvgMaxCalc overflow in Sum", "pi:", pi, "di:", di, "sum:", sum)
		//gosl:start
		sum = int32(uint32(1) << 20)
	}
	Pools[pi, di, AvgMaxVarIndex(vr, AMCycle, Avg)] = float32(sum) * floatFromInt
	PoolsInt[pi, di, vis] = 0 
	vim := AvgMaxIntVarIndex(vr, Max)	
	mx := PoolsInt[pi, di, vim] 
	if mx < 0 {
		//gosl:end
		log.Println("PoolAvgMaxCalc overflow in Max", "pi:", pi, "di:", di, "max:", mx)
		//gosl:start
		mx = int32(uint32(1) << 20)
	}
	PoolsInt[pi, di, vim] = 0 
	Pools[pi, di, AvgMaxVarIndex(vr, AMCycle, Max)] = float32(mx) * floatFromInt
}

// PoolAvgMaxCalc does Calc on Cycle level, and re-inits
func PoolAvgMaxCalc(pi, di uint32) {
	for vr := range AMAvgDif { // don't do AvgDif
		PoolAvgMaxCalcVar(vr, pi, di)
	}
}

// PoolAvgDifInit initializes the AvgMax AvgDif Int accumulators for Cycle vals
// for update start. always left init'd so generally unnecessary.
// pi = global pool index.
func PoolAvgDifInit(pi, di uint32) {
	PoolsInt[pi, di, AvgMaxIntVarIndex(AMAvgDif, Avg)] = 0
	PoolsInt[pi, di, AvgMaxIntVarIndex(AMAvgDif, Max)] = 0
}

// PoolAvgDifUpdate updates the AvgMax values for AvgDif Var.
// pi = global pool index.
func PoolAvgDifUpdate(pi, di uint32, avdif float32) {
	PoolAvgMaxUpdateVarNonAtomic(AMAvgDif, pi, di, avdif)
}

// PoolAvgDifCalc does Calc on Cycle level, and re-inits
func PoolAvgDifCalc(pi, di uint32) {
	PoolAvgMaxCalcVar(AMAvgDif, pi, di)
}

// PoolCycleToMinus grabs current Cycle values into the Minus phase values,
// and Plus values into Prev.
func PoolCycleToMinus(pi, di uint32) {
	for vr := range AMAvgDif { // don't do AvgDif
		Pools[pi, di, AvgMaxVarIndex(vr, AMMinus, Avg)] = Pools[pi, di, AvgMaxVarIndex(vr, AMCycle, Avg)] 
		Pools[pi, di, AvgMaxVarIndex(vr, AMMinus, Max)] = Pools[pi, di, AvgMaxVarIndex(vr, AMCycle, Max)] 

		Pools[pi, di, AvgMaxVarIndex(vr, AMPrev, Avg)] = Pools[pi, di, AvgMaxVarIndex(vr, AMPlus, Avg)] 
		Pools[pi, di, AvgMaxVarIndex(vr, AMPrev, Max)] = Pools[pi, di, AvgMaxVarIndex(vr, AMPlus, Max)] 
	}
}

// PoolCycleToPlus grabs current Cycle values into the Plus phase values.
func PoolCycleToPlus(pi, di uint32) {
	for vr := range AMAvgDif { // don't do AvgDif
		Pools[pi, di, AvgMaxVarIndex(vr, AMPlus, Avg)] = Pools[pi, di, AvgMaxVarIndex(vr, AMCycle, Avg)] 
		Pools[pi, di, AvgMaxVarIndex(vr, AMPlus, Max)] = Pools[pi, di, AvgMaxVarIndex(vr, AMCycle, Max)] 
	}
}

// PoolInit is callled during InitActs
func PoolInit(pi, di uint32) {
	PoolInhibInit(pi, di)
	PoolsInt[pi, di, PoolGated] = 0
	PoolAvgMaxZero(pi, di)
}

// PoolPoolGi computes the total inhibitory conductance for the pool.
func PoolPoolGi(ctx *Context, pi, di uint32) {
	if PoolIxs[pi, PoolIsLayer] > 0 {
		return
	}
	li := PoolIxs[pi, PoolLayerIdx]
	PoolAvgMaxCalc(pi, di)
	PoolInhibIntToRaw(pi, di)
	ly := GetLayers(uint32(li))
	giMult := LayerStates[li, di, LayerGiMult]
	lyIsOn := (ly.Inhib.Layer.On == 1)
	lpi := ly.PoolIndex(uint32(0))
	ly.SubPoolGiFromSpikes(ctx, lpi, pi, di, lyIsOn, giMult)
}

//gosl:end

// IndexToAvgMaxVar returns the AvgMaxVar indexes from overall Pool variable index.
func IndexToAvgMaxVar(vi uint32) (vr AvgMaxVars, phase AvgMaxPhases, am AvgMax) {
	vi -= uint32(poolFloatAvgMaxStart)
	vr = AvgMaxVars(vi / (uint32(AvgMaxN)*uint32(AvgMaxPhasesN)))
	rmdr := vi % (uint32(AvgMaxN)*uint32(AvgMaxPhasesN))
	phase = AvgMaxPhases(rmdr / uint32(AvgMaxN))
	am = AvgMax(rmdr % uint32(AvgMaxN))
	return
}

func PoolVarName(vi uint32) string {
	if vi < uint32(fsfffb.InhibVarsN) {
		return fsfffb.InhibVars(vi).String()
	}
	vr, phase, am := IndexToAvgMaxVar(vi)
	return vr.String() + "_" + phase.String() + "_" + am.String()
}

// IndexToAvgMaxIntVar returns the AvgMaxVar indexes from overall PoolInt variable index.
func IndexToAvgMaxIntVar(vi uint32) (vr AvgMaxVars, am AvgMax) {
	vi -= uint32(PoolIntAvgMaxStart)
	vr = AvgMaxVars(vi / uint32(AvgMaxN))
	am = AvgMax(vi % uint32(AvgMaxN))
	return
}

func PoolIntVarName(vi uint32) string {
	if vi < uint32(PoolIntAvgMaxStart) {
		return PoolIntVars(vi).String()
	}
	vr, am := IndexToAvgMaxIntVar(vi)
	return vr.String() + "_" + am.String()
}

// TestValues returns a map of CaD.Avg, which provides an
// integrated summary of pool activity for testing
func PoolTestValues(pi, di uint32, layKey string, vals map[string]float32) {
	vals[layKey+" CaD Avg"] = PoolAvgMax(AMCaD, AMCycle, Avg, pi, di)
}

