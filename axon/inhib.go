// Code generated by "goal build"; DO NOT EDIT.
//line inhib.goal:1
// Copyright (c) 2019, The Emergent Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package axon

import (
	"log"
	"sync/atomic"

	"cogentcore.org/core/math32"
	"cogentcore.org/lab/gosl/slbool"
	"github.com/emer/axon/v2/fsfffb"
)

//gosl:start
//gosl:import "github.com/emer/axon/v2/fsfffb"

////////  ActAvgParams

// ActAvgParams represents the nominal average activity levels in the layer
// and parameters for adapting the computed Gi inhibition levels to maintain
// average activity within a target range.
type ActAvgParams struct {

	// Nominal is the estimated average activity level in the layer, which is
	// used in computing the scaling factor on sending pathways from this layer.
	// In general it should roughly match the layer ActAvg.ActMAvg value, which
	// can be logged using the axon.LogAddDiagnosticItems function.
	// If layers receiving from this layer are not getting enough Ge excitation,
	// then this Nominal level can be lowered to increase pathway strength
	// (fewer active neurons means each one contributes more, so scaling factor
	//
	//	goes as the inverse of activity level), or vice-versa if Ge is too high.
	//
	// It is also the basis for the target activity level used for the AdaptGi
	//
	//	option: see the Offset which is added to this value.
	Nominal float32 `min:"0" step:"0.01"`

	// RTThr is the reaction time (RT) threshold activity level in the layer,
	// in terms of the maximum CaP level of any neuron in the layer. The
	// LayerStates LayerRT value is recorded for the cycle at which this
	// level is exceeded within a theta cycle, after Acts.Dt.MaxCycStart cycles.
	RTThr float32 `default:"0.5"`

	// AdaptGi enables adapting of layer inhibition Gi multiplier factor
	// (stored in layer GiMult value) to maintain a target layer level of
	// ActAvg.Nominal. This generally works well and improves the long-term
	// stability of the models. It is not enabled by default because it depends
	// on having established a reasonable Nominal + Offset target activity level.
	AdaptGi slbool.Bool

	// Offset is added to Nominal for the target average activity that drives
	// adaptation of Gi for this layer.  Typically the Nominal level is good,
	// but sometimes Nominal must be adjusted up or down to achieve desired Ge
	// scaling, so this Offset can compensate accordingly.
	Offset float32 `default:"0" min:"0" step:"0.01"`

	// HiTol is the tolerance for higher than Target target average activation
	// as a proportion of that target value (0 = exactly the target, 0.2 = 20%
	// higher than target). Only once activations move outside this tolerance
	//
	//	are inhibitory values adapted.
	HiTol float32 `default:"0"`

	// LoTol is the tolerance for lower than Target target average activation
	// as a proportion of that target value (0 = exactly the target, 0.5 = 50%
	// lower than target). Only once activations move outside this tolerance are
	//
	//	inhibitory values adapted.
	LoTol float32 `default:"0.8"`

	// AdaptRate is the rate of Gi adaptation as function of
	// AdaptRate * (Target - ActMAvg) / Target. This occurs at spaced intervals
	// determined by Network.SlowInterval value. Slower values such as 0.01 may
	// be needed for large networks and sparse layers.
	AdaptRate float32 `default:"0.1"`

	// AdaptMax is the maximum adaptation step magnitude to take at any point.
	AdaptMax float32 `default:"0.05"`
}

func (aa *ActAvgParams) Update() {
}

func (aa *ActAvgParams) Defaults() {
	aa.Nominal = 0.1
	aa.RTThr = 0.5
	aa.Offset = 0
	aa.HiTol = 0
	aa.LoTol = 0.8
	aa.AdaptRate = 0.1
	aa.AdaptMax = 0.05
	aa.Update()
}

func (aa *ActAvgParams) ShouldDisplay(field string) bool {
	switch field {
	case "Nominal", "AdaptGi":
		return true
	default:
		return aa.AdaptGi.IsTrue()
	}
}

// AvgFromAct updates the running-average activation given average activity level in layer
func (aa *ActAvgParams) AvgFromAct(avg *float32, act float32, dt float32) {
	if act < 0.0001 {
		return
	}
	*avg += dt * (act - *avg)
}

// Adapt adapts the given gi multiplier factor as function of target and actual
// average activation, given current params.
func (aa *ActAvgParams) Adapt(gimult *float32, act float32) bool {
	trg := aa.Nominal + aa.Offset
	del := (act - trg) / trg
	if del < -aa.LoTol || del > aa.HiTol {
		*gimult += math32.Clamp(aa.AdaptRate*del, -aa.AdaptMax, aa.AdaptMax)
		return true
	}
	return false
}

// InhibParams contains all the inhibition computation params and functions for basic Axon.
// This is included in LayerParams to support computation.
// Also includes the expected average activation in the layer, which is used for
// G conductance rescaling and potentially for adapting inhibition over time.
type InhibParams struct {

	// ActAvg has layer-level and pool-level average activation initial values
	// and updating / adaptation thereof.
	// Initial values help determine initial scaling factors.
	ActAvg ActAvgParams `display:"inline"`

	// Layer determines inhibition across the entire layer.
	// Input layers generally use Gi = 0.8 or 0.9, 1.3 or higher for sparse layers.
	// If the layer has sub-pools (4D shape) then this is effectively between-pool inhibition.
	Layer fsfffb.GiParams `display:"inline"`

	// Pool determines inhibition within sub-pools of units, for layers with 4D shape.
	// This is almost always necessary if the layer has sub-pools.
	Pool fsfffb.GiParams `display:"inline"`
}

func (ip *InhibParams) Update() {
	ip.ActAvg.Update()
	ip.Layer.Update()
	ip.Pool.Update()
}

func (ip *InhibParams) Defaults() {
	ip.ActAvg.Defaults()
	ip.Layer.Defaults()
	ip.Pool.Defaults()
	ip.Layer.Gi = 1.1
	ip.Pool.Gi = 1.1
}

// PoolInhib computes FSFFFB inhibition for a pool,
// based on aggregated FFs and FBs spiking values
func PoolInhib(fb *fsfffb.GiParams, pi, di uint32, gimult float32) {
	if fb.On.IsFalse() {
		PoolInhibZero(pi, di)
		return
	}
	Pools.SetAdd(fb.FFAvgDt*(Pools.Value(int(pi), int(di), int(fsfffb.FFs))-Pools.Value(int(pi), int(di), int(fsfffb.FFAvg))), int(pi), int(di), int(fsfffb.FFAvg))

	fsi := Pools.Value(int(pi), int(di), int(fsfffb.FSi))
	fsi = fb.FSiFromFFs(fsi, Pools.Value(int(pi), int(di), int(fsfffb.FFs)), Pools.Value(int(pi), int(di), int(fsfffb.FBs)))
	Pools.Set(fsi, int(pi), int(di), int(fsfffb.FSi))
	clamped := PoolsInt.Value(int(pi), int(di), int(Clamped)) > 0
	Pools.Set(fb.Gi*fb.FS(fsi, Pools.Value(int(pi), int(di), int(fsfffb.GeExts)), clamped), int(pi), int(di), int(fsfffb.FSGi))

	ssf := Pools.Value(int(pi), int(di), int(fsfffb.SSf))
	ssi := Pools.Value(int(pi), int(di), int(fsfffb.SSi))
	fb.SSFromFBs(&ssf, &ssi, Pools.Value(int(pi), int(di), int(fsfffb.FBs)))
	Pools.Set(fb.Gi*fb.SS*ssi, int(pi), int(di), int(fsfffb.SSGi))
	Pools.Set(ssf, int(pi), int(di), int(fsfffb.SSf))
	Pools.Set(ssi, int(pi), int(di), int(fsfffb.SSi))

	Pools.Set(PoolInhibGiFromFSSS(pi, di)+fb.FFPrv*Pools.Value(int(pi), int(di), int(fsfffb.FFAvgPrv)), int(pi), int(di), int(fsfffb.TotalGi))
	PoolInhibSaveOrig(pi, di)
}

func PoolInhibInit(pi, di uint32) {
	PoolInhibInitRaw(pi, di)
	PoolInhibZero(pi, di)
}

// PoolInhibInitRaw clears raw spike counters -- done every cycle prior to accumulating
func PoolInhibInitRaw(pi, di uint32) {
	Pools.Set(0.0, int(pi), int(di), int(fsfffb.FFsRaw))
	Pools.Set(0.0, int(pi), int(di), int(fsfffb.FBsRaw))
	Pools.Set(0.0, int(pi), int(di), int(fsfffb.GeExtRaw))

	PoolsInt.Set(0, int(pi), int(di), int(FFsRawInt))
	PoolsInt.Set(0, int(pi), int(di), int(FBsRawInt))
	PoolsInt.Set(0, int(pi), int(di), int(GeExtRawInt))
}

// PoolInhibZero resets all accumulating inhibition factors to 0
func PoolInhibZero(pi, di uint32) {
	Pools.Set(0.0, int(pi), int(di), int(fsfffb.FFs))
	Pools.Set(0.0, int(pi), int(di), int(fsfffb.FBs))
	Pools.Set(0.0, int(pi), int(di), int(fsfffb.GeExts))
	Pools.Set(0.0, int(pi), int(di), int(fsfffb.FSi))
	Pools.Set(0.0, int(pi), int(di), int(fsfffb.SSi))
	Pools.Set(0.0, int(pi), int(di), int(fsfffb.SSf))
	Pools.Set(0.0, int(pi), int(di), int(fsfffb.FSGi))
	Pools.Set(0.0, int(pi), int(di), int(fsfffb.SSGi))
	Pools.Set(0.0, int(pi), int(di), int(fsfffb.TotalGi))
	Pools.Set(0.0, int(pi), int(di), int(fsfffb.FFAvg))
	Pools.Set(0.0, int(pi), int(di), int(fsfffb.FFAvgPrv))
	Pools.Set(0.0, int(pi), int(di), int(fsfffb.GiOrig))
	Pools.Set(0.0, int(pi), int(di), int(fsfffb.LayGi))
	PoolsInt.Set(0, int(pi), int(di), int(Clamped))
}

// Decay reduces inhibition values by given decay proportion
func PoolInhibDecay(pi, di uint32, decay float32) {
	Pools.Set(Pools.Value(int(pi), int(di), int(fsfffb.FFAvg)), int(pi), int(di), int(fsfffb.FFAvgPrv)) // capture prior to decay

	Pools.SetSub(decay*Pools.Value(int(pi), int(di), int(fsfffb.FFs)), int(pi), int(di), int(fsfffb.FFs))
	Pools.SetSub(decay*Pools.Value(int(pi), int(di), int(fsfffb.FBs)), int(pi), int(di), int(fsfffb.FBs))
	Pools.SetSub(decay*Pools.Value(int(pi), int(di), int(fsfffb.GeExts)), int(pi), int(di), int(fsfffb.GeExts))
	Pools.SetSub(decay*Pools.Value(int(pi), int(di), int(fsfffb.FSi)), int(pi), int(di), int(fsfffb.FSi))
	Pools.SetSub(decay*Pools.Value(int(pi), int(di), int(fsfffb.SSi)), int(pi), int(di), int(fsfffb.SSi))
	Pools.SetSub(decay*Pools.Value(int(pi), int(di), int(fsfffb.SSf)), int(pi), int(di), int(fsfffb.SSf))
	Pools.SetSub(decay*Pools.Value(int(pi), int(di), int(fsfffb.FSGi)), int(pi), int(di), int(fsfffb.FSGi))
	Pools.SetSub(decay*Pools.Value(int(pi), int(di), int(fsfffb.SSGi)), int(pi), int(di), int(fsfffb.SSGi))
	Pools.SetSub(decay*Pools.Value(int(pi), int(di), int(fsfffb.TotalGi)), int(pi), int(di), int(fsfffb.TotalGi))
	Pools.SetSub(decay*Pools.Value(int(pi), int(di), int(fsfffb.FFAvg)), int(pi), int(di), int(fsfffb.FFAvg))
}

// SpikesFromRaw updates spike values from raw, dividing by given number in pool
func PoolInhibSpikesFromRaw(pi, di uint32) {
	fnn := float32(PoolNNeurons(pi))
	Pools.Set(Pools.Value(int(pi), int(di), int(fsfffb.FBsRaw))/fnn, int(pi), int(di), int(fsfffb.FBs))
	Pools.Set(Pools.Value(int(pi), int(di), int(fsfffb.FFsRaw)), int(pi), int(di), int(fsfffb.FFs))
	Pools.Set(Pools.Value(int(pi), int(di), int(fsfffb.GeExtRaw)), int(pi), int(di), int(fsfffb.GeExts))
	PoolInhibInitRaw(pi, di)
}

// SaveOrig saves the current Gi values as original values
func PoolInhibSaveOrig(pi, di uint32) {
	Pools.Set(Pools.Value(int(pi), int(di), int(fsfffb.TotalGi)), int(pi), int(di), int(fsfffb.GiOrig))
}

// GiFromFSSS returns the sum of FSGi and SSGi as overall inhibition
func PoolInhibGiFromFSSS(pi, di uint32) float32 {
	return Pools.Value(int(pi), int(di), int(fsfffb.FSGi)) + Pools.Value(int(pi), int(di), int(fsfffb.SSGi))
}

// LayerMax updates given pool-level inhib values from given layer-level Gi
// with resulting value being the Max of either
func PoolInhibLayerMax(pi, di uint32, liGi float32) {
	Pools.Set(liGi, int(pi), int(di), int(fsfffb.LayGi))
	Pools.Set(math32.Max(Pools.Value(int(pi), int(di), int(fsfffb.TotalGi)), liGi), int(pi), int(di), int(fsfffb.TotalGi))
}

// PoolMax updates given layer-level inhib values from given pool-level
// with resulting value being the Max of either
func PoolInhibPoolMax(pi, di uint32, piGi float32) {
	Pools.Set(math32.Max(Pools.Value(int(pi), int(di), int(fsfffb.TotalGi)), piGi), int(pi), int(di), int(fsfffb.TotalGi))
}

//////// atomic int safe accumulation

// RawIncrInt increments raw values from given neuron-based input values
// for the int-based values (typically use Atomic InterlockedAdd instead)
func PoolInhibRawIncrInt(pi, di uint32, spike, geRaw, geExt float32) {
	floatToInt := float32(uint32(1) << 24)
	fnn := float32(PoolNNeurons(pi))
	atomic.AddInt32(PoolsInt.ValuePtr(int(pi), int(di), int(FBsRawInt)), int32(spike))
	atomic.AddInt32(PoolsInt.ValuePtr(int(pi), int(di), int(FFsRawInt)), int32((geRaw/fnn)*floatToInt))
	atomic.AddInt32(PoolsInt.ValuePtr(int(pi), int(di), int(GeExtRawInt)), int32((geExt/fnn)*floatToInt))
}

// IntToRaw computes int values into float32 raw values
func PoolInhibIntToRaw(pi, di uint32) {
	floatFromInt := 1.0 / float32(uint32(1)<<24)
	fbs := PoolsInt.Value(int(pi), int(di), int(FBsRawInt))
	ffs := PoolsInt.Value(int(pi), int(di), int(FFsRawInt))
	geExt := PoolsInt.Value(int(pi), int(di), int(GeExtRawInt))
	//gosl:end
	floatToInt := int32(1) << 24
	if ffs < 0 {
		log.Println("PoolInhibIntToRaw overflow in FFsRawInt", "pi:", pi, "di:", di, "val:", ffs)
		ffs = floatToInt
	}
	if geExt < 0 {
		log.Println("PoolInhibIntToRaw overflow in GeExtRawInt", "pi:", pi, "di:", di, "val:", geExt)
		geExt = floatToInt
	}
	//gosl:start
	Pools.Set(float32(fbs), int(pi), int(di), int(fsfffb.FBsRaw))
	Pools.Set(float32(ffs)*floatFromInt, int(pi), int(di), int(fsfffb.FFsRaw))
	Pools.Set(float32(geExt)*floatFromInt, int(pi), int(di), int(fsfffb.GeExtRaw))
}

//gosl:end
