// Code generated by "core generate -add-types -add-funcs -gosl"; DO NOT EDIT.

package bgventral

import (
	"cogentcore.org/core/types"
)

var _ = types.AddType(&types.Type{Name: "github.com/emer/axon/v2/sims/bgventral.Modes", IDName: "modes", Doc: "Modes are the looping modes (Stacks) for running and statistics."})

var _ = types.AddType(&types.Type{Name: "github.com/emer/axon/v2/sims/bgventral.Levels", IDName: "levels", Doc: "Levels are the looping levels for running and statistics."})

var _ = types.AddType(&types.Type{Name: "github.com/emer/axon/v2/sims/bgventral.StatsPhase", IDName: "stats-phase", Doc: "StatsPhase is the phase of stats processing for given mode, level.\nAccumulated values are reset at Start, added each Step."})

var _ = types.AddType(&types.Type{Name: "github.com/emer/axon/v2/sims/bgventral.Sim", IDName: "sim", Doc: "Sim encapsulates the entire simulation model, and we define all the\nfunctionality as methods on this struct.  This structure keeps all relevant\nstate information organized and available without having to pass everything around\nas arguments to methods, and provides the core GUI interface (note the view tags\nfor the fields which provide hints to how things should be displayed).", Fields: []types.Field{{Name: "Config", Doc: "simulation configuration parameters -- set by .toml config file and / or args"}, {Name: "Net", Doc: "Net is the network: click to view / edit parameters for layers, paths, etc."}, {Name: "Params", Doc: "Params manages network parameter setting."}, {Name: "Loops", Doc: "Loops are the control loops for running the sim, in different Modes\nacross stacks of Levels."}, {Name: "Envs", Doc: "Envs provides mode-string based storage of environments."}, {Name: "TrainUpdate", Doc: "TrainUpdate has Train mode netview update parameters."}, {Name: "TestUpdate", Doc: "TestUpdate has Test mode netview update parameters."}, {Name: "Root", Doc: "Root is the root tensorfs directory, where all stats and other misc sim data goes."}, {Name: "Stats", Doc: "Stats has the stats directory within Root."}, {Name: "Current", Doc: "Current has the current stats values within Stats."}, {Name: "StatFuncs", Doc: "StatFuncs are statistics functions called at given mode and level,\nto perform all stats computations. phase = Start does init at start of given level,\nand all intialization / configuration (called during Init too)."}, {Name: "GUI", Doc: "GUI manages all the GUI elements"}, {Name: "RandSeeds", Doc: "RandSeeds is a list of random seeds to use for each run."}}})

var _ = types.AddType(&types.Type{Name: "github.com/emer/axon/v2/sims/bgventral.EnvConfig", IDName: "env-config", Doc: "EnvConfig has config params for environment.", Fields: []types.Field{{Name: "Env", Doc: "Env parameters: can set any field/subfield on Env struct,\nusing standard TOML formatting."}, {Name: "ZeroTest", Doc: "test with no ACC activity at all -- params need to prevent gating in this situation too"}}})

var _ = types.AddType(&types.Type{Name: "github.com/emer/axon/v2/sims/bgventral.ParamConfig", IDName: "param-config", Doc: "ParamConfig has config parameters related to sim params.", Fields: []types.Field{{Name: "Tweak", Doc: "Tweak means to perform automated parameter tweaking for\nparameters marked Hypers Tweak = log,incr, or [vals]."}, {Name: "Baseline", Doc: "Baseline for Tweak, if true, first run a baseline with current default params."}, {Name: "DryRun", Doc: "DryRun for Tweak, if true, only print what would be done, don't run."}, {Name: "Script", Doc: "Script is an interpreted script that is run to set parameters in Layer and Path\nsheets, by default using the \"Script\" set name."}, {Name: "Sheet", Doc: "Sheet is the extra params sheet name(s) to use (space separated\nif multiple). Must be valid name as listed in compiled-in params\nor loaded params."}, {Name: "Tag", Doc: "Tag is an extra tag to add to file names and logs saved from this run."}, {Name: "Note", Doc: "Note is additional info to describe the run params etc,\nlike a git commit message for the run."}, {Name: "SaveAll", Doc: "SaveAll will save a snapshot of all current param and config settings\nin a directory named params_<datestamp> (or _good if Good is true),\nthen quit. Useful for comparing to later changes and seeing multiple\nviews of current params."}, {Name: "Good", Doc: "Good is for SaveAll, save to params_good for a known good params state.\nThis can be done prior to making a new release after all tests are passing.\nAdd results to git to provide a full diff record of all params over level."}}})

var _ = types.AddType(&types.Type{Name: "github.com/emer/axon/v2/sims/bgventral.RunConfig", IDName: "run-config", Doc: "RunConfig has config parameters related to running the sim.", Fields: []types.Field{{Name: "GPU", Doc: "GPU uses the GPU for computation; only for testing in this model -- not faster."}, {Name: "GPUDevice", Doc: "GPUDevice selects the gpu device to use."}, {Name: "NData", Doc: "NData is the number of data-parallel items to process in parallel per trial.\nIs significantly faster for both CPU and GPU.  Results in an effective\nmini-batch of learning."}, {Name: "NThreads", Doc: "NThreads is the number of parallel threads for CPU computation;\n0 = use default."}, {Name: "Run", Doc: "Run is the _starting_ run number, which determines the random seed.\nRuns counts up from there. Can do all runs in parallel by launching\nseparate jobs with each starting Run, Runs = 1."}, {Name: "Runs", Doc: "Runs is the total number of runs to do when running Train, starting from Run."}, {Name: "Epochs", Doc: "Epochs is the total number of epochs per run."}, {Name: "Trials", Doc: "Trials is the total number of trials per epoch.\nShould be an even multiple of NData."}, {Name: "Cycles", Doc: "Cycles is the total number of cycles per trial: at least 200."}, {Name: "PlusCycles", Doc: "PlusCycles is the total number of plus-phase cycles per trial. For Cycles=300, use 100."}}})

var _ = types.AddType(&types.Type{Name: "github.com/emer/axon/v2/sims/bgventral.LogConfig", IDName: "log-config", Doc: "LogConfig has config parameters related to logging data.", Fields: []types.Field{{Name: "SaveWeights", Doc: "SaveWeights will save final weights after each run."}, {Name: "Train", Doc: "Train has the list of Train mode levels to save log files for."}, {Name: "Test", Doc: "Test has the list of Test mode levels to save log files for."}}})

var _ = types.AddType(&types.Type{Name: "github.com/emer/axon/v2/sims/bgventral.Config", IDName: "config", Doc: "Config has the overall Sim configuration options.", Fields: []types.Field{{Name: "Name", Doc: "Name is the short name of the sim."}, {Name: "Title", Doc: "Title is the longer title of the sim."}, {Name: "URL", Doc: "URL is a link to the online README or other documentation for this sim."}, {Name: "Doc", Doc: "Doc is brief documentation of the sim."}, {Name: "Includes", Doc: "Includes has a list of additional config files to include.\nAfter configuration, it contains list of include files added."}, {Name: "GUI", Doc: "GUI means open the GUI. Otherwise it runs automatically and quits,\nsaving results to log files."}, {Name: "Debug", Doc: "Debug reports debugging information."}, {Name: "Env", Doc: "Env has environment configuration options."}, {Name: "Params", Doc: "Params has parameter related configuration options."}, {Name: "Run", Doc: "Run has sim running related configuration options."}, {Name: "Log", Doc: "Log has data logging related configuration options."}}})

var _ = types.AddType(&types.Type{Name: "github.com/emer/axon/v2/sims/bgventral.GoNoEnv", IDName: "go-no-env", Doc: "GoNoEnv implements simple Go vs. NoGo input patterns to test BG learning.", Fields: []types.Field{{Name: "Name", Doc: "name of environment -- Train or Test"}, {Name: "Mode", Doc: "training or testing env?"}, {Name: "Trial", Doc: "trial counter -- set by caller for testing"}, {Name: "ManualValues", Doc: "if true, ACCPos and Neg are set manually for testing specific cases;\ndo not generate random vals for training or auto-increment ACCPos / Neg values during test"}, {Name: "ACCPos", Doc: "activation of ACC positive valence -- drives go"}, {Name: "ACCNeg", Doc: "activation of ACC neg valence -- drives nogo"}, {Name: "PosNegThr", Doc: "threshold on diff between ACCPos - ACCNeg for counting as a Go trial"}, {Name: "RewPredLRate", Doc: "learning rate for reward prediction"}, {Name: "RewPredMin", Doc: "minimum rewpred value"}, {Name: "GatedShould", Doc: "reward value for case where it gated and it should have:\nnominally 1 but can lead to over-learning, RPE would decrease over time"}, {Name: "NoGatedShould", Doc: "reward value for case where it did not gate and it should have:\nin real case, would not get anything for this, but 1 is a cheat to improve perf"}, {Name: "GatedShouldnt", Doc: "reward value for case where it gated and it should not have.  should be -1"}, {Name: "NoGatedShouldnt", Doc: "reward value for case where it did not gate and it should not have:\nshould be 0"}, {Name: "TestInc", Doc: "increment in testing activation for test all"}, {Name: "TestReps", Doc: "number of repetitions per testing level"}, {Name: "NUnitsY", Doc: "number of units, Y"}, {Name: "NUnitsX", Doc: "number of units, X"}, {Name: "NUnits", Doc: "total number of units"}, {Name: "PopCode", Doc: "pop code the values in ACCPos and Neg"}, {Name: "Rand", Doc: "random number generator for the env -- all random calls must use this"}, {Name: "RandSeed", Doc: "random seed"}, {Name: "States", Doc: "named states: ACCPos, ACCNeg"}, {Name: "Should", Doc: "true if Pos - Neg > Thr"}, {Name: "Gated", Doc: "true if model gated on this trial"}, {Name: "Match", Doc: "true if gated == should"}, {Name: "Rew", Doc: "reward based on match between Should vs. Gated"}, {Name: "RewPred", Doc: "reward prediction based on incremental learning: RewPredLRate * (Rew - RewPred)"}, {Name: "RPE", Doc: "reward prediction error: Rew - RewPred"}}})

var _ = types.AddFunc(&types.Func{Name: "github.com/emer/axon/v2/sims/bgventral.RunSim", Doc: "RunSim runs the simulation as a standalone app\nwith given configuration.", Args: []string{"cfg"}, Returns: []string{"error"}})

var _ = types.AddFunc(&types.Func{Name: "github.com/emer/axon/v2/sims/bgventral.EmbedSim", Doc: "EmbedSim runs the simulation with default configuration\nembedded within given body element.", Args: []string{"b"}, Returns: []string{"Sim"}})

var _ = types.AddFunc(&types.Func{Name: "github.com/emer/axon/v2/sims/bgventral.NewConfig", Returns: []string{"Config"}})
