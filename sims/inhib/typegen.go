// Code generated by "core generate -add-types -add-funcs"; DO NOT EDIT.

package inhib

import (
	"cogentcore.org/core/types"
)

var _ = types.AddType(&types.Type{Name: "github.com/emer/axon/v2/sims/inhib.ParamConfig", IDName: "param-config", Doc: "ParamConfig has config parameters related to sim params.", Fields: []types.Field{{Name: "InputPct", Doc: "InputPct has the percent of active units in input layer\n(literally number of active units, because input has 100 units total)."}, {Name: "NLayers", Doc: "NLayers is the number of hidden layers to add."}, {Name: "HiddenSize", Doc: "HiddenSize is the size of hidden layers."}, {Name: "Script", Doc: "Script is an interpreted script that is run to set parameters in Layer and Path\nsheets, by default using the \"Script\" set name."}, {Name: "Sheet", Doc: "Sheet is the extra params sheet name(s) to use (space separated\nif multiple). Must be valid name as listed in compiled-in params\nor loaded params."}, {Name: "Tag", Doc: "Tag is an extra tag to add to file names and logs saved from this run."}, {Name: "Note", Doc: "Note is additional info to describe the run params etc,\nlike a git commit message for the run."}, {Name: "SaveAll", Doc: "SaveAll will save a snapshot of all current param and config settings\nin a directory named params_<datestamp> (or _good if Good is true),\nthen quit. Useful for comparing to later changes and seeing multiple\nviews of current params."}, {Name: "Good", Doc: "Good is for SaveAll, save to params_good for a known good params state.\nThis can be done prior to making a new release after all tests are passing.\nAdd results to git to provide a full diff record of all params over level."}}})

var _ = types.AddType(&types.Type{Name: "github.com/emer/axon/v2/sims/inhib.RunConfig", IDName: "run-config", Doc: "RunConfig has config parameters related to running the sim.", Fields: []types.Field{{Name: "GPU", Doc: "GPU uses the GPU for computation, largely for testing purposes here."}, {Name: "GPUDevice", Doc: "GPUDevice selects the gpu device to use."}, {Name: "Trials", Doc: "Trials is the total number of trials of different random patterns to generate."}, {Name: "Cycles", Doc: "Cycles is the total number of cycles per trial: at least 200."}, {Name: "PlusCycles", Doc: "PlusCycles is the total number of plus-phase cycles per trial. For Cycles=300, use 100."}}})

var _ = types.AddType(&types.Type{Name: "github.com/emer/axon/v2/sims/inhib.LogConfig", IDName: "log-config", Doc: "LogConfig has config parameters related to logging data.", Fields: []types.Field{{Name: "Save", Doc: "Save has the list of levels to save log files for."}}})

var _ = types.AddType(&types.Type{Name: "github.com/emer/axon/v2/sims/inhib.Config", IDName: "config", Doc: "Config has the overall Sim configuration options.", Fields: []types.Field{{Name: "Name", Doc: "Name is the short name of the sim."}, {Name: "Title", Doc: "Title is the longer title of the sim."}, {Name: "URL", Doc: "URL is a link to the online README or other documentation for this sim."}, {Name: "Doc", Doc: "Doc is brief documentation of the sim."}, {Name: "Includes", Doc: "Includes has a list of additional config files to include.\nAfter configuration, it contains list of include files added."}, {Name: "GUI", Doc: "GUI means open the GUI. Otherwise it runs automatically and quits,\nsaving results to log files."}, {Name: "Debug", Doc: "Debug reports debugging information."}, {Name: "Params", Doc: "Params has parameter related configuration options."}, {Name: "Run", Doc: "Run has sim running related configuration options."}, {Name: "Log", Doc: "Log has data logging related configuration options."}}})

var _ = types.AddType(&types.Type{Name: "github.com/emer/axon/v2/sims/inhib.Modes", IDName: "modes", Doc: "Modes are the looping modes (Stacks) for running and statistics."})

var _ = types.AddType(&types.Type{Name: "github.com/emer/axon/v2/sims/inhib.Levels", IDName: "levels", Doc: "Levels are the looping levels for running and statistics."})

var _ = types.AddType(&types.Type{Name: "github.com/emer/axon/v2/sims/inhib.StatsPhase", IDName: "stats-phase", Doc: "StatsPhase is the phase of stats processing for given mode, level.\nAccumulated values are reset at Start, added each Step."})

var _ = types.AddType(&types.Type{Name: "github.com/emer/axon/v2/sims/inhib.Sim", IDName: "sim", Doc: "Sim encapsulates the entire simulation model, and we define all the\nfunctionality as methods on this struct.  This structure keeps all relevant\nstate information organized and available without having to pass everything around\nas arguments to methods, and provides the core GUI interface (note the view tags\nfor the fields which provide hints to how things should be displayed).", Fields: []types.Field{{Name: "Config", Doc: "simulation configuration parameters -- set by .toml config file and / or args"}, {Name: "Net", Doc: "Net is the network: click to view / edit parameters for layers, paths, etc."}, {Name: "Params", Doc: "Params manages network parameter setting."}, {Name: "Loops", Doc: "Loops are the the control loops for running the sim, in different Modes\nacross stacks of Levels."}, {Name: "Envs", Doc: "Envs provides mode-string based storage of environments."}, {Name: "NetUpdate", Doc: "NetUpdate has netview update parameters."}, {Name: "Root", Doc: "Root is the root tensorfs directory, where all stats and other misc sim data goes."}, {Name: "Stats", Doc: "Stats has the stats directory within Root."}, {Name: "Current", Doc: "Current has the current stats values within Stats."}, {Name: "StatFuncs", Doc: "StatFuncs are statistics functions called at given mode and level,\nto perform all stats computations. phase = Start does init at start of given level,\nand all intialization / configuration (called during Init too)."}, {Name: "GUI", Doc: "GUI manages all the GUI elements"}, {Name: "RandSeeds", Doc: "RandSeeds is a list of random seeds to use for each run."}}})

var _ = types.AddFunc(&types.Func{Name: "github.com/emer/axon/v2/sims/inhib.NewConfig", Returns: []string{"Config"}})

var _ = types.AddFunc(&types.Func{Name: "github.com/emer/axon/v2/sims/inhib.RunSim", Doc: "RunSim runs the simulation as a standalone app\nwith given configuration.", Args: []string{"cfg"}, Returns: []string{"error"}})

var _ = types.AddFunc(&types.Func{Name: "github.com/emer/axon/v2/sims/inhib.EmbedSim", Doc: "EmbedSim runs the simulation with default configuration\nembedded within given body element.", Args: []string{"b"}, Returns: []string{"Sim"}})

var _ = types.AddFunc(&types.Func{Name: "github.com/emer/axon/v2/sims/inhib.LayNm", Args: []string{"n"}, Returns: []string{"string"}})

var _ = types.AddFunc(&types.Func{Name: "github.com/emer/axon/v2/sims/inhib.InhNm", Args: []string{"n"}, Returns: []string{"string"}})

var _ = types.AddFunc(&types.Func{Name: "github.com/emer/axon/v2/sims/inhib.LayByNm", Args: []string{"net", "n"}, Returns: []string{"Layer"}})

var _ = types.AddFunc(&types.Func{Name: "github.com/emer/axon/v2/sims/inhib.InhByNm", Args: []string{"net", "n"}, Returns: []string{"Layer"}})
