// Code generated by "core generate -add-types -add-funcs -gosl"; DO NOT EDIT.

package deepvision

import (
	"cogentcore.org/core/types"
)

var _ = types.AddType(&types.Type{Name: "github.com/emer/axon/v2/sims/deepvision.EnvConfig", IDName: "env-config", Doc: "EnvConfig has config params for environment\nnote: only adding fields for key Env params that matter for both Network and Env\nother params are set via the Env map data mechanism.", Directives: []types.Directive{{Tool: "types", Directive: "add"}}, Fields: []types.Field{{Name: "Env", Doc: "env parameters -- can set any field/subfield on Env struct, using standard TOML formatting"}, {Name: "BinarizeV1", Doc: "whether to binarize the V1 activity patterns, which has generally been helpful."}}})

var _ = types.AddType(&types.Type{Name: "github.com/emer/axon/v2/sims/deepvision.ParamConfig", IDName: "param-config", Doc: "ParamConfig has config parameters related to sim params.", Fields: []types.Field{{Name: "Script", Doc: "Script is an interpreted script that is run to set parameters in Layer and Path\nsheets, by default using the \"Script\" set name."}, {Name: "Sheet", Doc: "Sheet is the extra params sheet name(s) to use (space separated\nif multiple). Must be valid name as listed in compiled-in params\nor loaded params."}, {Name: "Tag", Doc: "Tag is an extra tag to add to file names and logs saved from this run."}, {Name: "Note", Doc: "Note is additional info to describe the run params etc,\nlike a git commit message for the run."}, {Name: "SaveAll", Doc: "SaveAll will save a snapshot of all current param and config settings\nin a directory named params_<datestamp> (or _good if Good is true),\nthen quit. Useful for comparing to later changes and seeing multiple\nviews of current params."}, {Name: "Good", Doc: "Good is for SaveAll, save to params_good for a known good params state.\nThis can be done prior to making a new release after all tests are passing.\nAdd results to git to provide a full diff record of all params over level."}}})

var _ = types.AddType(&types.Type{Name: "github.com/emer/axon/v2/sims/deepvision.RunConfig", IDName: "run-config", Doc: "RunConfig has config parameters related to running the sim.", Fields: []types.Field{{Name: "V2Plus", Doc: "V2Plus includes V2 and higher layers"}, {Name: "V3Plus", Doc: "V3Plus includes V3 and higher layers"}, {Name: "DP", Doc: "DP adds the DP layer, on top of V3"}, {Name: "V4Plus", Doc: "V4Plus includes V4 and higher layers"}, {Name: "TEOPlus", Doc: "TEOPlus includes TEO and higher layers"}, {Name: "TE", Doc: "TE includes TE layer"}, {Name: "GPU", Doc: "GPU uses the GPU for computation, generally faster than CPU even for\nsmall models if NData ~16."}, {Name: "GPUDevice", Doc: "GPUDevice selects the gpu device to use."}, {Name: "MPI", Doc: "MPI uses MPI message passing interface for data parallel computation\nbetween nodes running identical copies of the same sim, sharing DWt changes."}, {Name: "GPUSameNodeMPI", Doc: "GPUSameNodeMPI if true and both MPI and GPU are being used, this selects\na different GPU for each MPI proc rank, assuming a multi-GPU node.\nset to false if running MPI across multiple GPU nodes."}, {Name: "NData", Doc: "NData is the number of data-parallel items to process in parallel per trial.\nIs significantly faster for both CPU and GPU.  Results in an effective\nmini-batch of learning."}, {Name: "SlowInterval", Doc: "SlowInterval is the interval between slow adaptive processes.\nThis generally needs to be longer than the default of 100 in larger models."}, {Name: "AdaptGiInterval", Doc: "AdaptGiInterval is the interval between adapting inhibition steps."}, {Name: "NThreads", Doc: "NThreads is the number of parallel threads for CPU computation;\n0 = use default."}, {Name: "Run", Doc: "Run is the _starting_ run number, which determines the random seed.\nRuns counts up from there. Can do all runs in parallel by launching\nseparate jobs with each starting Run, Runs = 1."}, {Name: "Runs", Doc: "Runs is the total number of runs to do when running Train, starting from Run."}, {Name: "Epochs", Doc: "Epochs is the total number of epochs per run."}, {Name: "Trials", Doc: "Trials is the total number of trials per epoch.\nShould be an even multiple of NData. Was 512 in Leabra model."}, {Name: "Cycles", Doc: "Cycles is the total number of cycles per trial: at least 200."}, {Name: "PlusCycles", Doc: "PlusCycles is the total number of plus-phase cycles per trial. For Cycles=300, use 100."}, {Name: "NZero", Doc: "NZero is how many perfect, zero-error epochs before stopping a Run."}, {Name: "TestInterval", Doc: "TestInterval is how often (in epochs) to run through all the test patterns,\nin terms of training epochs. Can use 0 or -1 for no testing."}, {Name: "PCAInterval", Doc: "PCAInterval is how often (in epochs) to compute PCA on hidden\nrepresentations to measure variance."}, {Name: "RSAInterval", Doc: "RSAInterval is how often to run RSA analyses over epochs."}, {Name: "ConfusionEpc", Doc: "ConfusionEpc is the epoch to start recording confusion matrix."}, {Name: "StartWeights", Doc: "StartWeights is the name of weights file to load at start of first run."}}})

var _ = types.AddType(&types.Type{Name: "github.com/emer/axon/v2/sims/deepvision.LogConfig", IDName: "log-config", Doc: "LogConfig has config parameters related to logging data.", Fields: []types.Field{{Name: "SaveWeights", Doc: "SaveWeights will save final weights after each run."}, {Name: "SaveWeightsAt", Doc: "SaveWeightsAt is a list of epoch counters at which to save weights."}, {Name: "Train", Doc: "Train has the list of Train mode levels to save log files for."}, {Name: "Test", Doc: "Test has the list of Test mode levels to save log files for."}}})

var _ = types.AddType(&types.Type{Name: "github.com/emer/axon/v2/sims/deepvision.Config", IDName: "config", Doc: "Config has the overall Sim configuration options.", Fields: []types.Field{{Name: "Name", Doc: "Name is the short name of the sim."}, {Name: "Title", Doc: "Title is the longer title of the sim."}, {Name: "URL", Doc: "URL is a link to the online README or other documentation for this sim."}, {Name: "Doc", Doc: "Doc is brief documentation of the sim."}, {Name: "Includes", Doc: "Includes has a list of additional config files to include.\nAfter configuration, it contains list of include files added."}, {Name: "GUI", Doc: "GUI means open the GUI. Otherwise it runs automatically and quits,\nsaving results to log files."}, {Name: "Debug", Doc: "Debug reports debugging information."}, {Name: "Env", Doc: "environment configuration options"}, {Name: "Params", Doc: "Params has parameter related configuration options."}, {Name: "Run", Doc: "Run has sim running related configuration options."}, {Name: "Log", Doc: "Log has data logging related configuration options."}}})

var _ = types.AddType(&types.Type{Name: "github.com/emer/axon/v2/sims/deepvision.Modes", IDName: "modes", Doc: "Modes are the looping modes (Stacks) for running and statistics."})

var _ = types.AddType(&types.Type{Name: "github.com/emer/axon/v2/sims/deepvision.Levels", IDName: "levels", Doc: "Levels are the looping levels for running and statistics."})

var _ = types.AddType(&types.Type{Name: "github.com/emer/axon/v2/sims/deepvision.StatsPhase", IDName: "stats-phase", Doc: "StatsPhase is the phase of stats processing for given mode, level.\nAccumulated values are reset at Start, added each Step."})

var _ = types.AddType(&types.Type{Name: "github.com/emer/axon/v2/sims/deepvision.Sim", IDName: "sim", Doc: "Sim encapsulates the entire simulation model, and we define all the\nfunctionality as methods on this struct.  This structure keeps all relevant\nstate information organized and available without having to pass everything around\nas arguments to methods, and provides the core GUI interface (note the view tags\nfor the fields which provide hints to how things should be displayed).", Methods: []types.Method{{Name: "RSAOpenRActs", Doc: "RSAOpenRActs opens running average activation data from tar file.", Directives: []types.Directive{{Tool: "types", Directive: "add"}}, Args: []string{"fname"}, Returns: []string{"error"}}}, Fields: []types.Field{{Name: "Config", Doc: "simulation configuration parameters -- set by .toml config file and / or args"}, {Name: "Net", Doc: "Net is the network: click to view / edit parameters for layers, paths, etc."}, {Name: "Params", Doc: "Params manages network parameter setting."}, {Name: "Paths", Doc: "Paths are all the specialized pathways for the network."}, {Name: "Decoder", Doc: "Decoder is used as a comparison vs. the Output layer."}, {Name: "Loops", Doc: "Loops are the control loops for running the sim, in different Modes\nacross stacks of Levels."}, {Name: "Envs", Doc: "Envs provides mode-string based storage of environments."}, {Name: "TrainUpdate", Doc: "TrainUpdate has Train mode netview update parameters."}, {Name: "TestUpdate", Doc: "TestUpdate has Test mode netview update parameters."}, {Name: "Root", Doc: "Root is the root tensorfs directory, where all stats and other misc sim data goes."}, {Name: "Stats", Doc: "Stats has the stats directory within Root."}, {Name: "Current", Doc: "Current has the current stats values within Stats."}, {Name: "StatFuncs", Doc: "StatFuncs are statistics functions called at given mode and level,\nto perform all stats computations. phase = Start does init at start of given level,\nand all intialization / configuration (called during Init too)."}, {Name: "GUI", Doc: "GUI manages all the GUI elements"}, {Name: "RandSeeds", Doc: "RandSeeds is a list of random seeds to use for each run."}}})

var _ = types.AddType(&types.Type{Name: "github.com/emer/axon/v2/sims/deepvision.Obj3DSacEnv", IDName: "obj3-d-sac-env", Doc: "Obj3DSacEnv provides the rendered results of the Obj3D + Saccade generator.", Fields: []types.Field{{Name: "Name", Doc: "Name of this environment (Train, Test mode)."}, {Name: "Path", Doc: "Path to data.tsv file as rendered, e.g., images/train."}, {Name: "Table", Doc: "Table of generated trial / tick data."}, {Name: "EyePop", Doc: "EyePop is the 2D population code for gaussian bump rendering\nof eye position."}, {Name: "SacPop", Doc: "SacPop is the 2d population code for gaussian bump rendering\nof saccade plan / execution."}, {Name: "ObjVelPop", Doc: "ObjVelPop is the 2d population code for gaussian bump rendering\nof object velocity."}, {Name: "Img", Doc: "image that we operate upon -- one image shared among all filters"}, {Name: "V1Med", Doc: "V1Med is the v1 medium resolution filtering of image -- V1AllTsr has result."}, {Name: "V1Hi", Doc: "V1Hi is the v1 higher resolution filtering of image -- V1AllTsr has result."}, {Name: "Objs", Doc: "Objs is the list of objects, as cat/objfile."}, {Name: "Cats", Doc: "Cats is the list of categories."}, {Name: "Trial", Doc: "Trial counts each object trajectory"}, {Name: "Tick", Doc: "Tick counts each step along the trajectory"}, {Name: "Row", Doc: "Row of table -- this is actual counter driving everything"}, {Name: "NData", Doc: "Number of data-parallel environments."}, {Name: "Di", Doc: "data-parallel index of this env."}, {Name: "CurCat", Doc: "CurCat is the current object category"}, {Name: "CurObj", Doc: "CurObj is the current object"}, {Name: "CurStates", Doc: "current rendered state tensors"}, {Name: "Image", Doc: " Image is the rendered image as loaded"}, {Name: "Rand", Doc: "Rand is the random number generator for the env.\nAll random calls must use this.\nSet seed here for weight initialization values."}, {Name: "RandSeed", Doc: "random seed"}}})

var _ = types.AddType(&types.Type{Name: "github.com/emer/axon/v2/sims/deepvision.Paths", IDName: "paths", Doc: "Paths holds all the special projections.", Fields: []types.Field{{Name: "PT4x4Skp2", Doc: "Standard feedforward topographic projection, recv = 1/2 send size"}, {Name: "PT4x4Skp2Recip", Doc: "Reciprocal"}, {Name: "PT2x2Skp2", Doc: "sparser skip 2 -- no overlap"}, {Name: "PT2x2Skp2Recip", Doc: "Reciprocal"}, {Name: "PT3x3Skp1", Doc: "Standard same-to-same size topographic projection"}, {Name: "PTSigTopo", Doc: "Sigmoidal topographic projection used in LIP saccade remapping layers"}, {Name: "PTGaussTopo", Doc: "Gaussian topographic projection used in LIP saccade remapping layers"}}})

var _ = types.AddType(&types.Type{Name: "github.com/emer/axon/v2/sims/deepvision.V1Img", IDName: "v1-img", Doc: "Img manages conversion of a bitmap image into tensor formats for\nsubsequent processing by filters.", Fields: []types.Field{{Name: "File", Doc: "name of image file to operate on"}, {Name: "Size", Doc: "target image size to use -- images will be rescaled to this size"}, {Name: "Img", Doc: "current input image"}, {Name: "Tsr", Doc: "input image as an RGB tensor"}, {Name: "LMS", Doc: "LMS components + opponents tensor version of image"}}})

var _ = types.AddType(&types.Type{Name: "github.com/emer/axon/v2/sims/deepvision.V1sOut", IDName: "v1s-out", Doc: "V1sOut contains output tensors for V1 Simple filtering, one per opponnent.", Fields: []types.Field{{Name: "Tsr", Doc: "V1 simple gabor filter output tensor"}, {Name: "ExtGiTsr", Doc: "V1 simple extra Gi from neighbor inhibition tensor"}, {Name: "KwtaTsr", Doc: "V1 simple gabor filter output, kwta output tensor"}, {Name: "PoolTsr", Doc: " V1 simple gabor filter output, max-pooled 2x2 of Kwta tensor"}}})

var _ = types.AddType(&types.Type{Name: "github.com/emer/axon/v2/sims/deepvision.Vis", IDName: "vis", Doc: "Vis encapsulates specific visual processing pipeline for V1 filtering", Fields: []types.Field{{Name: "Binarize", Doc: "binarizing result has been useful: todo: revisit"}, {Name: "BinThr", Doc: "threshold for binarizing"}, {Name: "Color", Doc: "if true, do full color filtering -- else Black/White only"}, {Name: "ColorGain", Doc: "extra gain for color channels -- lower contrast in general\"`"}, {Name: "Img", Doc: "image that we operate upon -- one image often shared among multiple filters"}, {Name: "V1sGabor", Doc: "V1 simple gabor filter parameters"}, {Name: "V1sGeom", Doc: "geometry of input, output for V1 simple-cell processing"}, {Name: "V1sNeighInhib", Doc: "Neighborhood inhibition for V1s. Each unit gets inhibition from same\nfeature in nearest orthogonal neighbors -- reduces redundancy of feature code."}, {Name: "V1sKWTA", Doc: "kwta parameters for V1s"}, {Name: "V1sGaborTsr", Doc: "V1 simple gabor filter tensor"}, {Name: "V1s", Doc: "V1 simple gabor filter output, per channel"}, {Name: "V1sMaxTsr", Doc: "max over V1 simple gabor filters output tensor"}, {Name: "V1sPoolTsr", Doc: "V1 simple gabor filter output, max-pooled 2x2 of V1sKwta tensor"}, {Name: "V1sUnPoolTsr", Doc: "V1 simple gabor filter output, un-max-pooled 2x2 of V1sPool tensor"}, {Name: "V1sAngOnlyTsr", Doc: "V1 simple gabor filter output, angle-only features tensor"}, {Name: "V1sAngPoolTsr", Doc: "V1 simple gabor filter output, max-pooled 2x2 of AngOnly tensor"}, {Name: "V1cLenSumTsr", Doc: "V1 complex length sum filter output tensor"}, {Name: "V1cEndStopTsr", Doc: "V1 complex end stop filter output tensor"}, {Name: "V1AllTsr", Doc: "Combined V1 output tensor with V1s simple as first two rows,\nthen length sum, then end stops = 5 rows total."}, {Name: "V1sInhibs", Doc: "inhibition values for V1s KWTA"}}})

var _ = types.AddFunc(&types.Func{Name: "github.com/emer/axon/v2/sims/deepvision.NewConfig", Returns: []string{"Config"}})

var _ = types.AddFunc(&types.Func{Name: "github.com/emer/axon/v2/sims/deepvision.RunSim", Doc: "RunSim runs the simulation as a standalone app\nwith given configuration.", Args: []string{"cfg"}, Returns: []string{"error"}})

var _ = types.AddFunc(&types.Func{Name: "github.com/emer/axon/v2/sims/deepvision.EmbedSim", Doc: "EmbedSim runs the simulation with default configuration\nembedded within given body element.", Args: []string{"b"}, Returns: []string{"Sim"}})

var _ = types.AddFunc(&types.Func{Name: "github.com/emer/axon/v2/sims/deepvision.rsaSimMats", Doc: "rsaSimMats computes the similarity matrixes from running average acts", Args: []string{"curModeDir", "layers"}})
