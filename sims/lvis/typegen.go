// Code generated by "core generate -add-types -add-funcs"; DO NOT EDIT.

package main

import (
	"cogentcore.org/core/types"
)

var _ = types.AddType(&types.Type{Name: "main.ColorVis", IDName: "color-vis", Doc: "ColorVis encapsulates specific visual processing pipeline in\nuse in a given case -- can add / modify this as needed", Fields: []types.Field{{Name: "Img"}, {Name: "DoG"}, {Name: "DoGNames"}, {Name: "DoGGains"}, {Name: "DoGOnGains"}, {Name: "Geom"}, {Name: "KWTA"}, {Name: "DoGTsr"}, {Name: "DoGTab"}, {Name: "KwtaTsr"}, {Name: "OutAll"}, {Name: "OutTsrs"}, {Name: "Inhibs"}}})

var _ = types.AddType(&types.Type{Name: "main.EnvConfig", IDName: "env-config", Doc: "EnvConfig has config params for environment\nnote: only adding fields for key Env params that matter for both Network and Env\nother params are set via the Env map data mechanism.", Directives: []types.Directive{{Tool: "types", Directive: "add"}}, Fields: []types.Field{{Name: "Env", Doc: "env parameters -- can set any field/subfield on Env struct, using standard TOML formatting"}, {Name: "NOutPer", Doc: "number of units per localist output unit"}, {Name: "RndOutPats", Doc: "If true, use random output patterns -- else localist"}}})

var _ = types.AddType(&types.Type{Name: "main.ParamConfig", IDName: "param-config", Doc: "ParamConfig has config parameters related to sim params.", Fields: []types.Field{{Name: "SubPools", Doc: "SubPools if true, organize layers and connectivity with 2x2 sub-pools\nwithin each topological pool."}, {Name: "Script", Doc: "Script is an interpreted script that is run to set parameters in Layer and Path\nsheets, by default using the \"Script\" set name."}, {Name: "Sheet", Doc: "Sheet is the extra params sheet name(s) to use (space separated\nif multiple). Must be valid name as listed in compiled-in params\nor loaded params."}, {Name: "Tag", Doc: "Tag is an extra tag to add to file names and logs saved from this run."}, {Name: "Note", Doc: "Note is additional info to describe the run params etc,\nlike a git commit message for the run."}, {Name: "SaveAll", Doc: "SaveAll will save a snapshot of all current param and config settings\nin a directory named params_<datestamp> (or _good if Good is true),\nthen quit. Useful for comparing to later changes and seeing multiple\nviews of current params."}, {Name: "Good", Doc: "Good is for SaveAll, save to params_good for a known good params state.\nThis can be done prior to making a new release after all tests are passing.\nAdd results to git to provide a full diff record of all params over level."}}})

var _ = types.AddType(&types.Type{Name: "main.RunConfig", IDName: "run-config", Doc: "RunConfig has config parameters related to running the sim.", Fields: []types.Field{{Name: "GPU", Doc: "GPU uses the GPU for computation, generally faster than CPU even for\nsmall models if NData ~16."}, {Name: "GPUDevice", Doc: "GPUDevice selects the gpu device to use."}, {Name: "MPI", Doc: "MPI uses MPI message passing interface for data parallel computation\nbetween nodes running identical copies of the same sim, sharing DWt changes."}, {Name: "GPUSameNodeMPI", Doc: "GPUSameNodeMPI if true and both MPI and GPU are being used, this selects\na different GPU for each MPI proc rank, assuming a multi-GPU node.\nset to false if running MPI across multiple GPU nodes."}, {Name: "NData", Doc: "NData is the number of data-parallel items to process in parallel per trial.\nIs significantly faster for both CPU and GPU.  Results in an effective\nmini-batch of learning."}, {Name: "NThreads", Doc: "NThreads is the number of parallel threads for CPU computation;\n0 = use default."}, {Name: "Run", Doc: "Run is the _starting_ run number, which determines the random seed.\nRuns counts up from there. Can do all runs in parallel by launching\nseparate jobs with each starting Run, Runs = 1."}, {Name: "Runs", Doc: "Runs is the total number of runs to do when running Train, starting from Run."}, {Name: "Epochs", Doc: "Epochs is the total number of epochs per run."}, {Name: "Trials", Doc: "Trials is the total number of trials per epoch.\nShould be an even multiple of NData."}, {Name: "Cycles", Doc: "Cycles is the total number of cycles per trial: at least 200."}, {Name: "PlusCycles", Doc: "PlusCycles is the total number of plus-phase cycles per trial. For Cycles=300, use 100."}, {Name: "CaBinCycles", Doc: "CaBinCycles is the number of cycles per CaBin: how fine-grained the synaptic Ca is."}, {Name: "NZero", Doc: "NZero is how many perfect, zero-error epochs before stopping a Run."}, {Name: "TestInterval", Doc: "TestInterval is how often (in epochs) to run through all the test patterns,\nin terms of training epochs. Can use 0 or -1 for no testing."}, {Name: "PCAInterval", Doc: "PCAInterval is how often (in epochs) to compute PCA on hidden\nrepresentations to measure variance."}, {Name: "ConfusionEpc", Doc: "ConfusionEpc is the epoch to start recording confusion matrix."}, {Name: "StartWeights", Doc: "StartWeights is the name of weights file to load at start of first run."}}})

var _ = types.AddType(&types.Type{Name: "main.LogConfig", IDName: "log-config", Doc: "LogConfig has config parameters related to logging data.", Fields: []types.Field{{Name: "SaveWeights", Doc: "SaveWeights will save final weights after each run."}, {Name: "Train", Doc: "Train has the list of Train mode levels to save log files for."}, {Name: "Test", Doc: "Test has the list of Test mode levels to save log files for."}}})

var _ = types.AddType(&types.Type{Name: "main.Config", IDName: "config", Doc: "Config has the overall Sim configuration options.", Fields: []types.Field{{Name: "Name", Doc: "Name is the short name of the sim."}, {Name: "Title", Doc: "Title is the longer title of the sim."}, {Name: "URL", Doc: "URL is a link to the online README or other documentation for this sim."}, {Name: "Doc", Doc: "Doc is brief documentation of the sim."}, {Name: "Includes", Doc: "Includes has a list of additional config files to include.\nAfter configuration, it contains list of include files added."}, {Name: "GUI", Doc: "GUI means open the GUI. Otherwise it runs automatically and quits,\nsaving results to log files."}, {Name: "Debug", Doc: "Debug reports debugging information."}, {Name: "Env", Doc: "environment configuration options"}, {Name: "Params", Doc: "Params has parameter related configuration options."}, {Name: "Run", Doc: "Run has sim running related configuration options."}, {Name: "Log", Doc: "Log has data logging related configuration options."}}})

var _ = types.AddType(&types.Type{Name: "main.Images", IDName: "images", Doc: "Images implements management of lists of image files,\nwith category names or organized in directories by category.", Fields: []types.Field{{Name: "Path", Doc: "Path to image files: this should point to a directory that has files\nor subdirectories that then have image files in them."}, {Name: "Exts", Doc: "Extensions of image files to find (lowercase)"}, {Name: "CatSep", Doc: "CatSep is the separator in file name for category label.\nif empty then must have subdirs."}, {Name: "SplitByItm", Doc: "Split by item -- each file name has an item label after CatSep."}, {Name: "NTestPerCat", Doc: "Number of testing images per category. If SplitByItem images are split by item id."}, {Name: "Cats", Doc: "List of image categories."}, {Name: "CatMap", Doc: "CatMap is the map of categories to indexes in Cats list."}, {Name: "ImagesAll", Doc: "ImagesAll is the full list of images, organized by category\n(directory) and then filename."}, {Name: "ImagesTrain", Doc: "ImagesTrain is the list of training images, organized by category\n(directory) and then filename."}, {Name: "ImagesTest", Doc: "ImagesTest is the list of testing images, organized by category\n(directory) and then filename."}, {Name: "FlatAll", Doc: "FlatAlls is the flat list of all images, as cat/filename.ext\nFlats() makes from above data."}, {Name: "FlatTrain", Doc: "FlatTrain is the flat list of all training images, as cat/filename.ext.\nFlats() makes from above data."}, {Name: "FlatTest", Doc: "FlatTest is the flat list of all testing images, as cat/filename.ext.\nFlats() makes from above data."}}})

var _ = types.AddType(&types.Type{Name: "main.ImagesEnv", IDName: "images-env", Doc: "ImagesEnv provides the rendered results of the Obj3D + Saccade generator.", Fields: []types.Field{{Name: "Name", Doc: "name of this environment"}, {Name: "ImageFile", Doc: "image file name"}, {Name: "Test", Doc: "present test items, else train"}, {Name: "Sequential", Doc: "present items in sequential order -- else shuffled"}, {Name: "High16", Doc: "compute high-res full field filtering"}, {Name: "ColorDoG", Doc: "compute color DoG (blob) filtering"}, {Name: "Images", Doc: "images list"}, {Name: "TransMax", Doc: "def 0.3 maximum amount of translation as proportion of half-width size in each direction -- 1 = something in center is now at right edge"}, {Name: "TransSigma", Doc: "[def: 0.15] if > 0, generate translations using gaussian normal distribution with this standard deviation, and then clip to TransMax range -- this facilitates learning on the central region while still giving exposure to wider area.  Tyically turn off for last 100 epochs to measure true uniform distribution performance."}, {Name: "ScaleRange", Doc: "def 0.5 - 1.1 range of scale"}, {Name: "RotateMax", Doc: "[def: 8] def 8 maximum degrees of rotation in plane -- image is rotated plus or minus in this range"}, {Name: "Img", Doc: "image that we operate upon -- one image shared among all filters"}, {Name: "V1l16", Doc: "v1 16deg low resolution filtering of image -- V1AllTsr has result"}, {Name: "V1m16", Doc: "v1 16deg medium resolution filtering of image -- V1AllTsr has result"}, {Name: "V1h16", Doc: "v1 16deg high resolution filtering of image -- V1AllTsr has result"}, {Name: "V1l8", Doc: "v1 8deg low resolution filtering of image -- V1AllTsr has result"}, {Name: "V1m8", Doc: "v1 8deg medium resolution filtering of image -- V1AllTsr has result"}, {Name: "V1Cl16", Doc: "v1 color 16deg low resolution filtering of image -- OutAll has result"}, {Name: "V1Cm16", Doc: "v1 color 16deg medium resolution filtering of image -- OutAll has result"}, {Name: "V1Cl8", Doc: "v1 color 8deg low resolution filtering of image -- OutAll has result"}, {Name: "V1Cm8", Doc: "v1 color 8deg medium resolution filtering of image -- OutAll has result"}, {Name: "MaxOut", Doc: "maximum number of output categories representable here"}, {Name: "OutRandom", Doc: "use random bit patterns instead of localist output units"}, {Name: "RndPctOn", Doc: "proportion activity for random patterns"}, {Name: "RndMinDiff", Doc: "proportion minimum difference for random patterns"}, {Name: "OutSize", Doc: "the output tensor geometry -- must be >= number of cats"}, {Name: "NOutPer", Doc: "number of output units per category -- spiking may benefit from replication -- is Y inner dim of output tensor"}, {Name: "Pats", Doc: "[view: no-inline] output patterns: either localist or random"}, {Name: "Rand", Doc: "[view: -] random number generator for the env -- all random calls must use this"}, {Name: "RndSeed", Doc: "random seed"}, {Name: "Output", Doc: "output pattern for current item"}, {Name: "StRow", Doc: "starting row, e.g., for mpi allocation across processors"}, {Name: "EdRow", Doc: "ending row -- if 0 it is ignored"}, {Name: "Shuffle", Doc: "suffled list of entire set of images -- re-shuffle every time through imgidxs"}, {Name: "ImgIdxs", Doc: "indexs of images to present -- from StRow to EdRow"}, {Name: "Trial", Doc: "each object trajectory is one trial"}, {Name: "Row", Doc: "Row of item list  -- this is actual counter driving everything"}, {Name: "CurCat", Doc: "current category"}, {Name: "CurCatIdx", Doc: "index of current category"}, {Name: "CurImg", Doc: "current image"}, {Name: "CurTrans", Doc: "current translation"}, {Name: "CurScale", Doc: "current scaling"}, {Name: "CurRot", Doc: "current rotation"}, {Name: "Image", Doc: "rendered image as loaded"}}})

var _ = types.AddType(&types.Type{Name: "main.FloatIdx32", IDName: "float-idx32", Doc: "FloatIdx32 contains a float32 value and its index", Fields: []types.Field{{Name: "Val"}, {Name: "Idx"}}})

var _ = types.AddType(&types.Type{Name: "main.Modes", IDName: "modes", Doc: "Modes are the looping modes (Stacks) for running and statistics."})

var _ = types.AddType(&types.Type{Name: "main.Levels", IDName: "levels", Doc: "Levels are the looping levels for running and statistics."})

var _ = types.AddType(&types.Type{Name: "main.StatsPhase", IDName: "stats-phase", Doc: "StatsPhase is the phase of stats processing for given mode, level.\nAccumulated values are reset at Start, added each Step."})

var _ = types.AddType(&types.Type{Name: "main.Sim", IDName: "sim", Doc: "Sim encapsulates the entire simulation model, and we define all the\nfunctionality as methods on this struct.  This structure keeps all relevant\nstate information organized and available without having to pass everything around\nas arguments to methods, and provides the core GUI interface (note the view tags\nfor the fields which provide hints to how things should be displayed).", Fields: []types.Field{{Name: "Config", Doc: "simulation configuration parameters -- set by .toml config file and / or args"}, {Name: "Net", Doc: "Net is the network: click to view / edit parameters for layers, paths, etc."}, {Name: "Params", Doc: "Params manages network parameter setting."}, {Name: "Paths", Doc: "Paths are all the specialized pathways for the network."}, {Name: "Loops", Doc: "Loops are the the control loops for running the sim, in different Modes\nacross stacks of Levels."}, {Name: "Envs", Doc: "Envs provides mode-string based storage of environments."}, {Name: "TrainUpdate", Doc: "TrainUpdate has Train mode netview update parameters."}, {Name: "TestUpdate", Doc: "TestUpdate has Test mode netview update parameters."}, {Name: "Root", Doc: "Root is the root tensorfs directory, where all stats and other misc sim data goes."}, {Name: "Stats", Doc: "Stats has the stats directory within Root."}, {Name: "Current", Doc: "Current has the current stats values within Stats."}, {Name: "StatFuncs", Doc: "StatFuncs are statistics functions called at given mode and level,\nto perform all stats computations. phase = Start does init at start of given level,\nand all intialization / configuration (called during Init too)."}, {Name: "GUI", Doc: "GUI manages all the GUI elements"}, {Name: "RandSeeds", Doc: "RandSeeds is a list of random seeds to use for each run."}}})

var _ = types.AddType(&types.Type{Name: "main.Paths", IDName: "paths", Doc: "Paths holds all the special projections.", Fields: []types.Field{{Name: "PT4x4Skp2", Doc: "Standard feedforward topographic projection, recv = 1/2 send size"}, {Name: "PT4x4Skp2Recip", Doc: "Reciprocal"}, {Name: "PT4x4Skp2Sub2", Doc: "Standard feedforward topographic projection, recv = 1/2 send size"}, {Name: "PT4x4Skp2Sub2Recip", Doc: "Reciprocal"}, {Name: "PT4x4Skp2Sub2Send", Doc: "Standard feedforward topographic projection, recv = 1/2 send size"}, {Name: "PT4x4Skp2Sub2SendRecip", Doc: "Standard feedforward topographic projection, recv = 1/2 send size"}, {Name: "PT2x2Skp1", Doc: "same-size paths"}, {Name: "PT2x2Skp1Recip", Doc: "same-size paths reciprocal"}, {Name: "PT2x2Skp1Sub2", Doc: "same-size paths"}, {Name: "PT2x2Skp1Sub2Recip", Doc: "same-size paths reciprocal"}, {Name: "PT2x2Skp1Sub2Send", Doc: "same-size paths"}, {Name: "PT2x2Skp1Sub2SendRecip", Doc: "same-size paths reciprocal"}, {Name: "PT2x2Skp2", Doc: "lateral inhib projection"}, {Name: "PT4x4Skp0", Doc: "for V4 <-> TEO"}, {Name: "PT4x4Skp0Recip", Doc: "for V4 <-> TEO"}, {Name: "PT4x4Skp0Sub2", Doc: "for V4 <-> TEO"}, {Name: "PT4x4Skp0Sub2Recip", Doc: "for V4 <-> TEO"}, {Name: "PT1x1Skp0", Doc: "for TE <-> TEO"}, {Name: "PT1x1Skp0Recip", Doc: "for TE <-> TEO"}, {Name: "PT6x6Skp2Lat", Doc: "lateral inhibitory connectivity for subpools"}}})

var _ = types.AddType(&types.Type{Name: "main.V1Img", IDName: "v1-img", Doc: "Img manages conversion of a bitmap image into tensor formats for\nsubsequent processing by filters.", Fields: []types.Field{{Name: "File"}, {Name: "Size"}, {Name: "Img"}, {Name: "Tsr"}, {Name: "LMS"}}})

var _ = types.AddType(&types.Type{Name: "main.V1sOut", IDName: "v1s-out", Doc: "V1sOut contains output tensors for V1 Simple filtering, one per opponnent", Fields: []types.Field{{Name: "Tsr"}, {Name: "ExtGiTsr"}, {Name: "KwtaTsr"}, {Name: "PoolTsr"}}})

var _ = types.AddType(&types.Type{Name: "main.Vis", IDName: "vis", Doc: "Vis encapsulates specific visual processing pipeline for V1 filtering", Fields: []types.Field{{Name: "Color"}, {Name: "SepColor"}, {Name: "ColorGain"}, {Name: "Img"}, {Name: "V1sGabor"}, {Name: "V1sGeom"}, {Name: "V1sNeighInhib"}, {Name: "V1sKWTA"}, {Name: "V1sGaborTsr"}, {Name: "V1s"}, {Name: "V1sMaxTsr"}, {Name: "V1sPoolTsr"}, {Name: "V1sUnPoolTsr"}, {Name: "V1sAngOnlyTsr"}, {Name: "V1sAngPoolTsr"}, {Name: "V1cLenSumTsr"}, {Name: "V1cEndStopTsr"}, {Name: "V1AllTsr"}, {Name: "V1sInhibs"}}})

var _ = types.AddFunc(&types.Func{Name: "main.ClosestRows32", Doc: "ClosestRows32 returns the sorted list of distances from probe pattern\nand patterns in an tensor.Float32 where the outer-most dimension is\nassumed to be a row (e.g., as a column in an etable), using the given metric function,\n*which must have the Increasing property* -- i.e., larger = further.\nCol cell sizes must match size of probe (panics if not).", Args: []string{"probe", "col", "mfun"}, Returns: []string{"FloatIdx32"}})

var _ = types.AddFunc(&types.Func{Name: "main.main"})

var _ = types.AddFunc(&types.Func{Name: "main.RunSim", Doc: "RunSim runs the simulation with given configuration.", Args: []string{"cfg"}, Returns: []string{"error"}})
