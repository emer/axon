// Code generated by "core generate -add-types -add-funcs"; DO NOT EDIT.

package main

import (
	"cogentcore.org/core/types"
)

var _ = types.AddType(&types.Type{Name: "main.EnvConfig", IDName: "env-config", Doc: "EnvConfig has config params for environment\nnote: only adding fields for key Env params that matter for both Network and Env\nother params are set via the Env map data mechanism.", Directives: []types.Directive{{Tool: "types", Directive: "add"}}, Fields: []types.Field{{Name: "Env", Doc: "Env parameters: can set any field/subfield on Env struct,\nusing standard TOML formatting."}, {Name: "UnitsPer", Doc: "UnitsPer is the number of units per localist output unit. 4 best."}}})

var _ = types.AddType(&types.Type{Name: "main.ParamConfig", IDName: "param-config", Doc: "ParamConfig has config parameters related to sim params.", Directives: []types.Directive{{Tool: "types", Directive: "add"}}, Fields: []types.Field{{Name: "Hid2", Doc: "Hid2 use a second hidden layer that predicts the first.\nIs not beneficial for this simple markovian task."}, {Name: "Sheet", Doc: "Sheet is the extra params sheet name(s) to use (space separated\nif multiple). Must be valid name as listed in compiled-in params\nor loaded params."}, {Name: "Tag", Doc: "Tag is an extra tag to add to file names and logs saved from this run."}, {Name: "Note", Doc: "Note is additional info to describe the run params etc,\nlike a git commit message for the run."}, {Name: "SaveAll", Doc: "SaveAll will save a snapshot of all current param and config settings\nin a directory named params_<datestamp> (or _good if Good is true),\nthen quit. Useful for comparing to later changes and seeing multiple\nviews of current params."}, {Name: "Good", Doc: "Good is for SaveAll, save to params_good for a known good params state.\nThis can be done prior to making a new release after all tests are passing.\nAdd results to git to provide a full diff record of all params over level."}}})

var _ = types.AddType(&types.Type{Name: "main.RunConfig", IDName: "run-config", Doc: "RunConfig has config parameters related to running the sim.", Directives: []types.Directive{{Tool: "types", Directive: "add"}}, Fields: []types.Field{{Name: "GPU", Doc: "GPU uses the GPU for computation, generally faster than CPU even for\nsmall models if NData ~16."}, {Name: "NData", Doc: "NData is the number of data-parallel items to process in parallel per trial.\nIs significantly faster for both CPU and GPU.  Results in an effective\nmini-batch of learning."}, {Name: "NThreads", Doc: "NThreads is the number of parallel threads for CPU computation;\n0 = use default."}, {Name: "Run", Doc: "Run is the _starting_ run number, which determines the random seed.\nNRuns counts up from there. Can do all runs in parallel by launching\nseparate jobs with each starting Run, NRuns = 1."}, {Name: "Runs", Doc: "Runs is the total number of runs to do when running Train, starting from Run."}, {Name: "Epochs", Doc: "Epochs is the total number of epochs per run."}, {Name: "Trials", Doc: "Trials is the total number of trials per epoch.\nShould be an even multiple of NData."}, {Name: "Cycles", Doc: "Cycles is the total number of cycles per trial: at least 200."}, {Name: "PlusCycles", Doc: "PlusCycles is the total number of plus-phase cycles per trial. For Cycles=300, use 100."}, {Name: "TestInterval", Doc: "TestInterval is how often (in epochs) to run through all the test patterns,\nin terms of training epochs. Can use 0 or -1 for no testing."}, {Name: "PCAInterval", Doc: "PCAInterval is how often (in epochs) to compute PCA on hidden\nrepresentations to measure variance."}, {Name: "StartWeights", Doc: "StartWeights is the name of weights file to load at start of first run."}}})

var _ = types.AddType(&types.Type{Name: "main.LogConfig", IDName: "log-config", Doc: "LogConfig has config parameters related to logging data.", Fields: []types.Field{{Name: "SaveWeights", Doc: "SaveWeights will save final weights after each run."}, {Name: "Train", Doc: "Train has the list of Train mode levels to save log files for."}, {Name: "Test", Doc: "Test has the list of Test mode levels to save log files for."}}})

var _ = types.AddType(&types.Type{Name: "main.Config", IDName: "config", Doc: "Config has the overall Sim configuration options.", Fields: []types.Field{{Name: "Name", Doc: "Name is the short name of the sim."}, {Name: "Title", Doc: "Title is the longer title of the sim."}, {Name: "URL", Doc: "URL is a link to the online README or other documentation for this sim."}, {Name: "Doc", Doc: "Doc is brief documentation of the sim."}, {Name: "Includes", Doc: "Includes has a list of additional config files to include.\nAfter configuration, it contains list of include files added."}, {Name: "GUI", Doc: "GUI means open the GUI. Otherwise it runs automatically and quits,\nsaving results to log files."}, {Name: "Debug", Doc: "Debug reports debugging information."}, {Name: "Env", Doc: "Env has environment related configuration options."}, {Name: "Params", Doc: "Params has parameter related configuration options."}, {Name: "Run", Doc: "Run has sim running related configuration options."}, {Name: "Log", Doc: "Log has data logging related configuration options."}}})

var _ = types.AddType(&types.Type{Name: "main.Modes", IDName: "modes", Doc: "Modes are the looping modes (Stacks) for running and statistics."})

var _ = types.AddType(&types.Type{Name: "main.Levels", IDName: "levels", Doc: "Levels are the looping levels for running and statistics."})

var _ = types.AddType(&types.Type{Name: "main.StatsPhase", IDName: "stats-phase", Doc: "StatsPhase is the phase of stats processing for given mode, level.\nAccumulated values are reset at Start, added each Step."})

var _ = types.AddType(&types.Type{Name: "main.Sim", IDName: "sim", Doc: "Sim encapsulates the entire simulation model, and we define all the\nfunctionality as methods on this struct.  This structure keeps all relevant\nstate information organized and available without having to pass everything around\nas arguments to methods, and provides the core GUI interface (note the view tags\nfor the fields which provide hints to how things should be displayed).", Fields: []types.Field{{Name: "Config", Doc: "simulation configuration parameters -- set by .toml config file and / or args"}, {Name: "Net", Doc: "Net is the network: click to view / edit parameters for layers, paths, etc."}, {Name: "Params", Doc: "Params manages network parameter setting."}, {Name: "Loops", Doc: "Loops are the the control loops for running the sim, in different Modes\nacross stacks of Levels."}, {Name: "Envs", Doc: "Envs provides mode-string based storage of environments."}, {Name: "TrainUpdate", Doc: "TrainUpdate has Train mode netview update parameters."}, {Name: "TestUpdate", Doc: "TestUpdate has Test mode netview update parameters."}, {Name: "Root", Doc: "Root is the root tensorfs directory, where all stats and other misc sim data goes."}, {Name: "Stats", Doc: "Stats has the stats directory within Root."}, {Name: "Current", Doc: "Current has the current stats values within Stats."}, {Name: "StatFuncs", Doc: "StatFuncs are statistics functions called at given mode and level,\nto perform all stats computations. phase = Start does init at start of given level,\nand all intialization / configuration (called during Init too)."}, {Name: "GUI", Doc: "GUI manages all the GUI elements"}, {Name: "RandSeeds", Doc: "RandSeeds is a list of random seeds to use for each run."}}})

var _ = types.AddType(&types.Type{Name: "main.MoveEnv", IDName: "move-env", Doc: "MoveEnv is a flat-world grid-based environment.", Fields: []types.Field{{Name: "Name", Doc: "name of this environment"}, {Name: "Size", Doc: "size of 2D world"}, {Name: "World", Doc: "2D grid world, each cell is a material (mat)"}, {Name: "Acts", Doc: "list of actions: starts with: Stay, Left, Right, Forward, Back, then extensible"}, {Name: "ActMap", Doc: "action map of action names to indexes"}, {Name: "FOV", Doc: "field of view in degrees, e.g., 180, must be even multiple of AngInc"}, {Name: "AngInc", Doc: "angle increment for rotation, in degrees -- defaults to 15"}, {Name: "NRotAngles", Doc: "total number of rotation angles in a circle"}, {Name: "NFOVRays", Doc: "total number of FOV rays that are traced"}, {Name: "DepthSize", Doc: "number of units in depth population codes"}, {Name: "DepthCode", Doc: "population code for depth, in normalized units"}, {Name: "AngCode", Doc: "angle population code values, in normalized units"}, {Name: "UnitsPer", Doc: "number of units per localist value"}, {Name: "Debug", Doc: "print debug messages"}, {Name: "PctBlank", Doc: "proportion of times that a blank input is generated -- for testing pulvinar behavior with blank inputs"}, {Name: "PosF", Doc: "current location of agent, floating point"}, {Name: "PosI", Doc: "current location of agent, integer"}, {Name: "Angle", Doc: "current angle, in degrees"}, {Name: "RotAng", Doc: "angle that we just rotated -- drives vestibular"}, {Name: "Act", Doc: "last action taken"}, {Name: "Depths", Doc: "depth for each angle (NFOVRays), raw"}, {Name: "DepthLogs", Doc: "depth for each angle (NFOVRays), normalized log"}, {Name: "CurStates", Doc: "current rendered state tensors -- extensible map"}, {Name: "NextStates", Doc: "next rendered state tensors -- updated from actions"}, {Name: "Rand", Doc: "random number generator for the env -- all random calls must use this -- set seed here for weight initialization values"}, {Name: "RandSeed", Doc: "random seed"}}})

var _ = types.AddFunc(&types.Func{Name: "main.main"})

var _ = types.AddFunc(&types.Func{Name: "main.RunSim", Doc: "RunSim runs the simulation with given configuration.", Args: []string{"cfg"}, Returns: []string{"error"}})

var _ = types.AddFunc(&types.Func{Name: "main.AngMod", Doc: "AngMod returns angle modulo within 360 degrees", Args: []string{"ang"}, Returns: []string{"int"}})

var _ = types.AddFunc(&types.Func{Name: "main.AngVec", Doc: "AngVec returns the incremental vector to use for given angle, in deg\nsuch that the largest value is 1.", Args: []string{"ang"}, Returns: []string{"Vector2"}})

var _ = types.AddFunc(&types.Func{Name: "main.NormVecLine", Doc: "NormVec normalize vector for drawing a line", Args: []string{"v"}, Returns: []string{"Vector2"}})

var _ = types.AddFunc(&types.Func{Name: "main.NextVecPoint", Doc: "NextVecPoint returns the next grid point along vector,\nfrom given current floating and grid points.  v is normalized\nsuch that the largest value is 1.", Args: []string{"cp", "v"}, Returns: []string{"Vector2", "Vector2i"}})
