// Code generated by "core generate -add-types -add-funcs"; DO NOT EDIT.

package main

import (
	"cogentcore.org/core/types"
)

var _ = types.AddType(&types.Type{Name: "main.ParamConfig", IDName: "param-config", Doc: "ParamConfig has config parameters related to sim params.", Fields: []types.Field{{Name: "Sheet", Doc: "Sheet is the extra params sheet name(s) to use (space separated\nif multiple). Must be valid name as listed in compiled-in params\nor loaded params."}, {Name: "Tag", Doc: "Tag is an extra tag to add to file names and logs saved from this run."}, {Name: "Note", Doc: "Note is additional info to describe the run params etc,\nlike a git commit message for the run."}, {Name: "SaveAll", Doc: "SaveAll will save a snapshot of all current param and config settings\nin a directory named params_<datestamp> (or _good if Good is true),\nthen quit. Useful for comparing to later changes and seeing multiple\nviews of current params."}, {Name: "Good", Doc: "Good is for SaveAll, save to params_good for a known good params state.\nThis can be done prior to making a new release after all tests are passing.\nAdd results to git to provide a full diff record of all params over level."}}})

var _ = types.AddType(&types.Type{Name: "main.RunConfig", IDName: "run-config", Doc: "RunConfig has config parameters related to running the sim.", Fields: []types.Field{{Name: "Trials", Doc: "Trials is the total number of epochs per run."}, {Name: "Cycles", Doc: "Cycles is the total number of cycles to run."}, {Name: "PlusCycles", Doc: "PlusCycles is the total number of plus-phase cycles per trial. For Cycles=300, use 100."}, {Name: "SpikeBinCycles", Doc: "SpikeBinCycles is the number of cycles per SpikeBin: how fine-grained the synaptic Ca is."}, {Name: "NSpikeBins", Doc: "NSpikeBins is the total number of spike bins in unit variables.\nSet to Context.ThetaCycles / SpikeBinCycles in Build."}}})

var _ = types.AddType(&types.Type{Name: "main.LogConfig", IDName: "log-config", Doc: "LogConfig has config parameters related to logging data.", Fields: []types.Field{{Name: "Save", Doc: "Save saves a log file when run in nogui mode."}}})

var _ = types.AddType(&types.Type{Name: "main.Config", IDName: "config", Doc: "Config has the overall Sim configuration options.", Fields: []types.Field{{Name: "Name", Doc: "Name is the short name of the sim."}, {Name: "Title", Doc: "Title is the longer title of the sim."}, {Name: "URL", Doc: "URL is a link to the online README or other documentation for this sim."}, {Name: "Doc", Doc: "Doc is brief documentation of the sim."}, {Name: "RandomHz", Doc: "RandomHz generates random firing rates, for testing"}, {Name: "MinusHz", Doc: "minus phase firing rate"}, {Name: "PlusHz", Doc: "\tplus phase firing rate"}, {Name: "SendDiffHz", Doc: "additive difference in sending firing frequency relative to recv (recv has basic minus, plus)"}, {Name: "GeClamp", Doc: "clamp constant Ge value -- otherwise drive discrete spiking input"}, {Name: "SpikeHz", Doc: "frequency of input spiking for !GeClamp mode"}, {Name: "Ge", Doc: "Raw synaptic excitatory conductance"}, {Name: "Gi", Doc: "Inhibitory conductance"}, {Name: "Includes", Doc: "Includes has a list of additional config files to include.\nAfter configuration, it contains list of include files added."}, {Name: "GUI", Doc: "GUI means open the GUI. Otherwise it runs automatically and quits,\nsaving results to log files."}, {Name: "Debug", Doc: "Debug reports debugging information."}, {Name: "Params", Doc: "Params has parameter related configuration options."}, {Name: "Run", Doc: "Run has sim running related configuration options."}, {Name: "Log", Doc: "Log has data logging related configuration options."}}})

var _ = types.AddType(&types.Type{Name: "main.SynCaParams", IDName: "syn-ca-params", Doc: "SynCaParams has rate constants for integrating spike-driven Ca calcium\nat different time scales, including final CaP = CaMKII and CaD = DAPK1\ntimescales for LTP potentiation vs. LTD depression factors.", Directives: []types.Directive{{Tool: "types", Directive: "add"}}, Fields: []types.Field{{Name: "SynTau", Doc: "time constant for integrating spike-driven calcium trace at sender and recv\nneurons, CaSyn, which then drives synapse-level integration of the\njoint pre * post synapse-level activity, in cycles (msec).\nNote: if this param is changed, then there will be a change in effective\nlearning rate that can be compensated for by multiplying\nPathParams.Learn.KinaseCa.CaScale by sqrt(30 / sqrt(SynTau)"}, {Name: "SynDt", Doc: "rate = 1 / tau"}, {Name: "CaScale", Doc: "CaScale is a scaling multiplier on synaptic Ca values,\nwhich due to the multiplication of send * recv are smaller in magnitude.\nThe default 12 value keeps them in roughly the unit scale,\nand affects effective learning rate."}, {Name: "LinearScale", Doc: "LinearScale multiplies computed CaSyn for accumulating into SpikeBins"}, {Name: "Dt", Doc: "time constants for integrating at M, P, and D cascading levels"}}})

var _ = types.AddType(&types.Type{Name: "main.KinaseNeuron", IDName: "kinase-neuron", Doc: "KinaseNeuron has Neuron state", Fields: []types.Field{{Name: "Spike", Doc: "Neuron spiking (0,1)"}, {Name: "SpikeP", Doc: "Neuron probability of spiking"}, {Name: "CaSyn", Doc: "CaSyn is spike-driven calcium trace for synapse-level Ca-driven learning:\nexponential integration of SpikeG * Spike at SynTau time constant (typically 30).\nSynapses integrate send.CaSyn * recv.CaSyn across M, P, D time integrals for the\nsynaptic trace driving credit assignment in learning. Time constant reflects\nbinding time of Glu to NMDA and Ca buffering postsynaptically, and determines\ntime window where pre * post spiking must overlap to drive learning."}, {Name: "StartCaSyn", Doc: "regression variables"}, {Name: "TotalSpikes"}, {Name: "SpikeBins", Doc: "binned count of spikes, for regression learning"}}})

var _ = types.AddType(&types.Type{Name: "main.KinaseSynapse", IDName: "kinase-synapse", Doc: "KinaseSynapse has Synapse state", Fields: []types.Field{{Name: "CaM", Doc: "CaM is first stage running average (mean) Ca calcium level (like CaM = calmodulin), feeds into CaP"}, {Name: "CaP", Doc: "CaP is shorter timescale integrated CaM value, representing the plus, LTP direction of weight change and capturing the function of CaMKII in the Kinase learning rule"}, {Name: "CaD", Doc: "CaD is longer timescale integrated CaP value, representing the minus, LTD direction of weight change and capturing the function of DAPK1 in the Kinase learning rule"}, {Name: "DWt", Doc: "DWt is the CaP - CaD"}}})

var _ = types.AddType(&types.Type{Name: "main.KinaseState", IDName: "kinase-state", Doc: "KinaseState is basic Kinase equation state", Fields: []types.Field{{Name: "SSE", Doc: "SSE for decoder"}, {Name: "Condition", Doc: "Condition counter"}, {Name: "Cond", Doc: "Condition description"}, {Name: "Trial", Doc: "Trial counter"}, {Name: "Cycle", Doc: "Cycle counter"}, {Name: "MinusHz", Doc: "phase-based firing rates"}, {Name: "PlusHz", Doc: "phase-based firing rates"}, {Name: "ErrDWt", Doc: "ErrDWt is the target error dwt: PlusHz - MinusHz"}, {Name: "Send", Doc: "Sending neuron"}, {Name: "Recv", Doc: "Receiving neuron"}, {Name: "StdSyn", Doc: "Standard synapse values"}, {Name: "SpikeBin", Doc: "Current spike bin value"}, {Name: "LinearSyn", Doc: "Linear synapse values"}, {Name: "SpikeBins", Doc: "binned integration of send, recv spikes"}}})

var _ = types.AddType(&types.Type{Name: "main.Modes", IDName: "modes", Doc: "Modes are the looping modes (Stacks) for running and statistics."})

var _ = types.AddType(&types.Type{Name: "main.Levels", IDName: "levels", Doc: "Levels are the looping levels for running and statistics."})

var _ = types.AddType(&types.Type{Name: "main.StatsPhase", IDName: "stats-phase", Doc: "StatsPhase is the phase of stats processing for given mode, level.\nAccumulated values are reset at Start, added each Step."})

var _ = types.AddType(&types.Type{Name: "main.Sim", IDName: "sim", Doc: "Sim encapsulates the entire simulation model, and we define all the\nfunctionality as methods on this struct.  This structure keeps all relevant\nstate information organized and available without having to pass everything around\nas arguments to methods, and provides the core GUI interface (note the view tags\nfor the fields which provide hints to how things should be displayed).", Fields: []types.Field{{Name: "Config", Doc: "simulation configuration parameters -- set by .toml config file and / or args"}, {Name: "CaSpike", Doc: "Kinase CaSpike params"}, {Name: "SynCa", Doc: "Kinase SynCa params"}, {Name: "CaPWts", Doc: "CaPWts are SpikeBin integration weights for CaP"}, {Name: "CaDWts", Doc: "CaDWts are SpikeBin integration weights for CaD"}, {Name: "Kinase", Doc: "Kinase state"}, {Name: "TrainData", Doc: "Training data for least squares solver"}, {Name: "Root", Doc: "Root is the root tensorfs directory, where all stats and other misc sim data goes."}, {Name: "Stats", Doc: "Stats has the stats directory within Root."}, {Name: "Current", Doc: "Current has the current stats values within Stats."}, {Name: "StatFuncs", Doc: "StatFuncs are statistics functions called at given mode and level,\nto perform all stats computations. phase = Start does init at start of given level,\nand all intialization / configuration (called during Init too)."}, {Name: "GUI", Doc: "GUI manages all the GUI elements"}, {Name: "RandSeeds", Doc: "RandSeeds is a list of random seeds to use for each run."}}})

var _ = types.AddFunc(&types.Func{Name: "main.main"})

var _ = types.AddFunc(&types.Func{Name: "main.RunSim", Doc: "RunSim runs the simulation with given configuration.", Args: []string{"cfg"}, Returns: []string{"error"}})
