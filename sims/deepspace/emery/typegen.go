// Code generated by "core generate -add-types -add-funcs -setters -gosl"; DO NOT EDIT.

package emery

import (
	"image"

	"cogentcore.org/core/core"
	"cogentcore.org/core/types"
	"cogentcore.org/core/xyz/physics"
	"cogentcore.org/core/xyz/physics/world"
	"cogentcore.org/core/xyz/xyzcore"
	"cogentcore.org/lab/base/randx"
	"cogentcore.org/lab/tensor"
	"github.com/emer/emergent/v2/popcode"
	"github.com/emer/v1vision/dog"
	"github.com/emer/v1vision/vfilter"
)

var _ = types.AddType(&types.Type{Name: "github.com/emer/axon/v2/sims/deepspace/emery.Vis", IDName: "vis", Doc: "Vis does DoG filtering on images", Fields: []types.Field{{Name: "ClipToFit", Doc: "if true, and input image is larger than target image size, central region is clipped out as the input -- otherwise image is sized to target size"}, {Name: "DoG", Doc: "LGN DoG filter parameters"}, {Name: "Geom", Doc: "geometry of input, output"}, {Name: "ImageSize", Doc: "target image size to use -- images will be rescaled to this size"}, {Name: "DoGFilter", Doc: "DoG filter tensor -- has 3 filters (on, off, net)"}, {Name: "Image", Doc: "current input image"}, {Name: "ImageTsr", Doc: "input image as tensor"}, {Name: "OutTsr", Doc: "DoG filter output tensor"}}})

// SetClipToFit sets the [Vis.ClipToFit]:
// if true, and input image is larger than target image size, central region is clipped out as the input -- otherwise image is sized to target size
func (t *Vis) SetClipToFit(v bool) *Vis { t.ClipToFit = v; return t }

// SetDoG sets the [Vis.DoG]:
// LGN DoG filter parameters
func (t *Vis) SetDoG(v dog.Filter) *Vis { t.DoG = v; return t }

// SetGeom sets the [Vis.Geom]:
// geometry of input, output
func (t *Vis) SetGeom(v vfilter.Geom) *Vis { t.Geom = v; return t }

// SetImageSize sets the [Vis.ImageSize]:
// target image size to use -- images will be rescaled to this size
func (t *Vis) SetImageSize(v image.Point) *Vis { t.ImageSize = v; return t }

// SetDoGFilter sets the [Vis.DoGFilter]:
// DoG filter tensor -- has 3 filters (on, off, net)
func (t *Vis) SetDoGFilter(v tensor.Float32) *Vis { t.DoGFilter = v; return t }

// SetImageTsr sets the [Vis.ImageTsr]:
// input image as tensor
func (t *Vis) SetImageTsr(v tensor.Float32) *Vis { t.ImageTsr = v; return t }

// SetOutTsr sets the [Vis.OutTsr]:
// DoG filter output tensor
func (t *Vis) SetOutTsr(v tensor.Float32) *Vis { t.OutTsr = v; return t }

var _ = types.AddType(&types.Type{Name: "github.com/emer/axon/v2/sims/deepspace/emery.Actions", IDName: "actions", Doc: "Actions is a list of mutually exclusive states\nfor tracing the behavior and internal state of Emery"})

var _ = types.AddType(&types.Type{Name: "github.com/emer/axon/v2/sims/deepspace/emery.Geom", IDName: "geom", Doc: "Geom is overall geometry of the space", Fields: []types.Field{{Name: "Depth", Doc: "computed total depth, starts at 0 goes deep"}, {Name: "Width", Doc: "computed total width"}, {Name: "Thick", Doc: "thickness of walls, floor"}, {Name: "HalfWidth", Doc: "half width for centering on 0 X"}}})

// SetDepth sets the [Geom.Depth]:
// computed total depth, starts at 0 goes deep
func (t *Geom) SetDepth(v float32) *Geom { t.Depth = v; return t }

// SetWidth sets the [Geom.Width]:
// computed total width
func (t *Geom) SetWidth(v float32) *Geom { t.Width = v; return t }

// SetThick sets the [Geom.Thick]:
// thickness of walls, floor
func (t *Geom) SetThick(v float32) *Geom { t.Thick = v; return t }

// SetHalfWidth sets the [Geom.HalfWidth]:
// half width for centering on 0 X
func (t *Geom) SetHalfWidth(v float32) *Geom { t.HalfWidth = v; return t }

var _ = types.AddType(&types.Type{Name: "github.com/emer/axon/v2/sims/deepspace/emery.Action", IDName: "action", Doc: "Action represents a single action.", Fields: []types.Field{{Name: "Action", Doc: "Action is the action taken"}, {Name: "Value", Doc: "Value is the action parameter (e.g., rotation degrees)"}}})

// SetAction sets the [Action.Action]:
// Action is the action taken
func (t *Action) SetAction(v Actions) *Action { t.Action = v; return t }

// SetValue sets the [Action.Value]:
// Value is the action parameter (e.g., rotation degrees)
func (t *Action) SetValue(v float32) *Action { t.Value = v; return t }

var _ = types.AddType(&types.Type{Name: "github.com/emer/axon/v2/sims/deepspace/emery.EmeryEnv", IDName: "emery-env", Doc: "EmeryEnv is the emery rat environment", Fields: []types.Field{{Name: "Name", Doc: "name of this environment"}, {Name: "AngleCode", Doc: "angle population code values, in normalized units"}, {Name: "LinearCode", Doc: "population code for linear values, -1..1, in normalized units"}, {Name: "Vis", Doc: "Vis is vision processing filters."}, {Name: "UnitsPer", Doc: "UnitsPer is the number of units per localist value."}, {Name: "LinearUnits", Doc: "LinearUnits is the number of units per linear value."}, {Name: "AngleUnits", Doc: "AngleUnits is the number of units per angle value."}, {Name: "Geom", Doc: "Geom is the world geometry."}, {Name: "Emery", Doc: "Emery is the physics body for Emery."}, {Name: "EyeR", Doc: "Right and left eyes of emery"}, {Name: "EyeL", Doc: "Right and left eyes of emery"}, {Name: "EyeRImage", Doc: "captured images"}, {Name: "EyeLImage", Doc: "captured images"}, {Name: "World", Doc: "World is the 3D world, including emery"}, {Name: "Camera", Doc: "offscreen render camera settings"}, {Name: "NextAct", Doc: "NextAct is the next action to be taken."}, {Name: "LastAct", Doc: "LastAct is the last action taken."}, {Name: "CurStates", Doc: "CurStates is the current rendered state tensors."}, {Name: "NextStates", Doc: "NextStates is the next rendered state tensors -- updated from actions."}, {Name: "MaxRotate", Doc: "MaxRotate is maximum rotation angle magnitude per action, in degrees."}, {Name: "Rand", Doc: "Rand is the random number generator for the env.\nAll random calls must use this.\nSet seed here for weight initialization values."}, {Name: "RandSeed", Doc: "random seed"}}})

// SetName sets the [EmeryEnv.Name]:
// name of this environment
func (t *EmeryEnv) SetName(v string) *EmeryEnv { t.Name = v; return t }

// SetAngleCode sets the [EmeryEnv.AngleCode]:
// angle population code values, in normalized units
func (t *EmeryEnv) SetAngleCode(v popcode.Ring) *EmeryEnv { t.AngleCode = v; return t }

// SetLinearCode sets the [EmeryEnv.LinearCode]:
// population code for linear values, -1..1, in normalized units
func (t *EmeryEnv) SetLinearCode(v popcode.OneD) *EmeryEnv { t.LinearCode = v; return t }

// SetVis sets the [EmeryEnv.Vis]:
// Vis is vision processing filters.
func (t *EmeryEnv) SetVis(v Vis) *EmeryEnv { t.Vis = v; return t }

// SetUnitsPer sets the [EmeryEnv.UnitsPer]:
// UnitsPer is the number of units per localist value.
func (t *EmeryEnv) SetUnitsPer(v int) *EmeryEnv { t.UnitsPer = v; return t }

// SetLinearUnits sets the [EmeryEnv.LinearUnits]:
// LinearUnits is the number of units per linear value.
func (t *EmeryEnv) SetLinearUnits(v int) *EmeryEnv { t.LinearUnits = v; return t }

// SetAngleUnits sets the [EmeryEnv.AngleUnits]:
// AngleUnits is the number of units per angle value.
func (t *EmeryEnv) SetAngleUnits(v int) *EmeryEnv { t.AngleUnits = v; return t }

// SetGeom sets the [EmeryEnv.Geom]:
// Geom is the world geometry.
func (t *EmeryEnv) SetGeom(v Geom) *EmeryEnv { t.Geom = v; return t }

// SetEmery sets the [EmeryEnv.Emery]:
// Emery is the physics body for Emery.
func (t *EmeryEnv) SetEmery(v *physics.Group) *EmeryEnv { t.Emery = v; return t }

// SetEyeR sets the [EmeryEnv.EyeR]:
// Right and left eyes of emery
func (t *EmeryEnv) SetEyeR(v physics.Body) *EmeryEnv { t.EyeR = v; return t }

// SetEyeL sets the [EmeryEnv.EyeL]:
// Right and left eyes of emery
func (t *EmeryEnv) SetEyeL(v physics.Body) *EmeryEnv { t.EyeL = v; return t }

// SetEyeRImage sets the [EmeryEnv.EyeRImage]:
// captured images
func (t *EmeryEnv) SetEyeRImage(v image.Image) *EmeryEnv { t.EyeRImage = v; return t }

// SetEyeLImage sets the [EmeryEnv.EyeLImage]:
// captured images
func (t *EmeryEnv) SetEyeLImage(v image.Image) *EmeryEnv { t.EyeLImage = v; return t }

// SetWorld sets the [EmeryEnv.World]:
// World is the 3D world, including emery
func (t *EmeryEnv) SetWorld(v *world.World) *EmeryEnv { t.World = v; return t }

// SetCamera sets the [EmeryEnv.Camera]:
// offscreen render camera settings
func (t *EmeryEnv) SetCamera(v world.Camera) *EmeryEnv { t.Camera = v; return t }

// SetNextAct sets the [EmeryEnv.NextAct]:
// NextAct is the next action to be taken.
func (t *EmeryEnv) SetNextAct(v Action) *EmeryEnv { t.NextAct = v; return t }

// SetLastAct sets the [EmeryEnv.LastAct]:
// LastAct is the last action taken.
func (t *EmeryEnv) SetLastAct(v Action) *EmeryEnv { t.LastAct = v; return t }

// SetCurStates sets the [EmeryEnv.CurStates]:
// CurStates is the current rendered state tensors.
func (t *EmeryEnv) SetCurStates(v map[string]*tensor.Float32) *EmeryEnv { t.CurStates = v; return t }

// SetNextStates sets the [EmeryEnv.NextStates]:
// NextStates is the next rendered state tensors -- updated from actions.
func (t *EmeryEnv) SetNextStates(v map[string]*tensor.Float32) *EmeryEnv { t.NextStates = v; return t }

// SetMaxRotate sets the [EmeryEnv.MaxRotate]:
// MaxRotate is maximum rotation angle magnitude per action, in degrees.
func (t *EmeryEnv) SetMaxRotate(v float32) *EmeryEnv { t.MaxRotate = v; return t }

// SetRand sets the [EmeryEnv.Rand]:
// Rand is the random number generator for the env.
// All random calls must use this.
// Set seed here for weight initialization values.
func (t *EmeryEnv) SetRand(v randx.SysRand) *EmeryEnv { t.Rand = v; return t }

// SetRandSeed sets the [EmeryEnv.RandSeed]:
// random seed
func (t *EmeryEnv) SetRandSeed(v int64) *EmeryEnv { t.RandSeed = v; return t }

var _ = types.AddType(&types.Type{Name: "github.com/emer/axon/v2/sims/deepspace/emery.GUI", IDName: "gui", Doc: "GUI provides a GUI view onto the EmeryEnv", Fields: []types.Field{{Name: "Env", Doc: "Env is the environment we're viewing"}, {Name: "SceneEditor", Doc: "3D visualization of the Scene"}, {Name: "EyeRImageDisp", Doc: "first-person right-eye full field view"}, {Name: "EyeLImageDisp", Doc: "first-person left-eye fovea view"}}})

// SetEnv sets the [GUI.Env]:
// Env is the environment we're viewing
func (t *GUI) SetEnv(v *EmeryEnv) *GUI { t.Env = v; return t }

// SetSceneEditor sets the [GUI.SceneEditor]:
// 3D visualization of the Scene
func (t *GUI) SetSceneEditor(v *xyzcore.SceneEditor) *GUI { t.SceneEditor = v; return t }

// SetEyeRImageDisp sets the [GUI.EyeRImageDisp]:
// first-person right-eye full field view
func (t *GUI) SetEyeRImageDisp(v *core.Image) *GUI { t.EyeRImageDisp = v; return t }

// SetEyeLImageDisp sets the [GUI.EyeLImageDisp]:
// first-person left-eye fovea view
func (t *GUI) SetEyeLImageDisp(v *core.Image) *GUI { t.EyeLImageDisp = v; return t }
