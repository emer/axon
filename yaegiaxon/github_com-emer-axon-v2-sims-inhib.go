// Code generated by 'yaegi extract github.com/emer/axon/v2/sims/inhib'. DO NOT EDIT.

package yaegiaxon

import (
	"github.com/emer/axon/v2/sims/inhib"
	"reflect"
)

func init() {
	Symbols["github.com/emer/axon/v2/sims/inhib/inhib"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Cycle":            reflect.ValueOf(inhib.Cycle),
		"Embed":            reflect.ValueOf(inhib.Embed),
		"Epoch":            reflect.ValueOf(inhib.Epoch),
		"InhByNm":          reflect.ValueOf(inhib.InhByNm),
		"InhNm":            reflect.ValueOf(inhib.InhNm),
		"LayByNm":          reflect.ValueOf(inhib.LayByNm),
		"LayNm":            reflect.ValueOf(inhib.LayNm),
		"LayerParams":      reflect.ValueOf(&inhib.LayerParams).Elem(),
		"LevelsN":          reflect.ValueOf(inhib.LevelsN),
		"LevelsValues":     reflect.ValueOf(inhib.LevelsValues),
		"ModesN":           reflect.ValueOf(inhib.ModesN),
		"ModesValues":      reflect.ValueOf(inhib.ModesValues),
		"PathParams":       reflect.ValueOf(&inhib.PathParams).Elem(),
		"Start":            reflect.ValueOf(inhib.Start),
		"StatsPhaseN":      reflect.ValueOf(inhib.StatsPhaseN),
		"StatsPhaseValues": reflect.ValueOf(inhib.StatsPhaseValues),
		"Step":             reflect.ValueOf(inhib.Step),
		"Test":             reflect.ValueOf(inhib.Test),
		"Train":            reflect.ValueOf(inhib.Train),
		"Trial":            reflect.ValueOf(inhib.Trial),

		// type definitions
		"Config":      reflect.ValueOf((*inhib.Config)(nil)),
		"Levels":      reflect.ValueOf((*inhib.Levels)(nil)),
		"LogConfig":   reflect.ValueOf((*inhib.LogConfig)(nil)),
		"Modes":       reflect.ValueOf((*inhib.Modes)(nil)),
		"ParamConfig": reflect.ValueOf((*inhib.ParamConfig)(nil)),
		"RunConfig":   reflect.ValueOf((*inhib.RunConfig)(nil)),
		"Sim":         reflect.ValueOf((*inhib.Sim)(nil)),
		"StatsPhase":  reflect.ValueOf((*inhib.StatsPhase)(nil)),
	}
}
