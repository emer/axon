// Code generated by "core generate -add-types -add-funcs"; DO NOT EDIT.

package main

import (
	"cogentcore.org/core/types"
)

var _ = types.AddType(&types.Type{Name: "main.EnvConfig", IDName: "env-config", Doc: "EnvConfig has config params for environment.", Fields: []types.Field{{Name: "Env", Doc: "Env parameters: can set any field/subfield on Env struct,\nusing standard TOML formatting."}, {Name: "SeqLen", Doc: "SeqLen is the sequence length."}, {Name: "NActions", Doc: "NActions is the number of distinct actions represented: determines the difficulty\nof learning in terms of the size of the space that must be searched.\neffective size = NActions ^ SeqLen\n4 ^ 3 = 64 or 7 ^2 = 49 are reliably solved"}, {Name: "ActSoftMaxGain", Doc: "ActSoftMaxGain is the gain on the softmax for choosing actions:\nlower values are more noisy; 2 > 3+ > 1>."}}})

var _ = types.AddType(&types.Type{Name: "main.ParamConfig", IDName: "param-config", Doc: "ParamConfig has config parameters related to sim params.", Fields: []types.Field{{Name: "Tweak", Doc: "Tweak means to perform automated parameter tweaking for\nparameters marked Hypers Tweak = log,incr, or [vals]."}, {Name: "Baseline", Doc: "Baseline for Tweak, if true, first run a baseline with current default params."}, {Name: "DryRun", Doc: "DryRun for Tweak, if true, only print what would be done, don't run."}, {Name: "Sheet", Doc: "Sheet is the extra params sheet name(s) to use (space separated\nif multiple). Must be valid name as listed in compiled-in params\nor loaded params."}, {Name: "Tag", Doc: "Tag is an extra tag to add to file names and logs saved from this run."}, {Name: "Note", Doc: "Note is additional info to describe the run params etc,\nlike a git commit message for the run."}, {Name: "SaveAll", Doc: "SaveAll will save a snapshot of all current param and config settings\nin a directory named params_<datestamp> (or _good if Good is true),\nthen quit. Useful for comparing to later changes and seeing multiple\nviews of current params."}, {Name: "Good", Doc: "Good is for SaveAll, save to params_good for a known good params state.\nThis can be done prior to making a new release after all tests are passing.\nAdd results to git to provide a full diff record of all params over level."}}})

var _ = types.AddType(&types.Type{Name: "main.RunConfig", IDName: "run-config", Doc: "RunConfig has config parameters related to running the sim.", Fields: []types.Field{{Name: "GPU", Doc: "GPU uses the GPU for computation; only for testing in this model -- not faster."}, {Name: "NData", Doc: "NData is the number of data-parallel items to process in parallel per trial.\nIs significantly faster for both CPU and GPU.  Results in an effective\nmini-batch of learning."}, {Name: "NThreads", Doc: "NThreads is the number of parallel threads for CPU computation;\n0 = use default."}, {Name: "Run", Doc: "Run is the _starting_ run number, which determines the random seed.\nNRuns counts up from there. Can do all runs in parallel by launching\nseparate jobs with each starting Run, NRuns = 1."}, {Name: "Runs", Doc: "Runs is the total number of runs to do when running Train, starting from Run."}, {Name: "Epochs", Doc: "Epochs is the total number of epochs per run."}, {Name: "Trials", Doc: "Trials is the total number of trials per epoch.\nShould be an even multiple of NData."}, {Name: "Cycles", Doc: "Cycles is the total number of cycles per trial: at least 200."}, {Name: "PlusCycles", Doc: "PlusCycles is the total number of plus-phase cycles per trial. For Cycles=300, use 100."}}})

var _ = types.AddType(&types.Type{Name: "main.LogConfig", IDName: "log-config", Doc: "LogConfig has config parameters related to logging data.", Fields: []types.Field{{Name: "SaveWeights", Doc: "SaveWeights will save final weights after each run."}, {Name: "Train", Doc: "Train has the list of Train mode levels to save log files for."}, {Name: "Test", Doc: "Test has the list of Test mode levels to save log files for."}, {Name: "Testing", Doc: "Testing activates testing mode: records detailed data for Go CI tests\n(not the same as running test mode on network, via Looper)."}}})

var _ = types.AddType(&types.Type{Name: "main.Config", IDName: "config", Doc: "Config has the overall Sim configuration options.", Fields: []types.Field{{Name: "Name", Doc: "Name is the short name of the sim."}, {Name: "Title", Doc: "Title is the longer title of the sim."}, {Name: "URL", Doc: "URL is a link to the online README or other documentation for this sim."}, {Name: "Doc", Doc: "Doc is brief documentation of the sim."}, {Name: "Includes", Doc: "Includes has a list of additional config files to include.\nAfter configuration, it contains list of include files added."}, {Name: "GUI", Doc: "GUI means open the GUI. Otherwise it runs automatically and quits,\nsaving results to log files."}, {Name: "Debug", Doc: "Debug reports debugging information."}, {Name: "Env", Doc: "Env has environment configuration options."}, {Name: "Params", Doc: "Params has parameter related configuration options."}, {Name: "Run", Doc: "Run has sim running related configuration options."}, {Name: "Log", Doc: "Log has data logging related configuration options."}}})

var _ = types.AddType(&types.Type{Name: "main.MotorSeqEnv", IDName: "motor-seq-env", Doc: "MotorSeqEnv implements simple motor sequencing patterns to test DS BG learning.\nSimplest mode has sequential State inputs which require distinct motor actions.\nAlso implements simple reward prediction error for dopamine.\nThe first trial is blank, and the last trial has the reward.", Fields: []types.Field{{Name: "Name", Doc: "name of environment -- Train or Test"}, {Name: "Mode", Doc: "training or testing env?"}, {Name: "Trial", Doc: "trial counter for index into sequence"}, {Name: "SeqLen", Doc: "sequence length."}, {Name: "NActions", Doc: "number of distinct actions represented: determines the difficulty\nof learning in terms of the size of the space that must be searched.\neffective size = NActions ^ SeqLen\n4 ^ 3 = 64 or 7 ^2 = 49 are reliably solved"}, {Name: "RewPredLRate", Doc: "learning rate for reward prediction"}, {Name: "RewPredMin", Doc: "minimum rewpred value"}, {Name: "PartialCreditAt", Doc: "\tgive reward with probability in proportion to number of\ncorrect actions in sequence, above given threshold.  If 0, don't use"}, {Name: "PartialGraded", Doc: "\tif doing partial credit, also make the reward value graded (weaker for fewer)"}, {Name: "SeqMap", Doc: "sequence map from sequence index to target motor action"}, {Name: "Target", Doc: "current target correct action according to the sequence"}, {Name: "CurAction", Doc: "current action taken by network"}, {Name: "PrevAction", Doc: "previous action taken by network"}, {Name: "Correct", Doc: "is current action correct"}, {Name: "NCorrect", Doc: "number of correct actions taken this sequence"}, {Name: "PrevNCorrect", Doc: "previous number of correct actions taken, when reward is computed (NCorrect is reset)"}, {Name: "Rew", Doc: "raw reward based on action sequence, computed at end of seq"}, {Name: "RewPred", Doc: "reward prediction based on incremental learning: RewPredLRate * (Rew - RewPred)"}, {Name: "RPE", Doc: "reward prediction error: Rew - RewPred"}, {Name: "NUnitsPer", Doc: "number of units per localist representation, in Y axis"}, {Name: "NUnits", Doc: "total number of units: NActions * NUnitsPer"}, {Name: "Rand", Doc: "random number generator for the env -- all random calls must use this"}, {Name: "RandSeed", Doc: "random seed"}, {Name: "States", Doc: "named states: State, Target, PrevAction, Action"}}})

var _ = types.AddType(&types.Type{Name: "main.Modes", IDName: "modes", Doc: "Modes are the looping modes (Stacks) for running and statistics."})

var _ = types.AddType(&types.Type{Name: "main.Levels", IDName: "levels", Doc: "Levels are the looping levels for running and statistics."})

var _ = types.AddType(&types.Type{Name: "main.StatsPhase", IDName: "stats-phase", Doc: "StatsPhase is the phase of stats processing for given mode, level.\nAccumulated values are reset at Start, added each Step."})

var _ = types.AddType(&types.Type{Name: "main.Sim", IDName: "sim", Doc: "Sim encapsulates the entire simulation model, and we define all the\nfunctionality as methods on this struct.  This structure keeps all relevant\nstate information organized and available without having to pass everything around\nas arguments to methods, and provides the core GUI interface (note the view tags\nfor the fields which provide hints to how things should be displayed).", Fields: []types.Field{{Name: "Config", Doc: "simulation configuration parameters -- set by .toml config file and / or args"}, {Name: "Net", Doc: "Net is the network: click to view / edit parameters for layers, paths, etc."}, {Name: "Params", Doc: "Params manages network parameter setting."}, {Name: "Loops", Doc: "Loops are the the control loops for running the sim, in different Modes\nacross stacks of Levels."}, {Name: "Envs", Doc: "Envs provides mode-string based storage of environments."}, {Name: "TrainUpdate", Doc: "TrainUpdate has Train mode netview update parameters."}, {Name: "TestUpdate", Doc: "TestUpdate has Test mode netview update parameters."}, {Name: "Root", Doc: "Root is the root tensorfs directory, where all stats and other misc sim data goes."}, {Name: "Stats", Doc: "Stats has the stats directory within Root."}, {Name: "Current", Doc: "Current has the current stats values within Stats."}, {Name: "StatFuncs", Doc: "StatFuncs are statistics functions called at given mode and level,\nto perform all stats computations. phase = Start does init at start of given level,\nand all intialization / configuration (called during Init too)."}, {Name: "GUI", Doc: "GUI manages all the GUI elements"}, {Name: "RandSeeds", Doc: "RandSeeds is a list of random seeds to use for each run."}}})

var _ = types.AddFunc(&types.Func{Name: "main.main"})

var _ = types.AddFunc(&types.Func{Name: "main.RunSim", Doc: "RunSim runs the simulation with given configuration.", Args: []string{"cfg"}, Returns: []string{"error"}})
